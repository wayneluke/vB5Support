<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * Class to handle state about the requested search.
 * Handles capturing user level search terms and drilling them down to
 * a form more digestable to search implementations.  Handles creating
 * a user readable display of the search requested.  Stores search terms
 * for creation of a backlink reference.
 *
 * Insuffienct thought was given to how to store the search values internally.
 * That is, what needs to be persisted and what can be generated on each
 * load of the object.  We are storing more than we need to and there is
 * some duplication of effort in terms of passing all of the required
 * information to the object.  It works though, so its not a high priority to
 * change
 *
 */
/**
 * vB_Search_Criteria
 *
 * @package vBulletin
 * @subpackage Search
 */
class vB_Search_Criteria
{
	use vB_Trait_NoSerialize;

	//**************************************************************************
	//Basic filter functions

	/**
	 * vB_Search_Criteria::add_filter()
	 * This function adds a generic filter to the criteria.
	 *
	 * Should generally be used either internally in the criteria object, or in
	 * the add_advanced_fields function on the search type objects.  Search
	 * consumers should generally be calling higher level functions.
	 *
	 * @param string $field
	 * @param integer $op
	 * @param mixed $value This can be a single value, or an array of values
	 * @param boolean $is_restrictive Is this filter restrictive?  At least one
	 *	restrictive filter needs to be set to have a valid search.
	 * @return nothing
	*/
	public function add_filter($field, $op, $value, $is_restrictive = false, $is_additive = false)
	{
		if ($is_additive)
		{
			if (empty($this->filters[$field][$op]))
			{
				$this->filters[$field][$op] = $value;
			}
			elseif (is_array($this->filters[$field][$op]))
			{
				if (is_array($value))
				{
					$this->filters[$field][$op] = array_merge($this->filters[$field][$op], $value);
				}
				else
				{
					$this->filters[$field][$op][] = $value;
				}
			}
			else
			{
				$temp = $this->filters[$field][$op];
				$this->filters[$field][$op][] = $temp;
				$this->filters[$field][$op][] = $value;
			}
		}
		else
		{
			$this->filters[$field][$op] = $value;
		}
		if ($is_restrictive)
		{
			$this->criteria_set = true;
		}

		// We usually set this via the add_date_filter(), but just in case
		// something comes through this directly, maintain old behavior that
		// any 'publishdate' filtering is considered "restrictive enough"
		// (see dbsearch process_view_filters on how activitystream uses this)
		if ($field === 'publishdate')
		{
			$this->has_date_filter = true;
		}
	}

	public function reset_filter($field)
	{
		// This method is currently unused, but can be problematic with ambiguous filters like
		// "date" filter. See add_date_filter() & finalize_date_filters().
		unset($this->filters[$field]);
	}

	public function setUser($userid)
	{
		$this->current_user = $userid;
	}

	public function getCurrentUser()
	{
		return $this->current_user;
	}

	function set_include_sticky($set = true)
	{
		$this->include_sticky = $set;
	}

	function get_include_sticky()
	{
		return $this->include_sticky;
	}

	/**
	 * Set the sort
	 *
	 * Only allow single field sorts
	 *
	 * @param string $field
	 * @param unknown_type $direction
	 */
	public function set_sort($field, $direction, $is_additive = true)
	{
		//handle variations on sort fields.
		// todo: search API sets direction to strtoupper, now we set it to strtolower...
		// but the querydefs generally prefers upper case .... what?
		$direction = strtolower($direction);
		if (strpos($direction, 'desc') === 0)
		{
			$direction = 'desc';
		}
		else
		{
			$direction = 'asc';
		}
		if (!$is_additive)
		{
			$this->sort = [];
		}
		$this->sort[strtolower($field)] = $direction;

		// API's search allows keyword to be empty
		if (defined('VB_API') AND VB_API === true)
		{
			$this->criteria_set = true;
		}
	}

	//**************************************************************************
	//High level filter functions

	/**
	 *	Filter by contenttype
	 */
	public function add_contenttype_filter($contenttypeid, $op = vB_Search_Core::OP_EQ)
	{
		$this_type = [];
		if (! is_array($contenttypeid))
		{
			$contenttypeid = [$contenttypeid];
		}

		foreach ($contenttypeid AS $contenttype)
		{
			$contenttype_id = vB_Types::instance()->getContentTypeID($contenttype);

			if (empty($contenttype_id) OR !is_numeric($contenttype_id))
			{
				$this->add_null_filter("Content type $contenttype does not exist.");
				continue;
			}
			$this_type[] = $contenttype_id;
		}
		if (empty($this_type))
		{
			return [];
		}
		$this->add_filter('contenttypeid', $op, $this_type);
		return $this_type;
	}

	/**
	 *	Set the keywords
	 *
	 *	@param string $keywords
	 *	@param bool $titleonly true if onl
	 */
	public function add_keyword_filter($keywords, $titleonly)
	{
		if (!trim($keywords))
		{
			return;
		}
		$this->raw_keywords = $keywords;
		$this->titleonly = $titleonly;


		//parse the query string into the words array.
		$words = $this->get_words($keywords);
		if ($words !== false)
		{
			$this->keywords = $words;
			$this->criteria_set = true;
		}
		return $words;
	}

	public function reset_keyword_filter()
	{
		unset($this->keywords, $this->raw_keywords, $this->titleonly);
	}

	public function reset_post_processors()
	{
		$this->post_processors = [];
	}

	/**
	 *	Set the user filter
	 *
	 * @param string $username.  The name of the user.
	 * @param bool $exactname.  If we should only look for an exact match
	 * @param enum $groupuser.  If we should only search for the group user, the item user,
	 *  or the default for the search type. On of the group constants in vB_Search_Core
	 */
	public function add_user_filter($username, $exactmatch)
	{
		//we don't actually have a username, do nothing.
		if (!trim($username))
		{
			return;
		}

		if (!$exactmatch AND strlen($username) < 3)
		{
			$this->add_error('searchnametooshort');
			return [];
		}

		$username = vB_String::htmlSpecialCharsUni($username);
		if ($exactmatch)
		{
			$user = vB_Api::instanceInternal("User")->fetchByUsername($username, [vB_Api_User::USERINFO_AVATAR]);
			$userid = empty($user['userid']) ? false : $user['userid'];
		}
		else
		{
			$userid = vB::getDbAssertor()->getColumn(
				'user', 'userid', [
					vB_dB_Query::TYPE_KEY => vB_dB_Query::QUERY_SELECT,
					vB_dB_Query::CONDITIONS_KEY => [
							['field' => 'username', 'value' => "$username", 'operator' => vB_dB_Query::OPERATOR_INCLUDES]
					],
					['field' => 'username', 'direction' => vB_dB_Query::SORT_ASC]
				]
			);
		}
		if (empty($userid))
		{
			$this->add_null_filter("$username not found");
		}
		else
		{
			$this->add_filter('userid', vB_Search_Core::OP_EQ, $userid, true);
		}
		return $userid;
	}

	/**
	 *	Add a filter for a tag
	 *
	 *	@param string|array $tag - the tag string to filter on
	 */
	public function add_tag_filter($tags)
	{
		if (!is_array($tags))
		{
			$tags = vB_Library::instance('tags')->splitTagList($tags);
		}

		$query = vB::getDbAssertor()->select('vBForum:tag', ['tagtext' => $tags]);

		$strutil = vB::getString();
		$tags_not_found = array_flip(array_map([$strutil, 'strtolower'], $tags));

		$existing_tags = [];
		$synonyms = [];
		foreach ($query AS $row)
		{
			unset($tags_not_found[$strutil->strtolower($row['tagtext'])]);

			if ($row['canonicaltagid'] == 0)
			{
				$existing_tags[$row['tagtext']] = $row['tagid'];
			}
			else
			{
				$synonyms[] = $row['canonicaltagid'];
			}
		}
		$tags_not_found = array_keys($tags_not_found);

		$canonical = vB_Api::instanceInternal('tags')->getTags(array_unique($synonyms));
		foreach ($canonical['tags'] AS $row)
		{
			$existing_tags[$row['tagtext']] = $row['tagid'];
		}

		$this->add_filter('tag', vB_Search_Core::OP_EQ, $existing_tags, true);
		if (!empty($tags_not_found))
		{
			foreach ($tags_not_found as $tag)
			{
				$this->add_null_filter("Tag $tag does not exist.");
			}
		}

		return $existing_tags;
	}

	/**
	 * Add a filter for date
	 *
	 * @param ???? direction
	 * @param ???? the dateline to limit the query to.
	 */
	public function add_date_filter($direction, $dateline)
	{
		$this->queued_date_filters[$direction] = $dateline;
		$this->has_date_filter = true;
		// Work around for search API belatedly setting date filtering
		// in the case of "activity view but not restrictive enough"
		if ($this->date_filter_finalized)
		{
			$this->finalize_date_filters();
		}
	}

	public function finalize_date_filters()
	{
		$dateColumn = 'publishdate';

		/*
		We want new replies to prop up old topics in the activity stream.
		The activitystream currently ALWAYS enforces a starter-only on `node`,
		so all date filtering is done on the topic. So we cannot use the publishdate,
		as that would exclude any topics published older than this cutoff but has
		new replies.
		One exception to this is if they have the "New Topics" - "On". While this
		sets a starter_only = true filter, in the search code all this did was switch
		the selected column from node.lastcontentid to node.nodeid (so it's literally
		just returning starters instead of the reply or comment that would've been
		shown without doing any meaningful changes on matched `node`s). I think if
		they want new topics, they do NOT want very old topics that are revived by
		new replies or comments, so I'm maintaining the old behavior of filtering out
		by publishdate in this case.
		 */
		$activityStream = $this->has_view_filter(vB_Api_Search::FILTER_VIEW_ACTIVITY);
		$starterOnly = ($this->get_bool_filter_for("starter_only") === true);
		if ($activityStream AND !$starterOnly)
		{
			$dateColumn = 'lastcontent';
		}

		// This is sample code to switch between publishdate & lastcontent depending on which SORT
		// is used, defaulting to lastcontent. See my comments in vbdbsearch querydefs::process_filters()
		// case 'publishdate' for more details.
		/*
		// Virtually the same logic as vbdbsearch querydefs::hasStartersOnlyFilter()
		// Note that we can't have $viewTopics & $activityStream at the same time, so we don't have to worry about
		// accidentally reverting the "activity stream with starter_only exception" logic above.
		$viewTopics = $this->has_topic_view_filter();
		if ($viewTopics)
		{
			$implicitStartersOnly = ($starterOnly OR $this->getSearchContext() === "channeldisplay");
			if ($implicitStartersOnly)
			{
				// If we have a sort by one of the date fields, we can match the date filtering to that
				if (!empty($this->sort))
				{
					$sortField = $this->get_sort_field();
					if (
						$sortField == 'created' OR
						$sortField == 'publishdate'
						// there is also a node.lastupdate column, but uncertain if we allow that for sort.
					)
					{
						// filter by publishdate for "created" filtering, should be mostly the same, and is
						// closer to the previous behavior and less risky.
						$dateColumn = 'publishdate';
					}
					else
					{
						$dateColumn == 'lastcontent';
					}
				}
			}
		}
		*/


		foreach ($this->queued_date_filters AS $__dir => $__dateline)
		{
			$this->add_filter($dateColumn, $__dir, $__dateline, true);
		}
		$this->queued_date_filters = [];
		$this->date_filter_finalized = true;
	}

	public function has_date_filter()
	{
		return $this->has_date_filter;
	}

	/**
	 * Add a filter for date
	 *
	 * @param ???? direction
	 * @param ???? the dateline to limit the query to.
	 */
	public function add_last_filter($direction, $dateline)
	{
		$this->add_filter('lastcontent', $direction, $dateline, true);
	}

	/**
	 * Add a channel filter
	 * @param int $channelId
	 * @param bool $include_starter - flag to include the node itself into the list of children
	 */
	public function add_channel_filter($channelId, $depth = false, $include_starter = false, $depth_exact = false)
	{
		if (empty($channelId))
		{
			return;
		}

		$this->add_filter('channelid', vB_Search_Core::OP_EQ, $channelId, true, true);
		if ($include_starter)
		{
			$this->include_starter = true;
		}

		if (!empty($depth))
		{
			$this->depth = intval($depth);
		}

		if (!empty($depth_exact))
		{
			$this->depth_exact = true;
		}

	}

	/**
	 * Add a complex channel filter
	 */
	public function add_inc_exc_channel_filter($filterChannels)
	{
		// This is set by the runtime vB5_Template_Runtime::parseJSON() which is called when the search template
		// calls vb:compilesearch on the json
		$currentChannelid = $filterChannels['currentChannelid'] ?? 0;
		$cleaned = vB_Library::instance('widget')->cleanFilterNodes($filterChannels, $currentChannelid);
		/*
		$filterType = $cleaned['filterType'];
		$filterChannels = $cleaned['filterChannels'];
		$includeChildren = $cleaned['includeChildren'];
		*/
		if (empty($cleaned['filterChannels']))
		{
			return;
		}

		$this->add_filter('inc_exc_channel', vB_Search_Core::OP_COMPLEX, $cleaned, true, false);
	}

	/**
	 * Add a follow filter
	 * @param int $userId
	 */
	public function add_follow_filter($type, $userid)
	{
		$this->add_filter('follow', vB_Search_Core::OP_EQ, ['type' => $type, 'userid' => $userid]);
	}

	/**
	 * Add an exclude filter. Will exclude that node's children from the results
	 * @param array|int $nodeId
	 */
	public function add_exclude_filter($nodeids)
	{
		if (!is_array($nodeids))
		{
			$nodeids = [$nodeids];
		}
		$this->add_filter('exclude', vB_Search_Core::OP_NEQ, $nodeids, false, true);
	}
	/**
	 * Adds special handleing for different views
	 * @param string $view
	 */
	public function add_view_filter($view)
	{
		$this->add_filter('view', vB_Search_Core::OP_EQ, $view);
		/* add post processing filters*/
		switch ($view)
		{
			/**
			 * only include the latest reply or comment (or the starter itself if no replies/comments yet) per starter in all the channels.
			 * Filters out the Channel nodes from the Search API nodes results.
			 * @include replies/comments in the second phase
			 */
			case vB_Api_Search::FILTER_VIEW_ACTIVITY :
				//this may be obsolete, but removing commented out call to removed method query
				break;
				/**
				 * The Topic view should only display the starter nodes for the specified channel.
				 * Filters out the Channel nodes from the Search API nodes results.
				 */
			case vB_Api_Search::FILTER_VIEW_TOPIC :
				break;
				/**
				 * The Conversation Detail view should only display the descendant nodes of (and including) the specified starter.
				 * Filters out the Comment node from the Search API nodes results.
				 */
			case vB_Api_Search::FILTER_VIEW_CONVERSATION_THREAD :
				break;
				/**
				 * The Conversation Detail view should only display the descendant nodes of (and including) the specified starter.
				 * the Comment nodes are not filtered out.
				 */
			case vB_Api_Search::FILTER_VIEW_CONVERSATION_STREAM :
				break;
			case vB_Api_Search::FILTER_VIEW_CONVERSATION_THREAD_SEARCH :
				$this->add_post_processors('PostProcessorAddComments');
				break;
		}
	}

	/**
	 * forces a 0 result query and adds a message to the query
	 * @param unknown_type $message
	 */
	public function add_null_filter($message)
	{
		$this->add_filter('null', vB_Search_Core::OP_EQ, $message);
	}

	public function add_post_processors($processor)
	{
		$this->post_processors[] = $processor;
	}

	public function get_post_processors()
	{
		return $this->post_processors;
	}
	//**************************************************************************
	//High level filter retrieval functions

	public function get_filters($field)
	{
		if (isset($this->filters[$field]))
		{
			return $this->filters[$field];
		}
		else
		{
			return [];
		}
	}

	/**
	 *	Get the equals filters defined
	 * @return array Array of $filtername => $value for equals filters
	 * 	$value can either be a scalar or an array
	 */
	public function get_equals_filter($name, $force_array=false)
	{
		$filter = null;
		if (isset($this->filters[$name][vB_Search_Core::OP_EQ]))
		{
			$filter = $this->filters[$name][vB_Search_Core::OP_EQ];
			if ($force_array AND !is_array($filter))
			{
				$filter = [$filter];
			}
		}
		return $filter;
	}

	/**
	 *	Get the equals filters defined
	 * @return array Array of $filtername => $value for equals filters
	 * 	$value can either be a scalar or an array
	 */
	public function get_equals_filters($filterset = 'filters')
	{
		$return = [];
		foreach ($this->$filterset as $field => $field_filters)
		{
			if (isset($field_filters[vB_Search_Core::OP_EQ]))
			{
				$return[$field] = $field_filters[vB_Search_Core::OP_EQ];
			}
		}
		return $return;
	}

	/**
	 *	Get the complex filters defined
	 * @return array Array of $filtername => $value for complex filters
	 * 	$value can either be a scalar or an array, but is likely an array
	 */
	public function get_complex_filters($filterset = 'filters')
	{
		$return = [];
		foreach ($this->$filterset as $field => $field_filters)
		{
			if (isset($field_filters[vB_Search_Core::OP_COMPLEX]))
			{
				$return[$field] = $field_filters[vB_Search_Core::OP_COMPLEX];
			}
		}
		return $return;
	}

	public function has_topic_view_filter()
	{
		return $this->has_view_filter(vB_Api_Search::FILTER_VIEW_TOPIC);
	}

	public function has_view_filter($view)
	{
		$viewFilter = (
			isset($this->filters['view'][vB_Search_Core::OP_EQ]) AND
			($this->filters['view'][vB_Search_Core::OP_EQ] == $view)
		);

		return $viewFilter;
	}

	/*
		Check & return if criteria has one of the basic OP_EQ filters, e.g.
		starter_only
		reply_only
	 */
	public function get_bool_filter_for($filter)
	{
		if (isset($this->filters[$filter][vB_Search_Core::OP_EQ]))
		{
			return $this->filters[$filter][vB_Search_Core::OP_EQ];
		}

		return null;
	}


	/**
	 *	Get the equals filters defined
	 * @return array Array of $filtername => $value for equals filters
	 * 	$value can either be a scalar or an array
	 */
	public function get_GT_filters($filterset = 'filters')
	{
		$return = [];
		foreach ($this->$filterset as $field => $field_filters)
		{
			if (isset($field_filters[vB_Search_Core::OP_GTE]))
			{
				$return[$field] = $field_filters[vB_Search_Core::OP_GTE];
			}
		}
		return $return;
	}


	/**
	 *	Get the equals filters defined
	 *
	 *	@return array Array of $filtername => $value for equals filters
	 * 		$value can either be a scalar or an array
	 */
	public function get_LT_filters($filterset = 'filters')
	{
		$return = [];
		foreach ($this->$filterset as $field => $field_filters)
		{
			if (isset($field_filters[vB_Search_Core::OP_LTE]))
			{
				$return[$field] = $field_filters[vB_Search_Core::OP_LTE];
			}
		}
		return $return;
	}


	/**
	 *	Get the not equals filters defined
	 *
	 * 	@return array Array of $filtername => $value for not equals filters
	 * 		$value can either be a scalar or an array
	 */
	public function get_notequals_filters($filterset = 'filters')
	{
		$return = [];
		foreach ($this->$filterset as $field => $field_filters)
		{
			if (isset($field_filters[vB_Search_Core::OP_NEQ]))
			{
				$return[$field] = $field_filters[vB_Search_Core::OP_NEQ];
			}
		}

		return $return;
	}


	/**
	 *	Get the range filters defined
	 * @return array Array of $filtername => $value for not equals filters
	 * 	$value is [$min, $max].  A null value for $min or $max means
	 * 	no limit in that direction.
	 */
	public function get_range_filters($filterset = 'filters')
	{
		$return = [];
		foreach ($this->$filterset as $field => $field_filters)
		{
			//determine the range, null means unbounded.
			$item = [null, null];
			$is_range_filter = false;
			//GT indicates minimum value
			if (isset($field_filters[vB_Search_Core::OP_GTE]))
			{
				$item[0] = $field_filters[vB_Search_Core::OP_GTE];
				$is_range_filter = true;
			}

			//LT indicates maximum value
			if (isset($field_filters[vB_Search_Core::OP_LTE]))
			{
				$item[1] = $field_filters[vB_Search_Core::OP_LTE];
				$is_range_filter = true;
			}
			if ($is_range_filter)
			{
				$return[$field] = $item;
			}
		}

		return $return;
	}

	/**
	 *	Return the parsed keywords to filter
	 *
	 *	@return array  An array of ["word" => $word, "joiner" => $joiner]
	 * 	where $word is the keyword and $joiner indicates how the word should be
	 *		joined to the query.  $joiner should be one of "AND", "OR", or "NOT"
	 *		with the exception of the first item for which $joiner is NULL.
	 *		It is up to the search implementation to define exactly how to treat
	 *		the words specified.
	 */
	public function get_keywords()
	{
		return $this->keywords;
	}

	/**
	 *	Return the parsed keywords to filter
	 *
	 *	Return the raw query set to the criteria object.  Provided in case
	 * an implementation cannot or does not want to use the words array above.
	 * If the raw query is used then the display string and highlights should
	 * be set by the implementation to better reflect how the query is processed.
	 *
	 *	@return string
	 */
	public function get_raw_keywords()
	{
		return $this->raw_keywords;
	}

	/**
	 * Should the keywords be applied to the title or to both the title and the
	 *	keywords
	 *
	 *	@return boolean
	 */
	public function is_title_only()
	{
		return $this->titleonly;
	}

	public function get_target_userid()
	{
		// This is a hack to support who's online -- previously it attempted to
		// look the target user up based on the entered username (regardless of
		// whether or not it was a partial name which may or may not match any
		// users).  We only store the ids we found.  We'll assume that if we
		// only have a single user that we should count it. We need to check all
		// the possible user "fields" that the criteria can set.

		foreach (['user', 'groupuser', 'defaultuser'] AS $field)
		{
			$value = $this->get_equals_filter($field, true);
			if ($value AND count($value) == 1)
			{
				return $value[0];
			}
		}
		return null;
	}

	//**************************************************************************
	//Misc Public Functions
	public function has_errors()
	{
		return (bool) count($this->errors);
	}

	public function get_errors()
	{
		if (!$this->criteria_set)
		{
			//copy the array and add to the copy to avoid the potential
			//for creating a phantom error because this was called early
			//and then fixed.
			$errors = $this->errors;
			$errors[] = ['more_search_terms'];
			return $errors;
		}
		else
		{
			return $this->errors;
		}
	}

	/**
	*	Add an error in processing.
	*	Intended to be used publically and by the advanced search fields
	*/
	public function add_error(...$error)
	{
		$this->errors[] = $error;
	}

	public function get_sort()
	{
		return $this->sort;
	}

	public function get_sort_direction()
	{
		$dir = reset($this->sort);
		return $dir;
	}

	public function get_sort_field()
	{
		$dir = reset($this->sort);
		$field = key($this->sort);
		return $field;
	}

	//this is *terribly* named. It's only used in conjunction with the "channel" filter
	//(add_channel_filter). Which is also terribly named.  The channel filter is really
	//a "subtree" filter rooted at the given node (which doesn't need to be a channel
	//and frequently isn't). This flag determines if we return the root of the tree or
	//not if it happens to match.
	public function getIncludeStarter()
	{
		return $this->include_starter;
	}

	public function getDepth()
	{
		return $this->depth;
	}

	public function getDepthExact()
	{
		return $this->depth_exact;
	}


	//**************************************************************************
	//Internal Functions

	/**
	 *	Break the keyword search into words
	 * @param string keywords -- keyword string as entered by the user
	 * @return array -- array of word records
	 *  ['word' => $word,  'joiner' => {'', 'NOT', 'AND', 'OR'}]
	 *  The search implementation is expected to use these to build the search
	 *	 query.
	 */
	public function get_words($keywords)
	{
		$is_mb = preg_match('/&#([0-9]+);|[^\x00-\x7F]/siU', $keywords);

		// removing punctuation
		$origKeywords = $keywords;

		// This expression needs some explaining.  The \p{Pd} is for "characters with the unicode property"
		// in this case Px is various punctuation classes.  It's not entirely clear what is being selected
		// for but this strips all of the basic punctionation except ^ (which we strip explicitly).
		//
		// We do this because due to the way we index including these characters almost certainly
		// is going to lead to invalid searches in both db and fulltext search (sphinx search does it's own keyword processing
		// so is not affected by this).  For instance "=keyword" will never match anything because even if that appears
		// verbatim in the text it will be indexed as "keyword" (it's not entirely clear how mysql handles these cases but
		// it appears similar).  Stripping the punctuation will actually match "keyword" which is the better outcome.
		//
		// We also strip mathematical symbols (Sm).  In addition to the fact that many of these are control characters
		// in Full Text search (leading to syntax errors)
		//
		// In theory we want to allow using the plus character in searches (like +keyword1 +keyword2) to mean "keyword1 AND keyword2"
		// But that's the default behavior so we get the same behavior from just stripping it and it simplifies later processing.
		// There are some edge cases such as keyword1 -+keyword2 or keyword1 OR +keyword2 which probably should be flagged
		// as invalid but will be treated like "keyword1 -keyword2" and "keyword1 OR keyword2" respectively .  We may need to revisit that.
		//
		// The first part is an assertion, it means only match if the next section doesn't match the expression
		// but without consuming any of the string.  This is normally used *after* an expression (so we match
		// foo but only if it isn't followed by bar) because the assertion will be checking exactly the same
		// character as the expression that follows it.  In this case, however, it creates an exception to the
		// general punctuation classes because we'll never match when the character after the assertion is in
		// the exception list.
		//
		// The documentation says this is "available when UTF-8 mode is selected" but appears to work
		// regardless.
		$re = '#(?![-"])[\p{Pd}\p{Pe}\p{Pf}\p{Pi}\p{Po}\p{Ps}\p{Sm}^]#' . ($is_mb ? 'u' : '');
		$keywords = preg_replace($re, ' ', $keywords);

		// a tokenizing based approach to building a search query
		$validator = new vB_Search_KeywordValidator();
		preg_match_all('#("[^"]*"|[^\s]+)#', $keywords, $matches, PREG_SET_ORDER);

		$tokens = [];
		foreach ($matches AS $match)
		{
			if ($is_mb)
			{
				$match = preg_replace_callback('/&#([0-9]+);/siU', function($matches)
				{
					return vB_String::convertIntToUtf8($matches[1]);
				}, $match);
			}

			if ($is_mb)
			{
				$token = vB_String::vBStrToLower($match[1]);
			}
			else
			{
				$token = strtolower($match[1]);
			}

			// this means that we implicitly have a not joiner.
			if ($token[0] == '-')
			{
				$token = substr($token, 1);
				$tokens[] = 'not';
			}

			$tokens[] = $token;
		}

		$joiners = [];
		$words = [];
		foreach ($tokens AS $token)
		{
			// Blank and "and" should be interpreted the same by search implementations
			// and traditionally we returned blank due to some removed preprocessing except in
			// some weird edge cases. We'll consistently use blank as consistent with both
			// that previous behavior as well as consistent across cases as we can be.
			if ($token == 'and')
			{
				$joiners[] = '';
			}
			else if ($token == 'not')
			{
				// This is some convoluted attempts to mimic previous behavior.  In some cases we allow multiple
				// joiners and take the last one, in other we trigger the error.  This is due to a previous "sanitation"
				// function that, amoung other things, attempted to "and" joiners and translate not to "-" (which in turn
				// got changed back).  However overall sloppiness meant that a bunch of wierd edge cases resulted because of
				// thing that got missed or translated wierdly (like "not and" becoming "-and").
				//
				// This needs to be cleaned up but right now just trying to avoid changing behavior people are expecting.
				if (in_array('OR', $joiners))
				{
					$this->add_error('invalid_search_syntax');
					return [];
				}

				$joiners[] = strtoupper($token);
			}
			else if ($token == 'or')
			{
				if (in_array('NOT', $joiners))
				{
					$this->add_error('invalid_search_syntax');
					return [];
				}

				$joiners[]= strtoupper($token);
			}
			else
			{
				if ($validator->isIndexable($token))
				{
					$words[] = [
						'word' => $token,
						'joiner' => strtoupper(end($joiners) ?? ''),
					];
				}
				else
				{
					$this->ignored_keywords[] = $match[1];
				}

				$joiners = [];
			}
		}

		// ignore any leading joiners.
		if (isset($words[0]))
		{
			$words[0]['joiner'] = '';
		}
		else
		{
			$this->add_error('searchspecifyterms');
		}

		if (empty($matches) AND !empty($origKeywords))
		{
			$this->ignored_keywords[] = $origKeywords;
		}

		return $words;
	}

	/**
	 * sets the JSON criteria
	 * @param array $JSON
	 * @deprecated use setNormalized
	 */
	public function setJSON(array $JSON)
	{
		$this->normalized = $JSON;
	}

	/**
	 * gets the JSON criteria
	 * @return array
	 * @deprecated use getNormalized
	 */
	public function getJSON()
	{
		return $this->normalized;
	}

	// We should really move the logic from the search API function to this class
	// so we aren't dependant on the caller setting the value for things but that's
	// a chunk of work.
	/**
	 * sets the normalized criteria
	 * @param array $normalized
	 */
	public function setNormalized(array $normalized) : void
	{
		$this->normalized = $normalized;
	}

	/**
	 * gets the normalized criteria
	 * @return array $normalized
	 */
	public function getNormalized() : array
	{
		return $this->normalized;
	}

	/**
	 *	Determine the normalized critera is restrictive enough
	 *
	 *	This depends on the normalized criteria having been set.
	 *
	 *	@param bool $include_keywords -- in some cases the search implemenations need to know if the
	 *		filters are restrictive without considering the keywords.
	 */
	public function isRestrictive(bool $include_keywords = true) : bool
	{
		$normalized_criteria = $this->normalized;

		$restrictive = (
			!empty($normalized_criteria['authorid']) OR
			!empty($normalized_criteria['author']) OR
			!empty($normalized_criteria['private_messages_only']) OR
			!empty($normalized_criteria['visitor_messages_only']) OR
			!empty($normalized_criteria['sentto']) OR
			!empty($normalized_criteria['tag']) OR
			!(empty($normalized_criteria['date']) OR (is_string($normalized_criteria['date']) AND $normalized_criteria['date'] == vB_Api_Search::FILTER_DATEALL)) OR
			!(empty($normalized_criteria['last']) OR (is_string($normalized_criteria['last']) AND $normalized_criteria['last'] == vB_Api_Search::FILTER_DATEALL)) OR
			!empty($normalized_criteria['channel']) OR
			!empty($normalized_criteria['featured']) OR
			!empty($normalized_criteria[vB_Api_Search::FILTER_FOLLOW]) OR
			!empty($normalized_criteria['my_following']) OR
			!empty($normalized_criteria['sticky_only']) OR
			!empty($normalized_criteria['deleted_only']) OR
			!empty($normalized_criteria['unapproved_only']) OR
			!empty($normalized_criteria['unread_only']) OR
			!empty($normalized_criteria['specific']) OR
			!empty($normalized_criteria['prefix']) OR
			!empty($normalized_criteria['has_prefix']) OR
			!empty($normalized_criteria['no_prefix']) OR
			!empty($normalized_criteria['my_channels']) OR
			!empty($normalized_criteria['eventstartdate']) OR
			!empty($normalized_criteria['module_filter_nodes'])
		);

		if ($include_keywords)
		{
			$restrictive = ($restrictive OR !empty($normalized_criteria['keywords']));
		}

		return $restrictive;
	}

	/**
	 * (re)sets the caching flag
	 * @param boolean $flag
	 */
	public function setIgnoreCache($flag)
	{
		$this->ignoreCache = $flag;
	}

	/**
	 * gets the caching flag
	 * @return boolean
	 */
	public function getIgnoreCache()
	{
		if (vB_Api_Search::getCacheTTL() == 0)
		{
			return true;
		}

		return $this->ignoreCache;
	}

	/**
	 * (re)sets the nolimit flag
	 * @param boolean $set
	 */
	public function setNoLimit($set = 1)
	{
		$this->no_limit = $set;
	}

	/**
	 * gets the nolimit flag
	 * @return boolean
	 */
	public function getNoLimit()
	{
		return $this->no_limit;
	}

	public function get_ignored_keywords()
	{
		return $this->ignored_keywords;
	}

	public function setSearchContext($set = "none")
	{
		$this->search_context = (string) $set;
	}

	public function getSearchContext()
	{
		return $this->search_context;
	}

	public function setLimitOffset($set = 0)
	{
		// disallow negative
		$this->limit_offset = max(intval($set), 0);
	}
	public function getLimitOffset()
	{
		return $this->limit_offset;
	}
	public function setLimitCount($set = 0)
	{
		// disallow negative
		$this->limit_count = max(intval($set), 0);
	}
	public function getLimitCount()
	{
		return $this->limit_count;
	}

	public function setDoCount($set = false)
	{
		$this->do_count = (bool) $set;
		// If we're doing a count query, we want to disable the limits
		$this->setNoLimit(1);
		$this->setLimitCount(0);
		$this->getLimitOffset(0);
	}
	public function getDoCount()
	{
		return $this->do_count;
	}

	//filter variables

	//handle keyords/queries as a special case
	private $keywords = [];
	private $raw_keywords = '';
	private $ignored_keywords = [];
	private $titleonly = false;
	private $include_starter = false;
	private $depth = false;
	private $depth_exact = false;
	private $include_sticky = false;

	private $filters = [];
	private $queued_date_filters = [];
	private $date_filter_finalized = false;
	private $has_date_filter = false;

	private $sort = [];
	private $criteria_set = false;

	private $normalized = [];

	private $ignoreCache = false;
	private $post_processors = [];

	//display variables
	private $display_strings = [];
	private $common_words = [];
	private $highlights = [];
	private $search_string;
	private $current_user = 0;
	private $no_limit = 0;

	// topic fetch specific params
	private $search_context = "none";
	private $limit_offset = 0;
	private $limit_count = 0;
	private $do_count = false;

	//errors
	private $errors = [];
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 117770 $
|| #######################################################################
\*=========================================================================*/
