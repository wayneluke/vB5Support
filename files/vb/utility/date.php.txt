<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * @package vBUtility
 */
class vB_Utility_Date
{
	use vB_Utility_Trait_NoSerialize;


	private $alias_strftime_to_date;
	private $convert_date_to_strftime;
	private $convert_strftime_to_date;
	private $alias_strftime;
	private $disallowed_strftime;
	private $disallowed_date;
	private $os_no_support = [];


	/**
	 *	Constructor
	 *
	 *	@param $charset -- the default charset
	 *
	 *	Will throw an exception if the $charset is not an accepted value
	 */
	public function __construct($config = null)
	{
		/*
			date <-> strftime format converter based on :
			https://gist.github.com/mcaskill/02636e5970be1bb22270
			https://andy-carter.com/blog/php-date-formats
			https://www.php.net/manual/en/function.date.php
			https://www.php.net/manual/en/function.strftime.php
		 */


		// We are not going to support these date & strftime formats because they
		// don't have a close enough analog in the other format, don't seem useful
		// enough, or both
		$this->disallowed_date = [
			// --- --- Day --- ---
			// Possibly implementable via callback replacement with
			// (new NumberFormatter($locale, NumberFormatter::ORDINAL))->format(new Date('S', $timestamp));
			'S' => '', // English ordinal suffix for the day of the month, 2 characters	st, nd, rd or th. Works well with j
			// '%j' is very similar, except it's from 001 to 366 and has preceding zeroes. Possibly
			// implementable with a simple callback replacement.
			'z' => '', // The day of the year (starting from 0)	0 through 365
			// --- --- Week --- ---
			'W' => '', // ISO-8601 week number of year, weeks starting on Monday	Example: 42 (the 42nd week in the year)
			// --- --- Month --- ---
			't' => '', // Number of days in the given month	28 through 31
			// --- --- Year --- ---
			'o' => '', // ISO-8601 week-numbering year. This has the same value as Y, except that if the ISO week number (W) belongs to the previous or next year, that year is used instead. (added in PHP 5.1.0)	Examples: 1999 or 2003
			'L' => '', // Whether it's a leap year	1 if it is a leap year, 0 otherwise.
			// --- --- Time --- ---
			'B' => '', // Swatch Internet time	000 through 999
			'u' => '', // Microseconds (added in PHP 5.2.2). Note that date() will always generate 000000 since it takes an integer parameter, whereas DateTime::format() does support microseconds if DateTime was created with microseconds.	Example: 654321
			'v' => '', // Milliseconds (added in PHP 7.0.0). Same note applies as for u.	Example: 654
			// --- --- Timezone --- ---
			'e' => '', // Timezone identifier (added in PHP 5.1.0)	Examples: UTC, GMT, Atlantic/Azores
			'I' => '', // (capital i)	Whether or not the date is in daylight saving time	1 if Daylight Saving Time, 0 otherwise.
			'P' => '', // Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)	Example: +02:00
			'Z' => '', // Timezone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive.	-43200 through 50400

			// --- --- Full Date/Time --- ---
			'c' => '', //	ISO 8601 date (added in PHP 5)	2004-02-12T15:19:21+00:00
			'r' => '', //	» RFC 2822 formatted date	Example: Thu, 21 Dec 2000 16:01:07 +0200
			// strftime() equivalent %s is unreliable at best. Note that vbdate still handles 'U'.
			'U' => '',
		];

		$this->disallowed_strftime = [
			// --- --- Day --- ---
			'%j' => '', // Day of the year, 3 digits with leading zeros	001 to 366
			// --- --- Week --- ---
			'%U' => '', // Week number of the given year, starting with the first Sunday as the first week	13 (for the 13th full week of the year)
			'%V' => '', // ISO-8601:1988 week number of the given year, ... with Monday being the start of the week		Example: 42 (the 42nd week in the year)
			'%W' => '', // A numeric representation of the week of the year, starting with the first Monday as the first week	46 (for the 46th week of the year beginning with a Monday)
			// --- --- Year --- ---
			'%C' => '', // Two digit representation of the century (year divided by 100, truncated to an integer)	19 for the 20th Century
			'%g' => '', // Two digit representation of the year going by ISO-8601:1988 standards (see %V)	Example: 09 for the week of January 6, 2009
			'%G' => '', // Four digit representation of the year going by ISO-8601:1988 standards (see %V)
			// --- --- Time --- ---
			'%X' => '', // Preferred time representation based on locale, without the date	Example: 03:59:16 or 15:59:16
			// --- --- Time and Date Stamps --- ---
			'%c' => '', // Preferred date and time stamp based on locale	Example: Tue Feb 5 00:45:10 2009 for February 5, 2009 at 12:45:10 AM
			'%x' => '', // Preferred date representation based on locale, without the time	Example: 02/05/09 for February 5, 2009
			//Full Date/Time	---	---
			'%s' => '', // Unix Epoch Time timestamp (same as the time() function)	Example: 305815200 for September 10, 1979 08:40:00 AM
		];

		// Conversion maps. Most are fairly straight forward, a few have
		// minor differences (e.g. strftime() single digits tend to be
		// prepended by a space), some are greatly different depending
		// on locale set (e.g. textual months for strftime())
		$this->convert_date_to_strftime = [
			//Day	---	---
			'd' => '%d', //	Day of the month, 2 digits with leading zeros	01 to 31
			'D' => '%a', //	A textual representation of a day, three letters	Mon through Sun
			// Note, stftime has a preceding space for single digits
			'j' => '%e', //	Day of the month without leading zeros	1 to 31
			'l' => '%A', // (lowercase 'L')	A full textual representation of the day of the week	Sunday through Saturday
			'N' => '%u', //ISO-8601 numeric representation of the day of the week (added in PHP 5.1.0)	1 (for Monday) through 7 (for Sunday)
			'w' => '%w', //	Numeric representation of the day of the week	0 (for Sunday) through 6 (for Saturday)

			//Month	---	---
			// Note, stftime() output based on locale (e.g. février instead of February for French)
			'F' => '%B', //	A full textual representation of a month, such as January or March	January through December
			'm' => '%m', //	Numeric representation of a month, with leading zeros	01 through 12
			// Note, strftime() output has leading zeros. This is a "close enough" conversion
			'n' => '%m', //	Numeric representation of a month, without leading zeros	1 through 12
			// Note, stftime() output based on locale (e.g. févr. instead of Feb for French)
			// Also note, Windows default locales seem to struggle with diacriticals, e.g. "fvr" instead
			// and on Linux, it's not always three letters, e.g. using fr_FR.utf8 locale, it returns
			// "janv.", "févr.", "déc." for Jan, Feb, Dec
			'M' => '%b', //	A short textual representation of a month, three letters	Jan through Dec

			//Year	---	---
			'Y' => '%Y', //	A full numeric representation of a year, 4 digits	Examples: 1999 or 2003
			'y' => '%y', //	A two digit representation of a year	Examples: 99 or 03

			//Time	---	---
			// %P support dependent on OS
			'a' => '%P', //	Lowercase Ante meridiem and Post meridiem	am or pm
			'A' => '%p', //	Uppercase Ante meridiem and Post meridiem	AM or PM
			// Note, strftime() output has a preceding space for single digits
			'g' => '%l', //	12-hour format of an hour without leading zeros	1 through 12
			'G' => '%k', //	24-hour format of an hour without leading zeros	0 through 23
			'h' => '%I', //	12-hour format of an hour with leading zeros	01 through 12
			'H' => '%H', //	24-hour format of an hour with leading zeros	00 through 23
			'i' => '%M', //	Minutes with leading zeros	00 to 59
			's' => '%S', //	Seconds with leading zeros	00 through 59

			//Timezone	---	---
			'O' => '%z', //	Difference to Greenwich time (GMT) without colon between hours and minutes	Example: +0200
			'T' => '%Z', //	Timezone abbreviation	Examples: EST, MDT ...
		];

		// This is fairly close to just a array_flip of above.
		// Some additions are for aliases, things that are "close enough" etc.
		$this->convert_strftime_to_date = [
			//Day	---	---
			'%d' => 'd', //	Two-digit day of the month (with leading zeros)	01 to 31
			'%a' => 'D', //	An abbreviated textual representation of the day	Sun through Sat
			// Note, date() output lacks a preceding space for single digits
			'%e' => 'j', //	Day of the month, with a space preceding single digits.	1 to 31
			'%A' => 'l', // A full textual representation of the day	Sunday through Saturday
			'%u' => 'N', // ISO-8601 numeric representation of the day of the week	1 (for Monday) through 7 (for Sunday)
			'%w' => 'w', //	Numeric representation of the day of the week	0 (for Sunday) through 6 (for Saturday)

			//Month	---	---
			// Note, stftime() output based on locale (e.g. février instead of February for French)
			'%B' => 'F', //	Full month name, based on the locale	January through December
			'%m' => 'm', //	Two digit representation of the month	01 (for January) through 12 (for December)
			// Note, stftime() output is NOT necessarily 3 letters, depending on locale
			'%b' => 'M', //	Abbreviated month name, based on the locale		Jan through Dec

			//Year	---	---
			'%Y' => 'Y', //	Four digit representation for the year	Example: 2038
			'%y' => 'y', //	Two digit representation of the year	Example: 09 for 2009, 79 for 1979

			//Time	---	---
			// %P support dependent on OS
			'%P' => 'a', //	lower-case 'am' or 'pm' based on the given time	Example: am for 00:31, pm for 22:23
			'%p' => 'A', //	UPPER-CASE 'AM' or 'PM' based on the given time	Example: AM for 00:31, PM for 22:23
			// Note, date(G|g) output lacks a preceding space for single digits
			'%l' => 'g', //	(lower-case L) Hour in 12-hour format, with a space preceding single digits		1 through 12
			'%k' => 'G', //	Hour in 24-hour format, with a space preceding single digits	0 through 23
			'%I' => 'h', //	Two digit representation of the hour in 12-hour format	01 through 12
			'%H' => 'H', //	Two digit representation of the hour in 24-hour format	00 through 23
			'%M' => 'i', //	Two digit representation of the minute	00 through 59
			'%S' => 's', //	Two digit representation of the second	00 through 59

			//Timezone	---	---
			'%z' => 'O', //	The time zone offset. Not implemented as described on Windows.	Example: -0500 for US Eastern Time
			'%Z' => 'T', //	The time zone abbreviation. Not implemented as described on Windows. 	Example: EST for Eastern Time

			// Others. May drop support for these if they cause problems
			'%n' => "\n", // A newline character ("\n")
			'%t' => "\t", // A Tab character ("\t")
			'%%' => "%", // A literal percentage character ("%")
		];


		// A few stftime formats are aliases. We can handle these by replacing them with
		// the canonical formats first, then doing the strftime -> date replacements
		// Note, in handleIncompatibleFormats() we also use this for handling rare
		// Windows replacements for certain strftime() format(s)
		$this->alias_strftime = [
			'%h' => '%b',          // Abbreviated month name, based on the locale (an alias of %b)	Jan through Dec
			'%r' => '%I:%M:%S %p', // Same as "%I:%M:%S %p" Example: 09:34:17 PM for 21:34:17
			'%R' => '%H:%M',       // Same as "%H:%M"       Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
			'%T' => '%H:%M:%S',    // Same as "%H:%M:%S"    Example: 21:34:17 for 09:34:17 PM
			'%D' => '%m/%d/%y',    // Same as "%m/%d/%y"    Example: 02/05/09 for February 5, 2009
			'%F' => '%Y-%m-%d',    // Same as "%Y-%m-%d" (commonly used in database datestamps)	Example: 2009-02-05 for February 5, 2009
		];

		$this->alias_strftime_to_date = [
			'%h' => 'M',           // Abbreviated month name, based on the locale (an alias of %b)	Jan through Dec
			'%r' => 'h:i:s A',     // Same as "%I:%M:%S %p"  Example: 09:34:17 PM for 21:34:17
			'%R' => 'H:i',         // Same as "%H:%M"        Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
			'%T' => 'H:i:s',       // Same as "%H:%M:%S"     Example: 21:34:17 for 09:34:17 PM
			'%D' => 'm/d/y',       // Same as "%m/%d/%y"     Example: 02/05/09 for February 5, 2009
			'%F' => 'Y-m-d',       // Same as "%Y-%m-%d" (commonly used in database datestamps)	Example: 2009-02-05 for February 5, 2009
		];


		$this->handleIncompatibleFormats($config);
	}

	/**
	 * Handle any unsupported strftime() formats by adding an alias
	 * for those with valid replacements and "blanking out" those
	 * without via $this->os_no_support
	 *
	 * @access private
	 */
	private function handleIncompatibleFormats($config = null)
	{
		// $config in signature is unused currently, but I wanted to
		// plan ahead for if/when we wanted to possibly override
		// this default list
		$isWindows = (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN');
		if ($isWindows)
		{
			/*
			There's a lot of weird funky things going on with strftime() & windows.
			There are also other weirdness with other OSes like Sun Solaris & macOS, but
			I don't have a way to test those atm.

			When these formats break, they consume the entire output rather than just the
			specific unsupported format, E.g. if format = "%I %P" and output = "06 PM"
			normally, but %P is not supported on the current OS, output = (bool) false
			instead of "06 ". As such we can't just ignore them and get at least a part
			of the output which may (or may not) be useful to the end user.

			Quotes below are from https://www.php.net/manual/en/function.strftime.php
			*/

			/*
			"The %e modifier is not supported in the Windows implementation of this function.
			To achieve this value, the %#d modifier can be used instead"

			Add an alias for %e to %#d so it'll automatically switch, then override the
			j => %e mapping and add a %#d => j mapping. We can leave alone the %e => j
			mapping alone for now, as it shouldn't really break anything.
			 */
			$this->alias_strftime['%e'] = '%#d';
			$this->alias_strftime_to_date['%e'] = 'j';
			$this->convert_date_to_strftime['j'] = '%#d';
			$this->convert_strftime_to_date['%#d'] = 'j';

			/*
			"The %z and %Z modifiers both return the time zone name instead of the offset
			or abbreviation."
			 */
			// TODO: This isn't really "broken", just not exactly the same. Should we
			// keep this instead of disallowing it?
			$this->os_no_support[] = '%Z';
			// Note, in my testing, %z works on Windows (properly returns timezone
			// offset) in contrast to the warning above.
			// Edit: on further testing, %z does NOT work reliable for non-Los_Angeles
			// timezones. E.g. Helsink: -0700 instead of +0300, UTC: -0800, etc.
			$this->os_no_support[] = '%z';

			// The following were not flagged for Windows in the PHP documentation but
			// they did not work in my testing:
			// -- similar -- a | %p
			$this->os_no_support[] = '%P';
			// -- similar -- g | %I
			$this->os_no_support[] = '%l';
			// -- similar -- G | %H
			$this->os_no_support[] = '%k';

			/*
				Note:
				We use this format (%s | U, for time()) often in our
				templates, so we currently have some logic in
				template_runtime::vbdate() to allow vbdate('U'|'%s')
				to still function.
				Edit: Found out that strftime('%s') is bugged in linux too,
				so disabling it entirely. vbdate() still supports it (but
				forces date()|gmdate())
				This is still here because regardless of if we support
				it or not, it does not work on windows and we want to notate
				it for testing & diagnostics.
			 */
			$this->os_no_support[] = '%s';
		}

		// Stick them into disallowed as a convenient way to "blank" them during
		// date to strftime conversion.
		foreach ($this->os_no_support AS $__strftime)
		{
			$this->disallowed_strftime[$__strftime] = '';
		}
	}


	public function getOsNoSupport()
	{
		// Useful for debugging / diagnostics
		$strftime = $this->os_no_support;
		$date = array_map(
			function($val) {
				return strtr($val, $this->convert_strftime_to_date);
			},
			$this->os_no_support
		);

		return ['strftime' => $strftime, 'date' => $date,];
	}

	/**
	 *	Convert a format string for use by for $datefunc (date|strftime).
	 *
	 *	@param string $datefunc	 Which date function will receive our output,
	 *                           e.g. date|gmdate|strftime|gmstrftime
	 *	@param string $format
	 *
	 *	@retun string -- strftime() or date() format string
	 */
	public function convertFormat($datefunc, $format, $force = false)
	{
		/*
			Assume that if % exists in the format string, it's in strftime format.
			This is mainly to avoid issues of accidentally "double converting"
			into strftime format (e.g. convertFormat('strftime', '%H') : '%%H')
		 */
		$assumeStrftimeFormat = (strpos($format, '%') !== false);
		if (stripos($datefunc, 'strftime') !== false)
		{
			if (!$assumeStrftimeFormat)
			{
				$format = $this->convertToStrftime($format);
			}
			else
			{
				// Staying consistent with our aliasing & disallowed stripping
				// even when we don't convert
				$format = strtr($format, $this->alias_strftime);
				$format = strtr($format, $this->disallowed_strftime);
			}
		}
		else
		{
			if ($assumeStrftimeFormat)
			{
				$format = $this->convertToDate($format);
			}
			else
			{
				$format = strtr($format, $this->disallowed_date);
			}
		}

		return $format;
	}

	/**
	 *	Convert a date() format string to strftime() format string.
	 *
	 *	@param string $format
	 *
	 *	@retun string -- strftime() format string
	 */
	public function convertToStrftime($format)
	{
		/*
		 1) Remove any disabled date-formats
		 2) Convert date to strftime formats
		 3) Replace any aliases in strftime-format
			- mainly to get the %e => %#d Windows trick to work
		 4) Replace any disallowed strftime-formats
			- mainly only utilized on Windows servers
			- this is because if any unsupported formats are requested,
			the entire strftime() call often fails and returns false,
			so I think just masking out the problematic formats is better.
		 */
		$format = strtr($format, $this->disallowed_date);
		$format = strtr($format, $this->convert_date_to_strftime);
		$format = strtr($format, $this->alias_strftime);
		$format = strtr($format, $this->disallowed_strftime);

		return $format;
	}

	/**
	 *	Convert a strftime() format string to date() format string.
	 *
	 *	@param string $format
	 *
	 *	@retun string -- date() format string
	 */
	public function convertToDate($format)
	{
		/*
		 Almost a reverse of convertToStrftime(), except we
		 replace aliases first just in case.
		 0) Date-escape any literal characters not part fo strftime-format
		 1) Replace any aliases in strftime-format
		 2) Replace any disallowed strftime-formats
		 3) Convert strftime to date formats
		 4) Remove any disabled date-formats

		 Note on (2) & (4)
		 We could potentially skip the disallowed check here,
		 since the output will likely go through date() which
		 is not known to have issues with OS-dependencies, so
		 the output will work.
		 For now, I'm leaving this check in for consistency
		 & simpler testing but we should review this...
		 */
		// Date-escape any alphabet character NOT preceded by %, as that's supposed to be a
		// literal character NOT formatting. However, we need to handle cases like %%s which
		// means literal "%s" in strftime format.
		$regex = '#(?<prefix>(?<!%)(?:%%)*)(?<lit>[A-Za-z])#';
		$format = preg_replace_callback($regex, function($matches) {
			$converted = $matches['prefix'] . '\\' . $matches['lit'];
			return $converted;
		}, $format);

		$regex = '#%[A-Za-z%]#';
		$format = preg_replace_callback($regex, function($matches) {
			$format = $matches[0];
			$converted = $this->alias_strftime_to_date[$format] ??
						$this->disallowed_strftime[$format] ??
						$this->convert_strftime_to_date[$format] ??
						$format;
			$converted = $this->disallowed_date[$converted] ?? $converted;
			return $converted;
		}, $format);


		return $format;
	}

	// These are mainly diagnostic functions used for development & debugging, atm.
	public function autoFunc($format, $timestamp = null)
	{
		if (strpos($format, '%') !== false)
		{
			$targetfunc = 'date';
		}
		else
		{
			$targetfunc = 'strftime';
		}

		$format = $this->convertFormat($targetfunc, $format);

		return $targetfunc($format, $timestamp);
	}

	public function checkDisallowed($format, $timestamp = null)
	{
		if (strpos($format, '%') !== false)
		{
			$check1 = $this->disallowed_strftime;
			$check2 = $this->disallowed_date;
			$convert = $this->convert_strftime_to_date;
			$func1 = 'gmstrftime';
			$func2 = 'gmdate';

		}
		else
		{
			$check1 = $this->disallowed_date;
			$check2 = $this->disallowed_strftime;
			$convert = $this->convert_date_to_strftime;
			$func1 = 'gmdate';
			$func2 = 'gmstrftime';

		}
		foreach ($check1 AS $__format => $__blank)
		{
			$check1[$__format] = '<span class="h-warning">' . $__format . '</span>';
		}
		foreach ($check2 AS $__format => $__blank)
		{
			$check2[$__format] = '<span class="h-warning">' . $__format . '</span>';
		}

		$format1Warnings = strtr($format, $check1);

		// Check if conversion lands on any of target disalloweds
		$format2 = strtr($format, $convert);
		$format2Warnings = strtr($format2, $check2);

		return [
			'source' => $format1Warnings,
			'source_label' => "$func1('$format1Warnings', $timestamp)",
			'source_output' => $func1($format, $timestamp),
			'converted' => $format2Warnings,
			'converted_label' => "$func2('$format2Warnings', $timestamp)",
			'converted_output' => $func2($format2, $timestamp),
		];
	}

	//these php function are deprecated but there do not appear to be any direct replacements
	//so we're going to need to stick with them until we figure out what we are going to do about it.
	public function strftime(string $format, ?int $timestamp = null)
	{
		return vB_Utility_Functions::callSupressError(E_DEPRECATED, 'strftime', $format, $timestamp);
	}

	public function gmstrftime(string $format, ?int $timestamp = null)
	{
		return vB_Utility_Functions::callSupressError(E_DEPRECATED, 'gmstrftime', $format, $timestamp);
	}

	public function spitDoc($html = false)
	{
		// This function is used internally only for generating documentation.
		// May remove in the near future.
		$doc = [
			'Day', '---', '---',
			'%d', 'Two-digit day of the month (with leading zeros)', '01 to 31',
			'%a', 'An abbreviated textual representation of the day, depending on locale.', 'Sun through Sat',
			'%e', 'Day of the month, with a space preceding single digits.', '1 to 31',
			'%A', 'A full textual representation of the day, depending on locale.', 'Sunday through Saturday (English) dimanche through samedi (French)',
			'%u', 'ISO-8601 numeric representation of the day of the week', '1 (for Monday) through 7 (for Sunday)',
			'%w', 'Numeric representation of the day of the week', '0 (for Sunday) through 6 (for Saturday)',

			'Month', '---', '---',
			// Note, stftime() output based on locale (e.g. février instead of February for French)
			'%B', 'Full month name, based on the locale', 'January through December',
			'%m', 'Two digit representation of the month', '01 (for January) through 12 (for December)',
			// Note, stftime() output is NOT necessarily 3 letters, depending on locale
			'%b', 'Abbreviated month name, based on the locale', 'Jan through Dec',

			'Year', '---', '---',
			'%Y', 'Four digit representation for the year', '2038',
			'%y', 'Two digit representation of the year', '09 for 2009, 79 for 1979',

			'Time', '---', '---',
			// %P support dependent on OS
			'%P', 'lower-case \'am\' or \'pm\' based on the given time', 'am for 00:31, pm for 22:23',
			'%p', 'UPPER-CASE \'AM\' or \'PM\' based on the given time', 'AM for 00:31, PM for 22:23',
			// Note, date(G|g) output lacks a preceding space for single digits
			'%l', '(lower-case L) Hour in 12-hour format, with a space preceding single digits', ' 1 through 12',
			'%k', 'Hour in 24-hour format, with a space preceding single digits', ' 0 through 23',
			'%I', 'Two digit representation of the hour in 12-hour format', '01 through 12',
			'%H', 'Two digit representation of the hour in 24-hour format', '00 through 23',
			'%M', 'Two digit representation of the minute', '00 through 59',
			'%S', 'Two digit representation of the second', '00 through 59',

			'Timezone', '---', '---',
			'%z', 'The time zone offset. Not implemented as described on Windows.', '-0500 for US Eastern Time',
			'%Z', 'The time zone abbreviation. Not implemented as described on Windows.', 'EST for Eastern Time',

			'Misc', '---', '---',
			'%n', 'A newline character ("\n")', "\n",
			'%t', 'A Tab character ("\t")', "\t",
			'%%', 'A literal percentage character ("%")', "%",

			'Following formats may not function properly on Windows servers. See above for their description.', '---', '---',
			'%Z', '(UPPER-CASE Z)', '',
			'%z', '(lower-case z)', '',
			'%P', '(UPPER-CASE P)', '',
			'%l', '(lower-case L)', '',
			'%k', '(lower-case k)', ''
		];

		$return = [];
		// Woops, accidentally formatted as a buffer instead of nested array. No big.
		$blocksize = 3;
		$len = count($doc) / $blocksize;
		$nested = [];
		for ($x = 0; $x < $len; $x++)
		{
			$block = [];
			for ($y = 0; $y < $blocksize; $y++)
			{
				$block[] = $doc[$x * $blocksize + $y];
			}
			$nested[] = $block;
		}

		if (!$html)
		{
			return $nested;
		}

		foreach ($nested AS [$format, $description, $example])
		{
			if ($description == '---' AND $example = '---')
			{
				$format = "<b>$format</b>";
			}
			$return[] = "<tr>\n" .
					"\t<td>\n\t\t$format\n\t</td>\n" .
					"\t<td>\n\t\t$description\n\t</td>\n" .
					"\t<td>\n\t\t$example\n\t</td>\n" .
				"</tr>";
		}

		$html = <<<EOHTML
<table>
<thead>
	<tr>
		<td>
			Format
		</td>
		<td>
			Description
		</td>
		<td>
			Example
		</td>
	</tr>
</thead>
EOHTML;
		$html .=	implode("\n", $return)
				. "\n</table>";
		return $html;
	}
}


/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 103236 $
|| #######################################################################
\*=========================================================================*/
