<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * @package vBUtility
 */
class vB_Utility_Template_ParserNode_Tag_If extends vB_Utility_Template_ParserNode_Tag
{
	public function validate() : array
	{
		$errors = [];
		if (trim($this->main_node->attributes['condition'] ?? '') === '')
		{
			$errors[] = ['empty_if_condition'];
		}
		else
		{
			$errors = $this->validateCondition($this->main_node->attributes['condition']);
		}

		return $errors;
	}

	public function compile() : string
	{
		$conditions = [];
		$current = [
			'condition' => $this->main_node->attributes['condition'] ?? '',
			'value' => '',
		];

		foreach ($this->main_node->childNodes() AS $key => $node)
		{
			// these tags don't have values of their own (and so don't have proper parsing) but affect
			// how we process the parent if tag so check them.
			if ($node->type == 'tag' AND in_array($node->value, ['elseif', 'else']))
			{
				$conditions[] = $current;
				$current = [
					'condition' => null,
					'value' => '',
				];

				if ($node->value == 'elseif')
				{
					$current['condition'] = $node->attributes['condition'] ?? '';
				}
			}
			// otherwise treat as normal input and compile accordingly.
			else
			{
				$current['value'] .= (self::createNode($node)->compile()) . ' . ';
			}
		}

		$conditions[] = $current;

		$blocks = [];
		$elseblock = null;
		foreach ($conditions AS $condition)
		{
			$block = '';
			$ifheader = '';
			if (!is_null($condition['condition']))
			{
				$expression = $condition['condition'];
				if (!$this->parser->getOption('strictconditionals'))
				{
					$expression = $this->replace_template_variables($expression, true);
				}

				$ifheader = 'if (' . $expression . ') ';
			}

			$block = $ifheader . '{' .
				"\n\t" . $this->parser->outputVar . " .= " . $condition['value'] . "'';" . "\n" .
			'}';

			// we can't depend on the else block being last so force it to the end.
			// can't think of a better way to do this.
			if (!is_null($condition['condition']))
			{
				$blocks[] = $block;
			}
			else
			{
				$elseblock = $block;
			}
		}

		if ($elseblock)
		{
			$blocks[] = $elseblock;
		}

		return "'';\n" . implode(' else ', $blocks) . $this->parser->outputVar . " .= ''";
	}

	//the replacement logic here is very deprecated and off by default.
	/**
	* Replaces legacy variable names in templates with their modern equivalents
	*
	* @param	string	Template to be processed
	* @param	boolean	Handle replacement of vars outside of quotes
	*
	* @return	string
	*/
	private function replace_template_variables($template, $do_outside_regex = false)
	{
		// matches references to specifc arrays in templates and maps them to a better internal format
		// this function name is a slight misnomer; it can be run on phrases with variables in them too!

		// include the $, but escape it in the key
		static $variables = [
			'\$vboptions'  => 'vB::getDatastore()->getOption',
			'\$bbuserinfo' => 'vB::getCurrentSession()->fetch_userinfo_value',
			'\$session'    => 'vB::getCurrentSession()->getAllVars()',
			'\$stylevar'   => 'vB_Template_Runtime::fetchStyleVar',
		];

		// regexes to do the replacements; __FINDVAR__ and __REPLACEVAR__ are replaced before execution
		static $basic_find = [
			'#\' \. __FINDVAR__\[(\'|)(\w+)\\1\] \. \'#',
			'#\{__FINDVAR__\[(\\\\?\'|"|)([\w$[\]]+)\\1\]\}#',
			'#__FINDVAR__\[\$(\w+)\]#',
			'#__FINDVAR__\[(\w+)\]#',
		];

		static $basic_replace1 = [
			'\' . __REPLACEVAR__[$1$2$1] . \'',
			'" . __REPLACEVAR__[$1$2$1] . "',
			'" . __REPLACEVAR__[$$1] . "',
			'" . __REPLACEVAR__[\'$1\'] . "',
		];

		static $basic_replace2 = [
			'\' . __REPLACEVAR__($1$2$1) . \'',
			'" . __REPLACEVAR__($1$2$1) . "',
			'" . __REPLACEVAR__($$1) . "',
			'" . __REPLACEVAR__(\'$1\') . "',
		];

		foreach ($variables AS $findvar => $replacevar)
		{
			if ($do_outside_regex)
			{
				// this is handles replacing of vars outside of quotes
				do
				{
					$new_template = preg_replace_callback(
						[
							'#^([^"]*?("(?>(?>(\\\\{2})+?)|\\\\"|[^"])*"([^"]*?))*)' . $findvar . '\[(\\\\?\'|"|)([\w$[\]]+)\\5\]#sU',
							'#^([^"]*?("(?>(?>(\\\\{2})+?)|\\\\"|[^"])*"([^"]*?))*)' . $findvar . '([^[]|$)#sU',
						],
						function($matches) use($replacevar, $findvar) {return $this->replace_replacevar($matches, $replacevar, $findvar);},
						$template
					);
					if ($new_template == $template)
					{
						break;
					}
					$template = $new_template;
				}
				while (true);
			}

			if ($replacevar[0] == '$')
			{
				$basic_replace = &$basic_replace1;
			}
			else
			{
				$basic_replace = &$basic_replace2;
			}

			// these regular expressions handle replacement of vars inside quotes
			$this_find = str_replace('__FINDVAR__', $findvar, $basic_find);
			$this_replace = str_replace('__REPLACEVAR__', $replacevar, $basic_replace);

			$template = preg_replace($this_find, $this_replace, $template);
		}

		// straight replacements - for example $scriptpath becomes $GLOBALS['vbulletin']->scriptpath
		$template = str_replace('$scriptpath', '" . vB::getRequest()->getScriptPath() . "', $template);
		return $template;
	}

	private function replace_replacevar($matches, $replacevar, $findvar)
	{
		if ($replacevar[0] == '$')
		{
			if (count($matches) == 6)
			{
				return $matches[1] . $replacevar . $matches[5];
			}
			else
			{
				return $matches[1] . $replacevar . '[' . $matches[5] . $matches[6] . $matches[5] . ']';
			}
		}
		else
		{
			if (count($matches) == 6 AND $findvar == '\$stylevar')
			{
				// This doesn't really work since $stylevar doesn't exist .. but it stops a parse error
				return $matches[1] . '$stylevar' . $matches[5];
			}
			if (!$matches[5])
			{
				$matches[5] = "'";
			}
			return $matches[1] . $replacevar . '(' . $matches[5] . $matches[6] . $matches[5] . ')';
		}
	}
}
/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 115380 $
|| #######################################################################
\*=========================================================================*/
