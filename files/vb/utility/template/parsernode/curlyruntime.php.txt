<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * @package vBUtility
 */
// These sorts of interstitial base classes don't play nice with our naming schemes. We want to bunch a lot of
// very common code where but this should properly by vB_Utility_Template_ParserNode_Curly_Runtime and it's
// children vB_Utility_Template_ParserNode_Curly_Runtime_XXX but that
// a) Exposes a great deal of implementation details literally in the filesystem (what if we change the implementation
// 	so it's no longer just a runtime function.
// b) We really want the the classname to be standardized to vB_Utility_Template_ParserNode_Curly_{curlyname} so we
// 	can trivially map template markup to node classes.
// So we'll put it here and live withe the weirdness.  (Here rather than the subdirectory to keep a seperation between
// parent classes and child classes).
//
// We should move the basics of the parameter count validation to the curly base class.  The compile logic
// isn't enough to justify an additional class layer and can be moved to the child classes allowing us to
// remove this class.
abstract class vB_Utility_Template_ParserNode_CurlyRuntime extends vB_Utility_Template_ParserNode_Curly
{
	protected static string $function = '';
	protected static string $noparamerror = 'no_variable_specified';
	protected static int $maxparams = PHP_INT_MAX;

	public function validate() : array
	{
		$errors = [];

		$attributecount = sizeof($this->main_node->attributes);

		//currently all of the passthrough functions require a parameter.
		if ($attributecount == 0)
		{
			$errors[] = static::$noparamerror;
		}

		//currently all of the passthrough functions return the same error for this check
		if ($attributecount > static::$maxparams)
		{
			$errors[] = 'too_many_attributes';
		}

		return $errors;
	}

	public function compile() : string
	{
		return 'vB_Template_Runtime::' . static::$function . '(' . $this->getArgumentsFromAttributes() . ')';
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 115380 $
|| #######################################################################
\*=========================================================================*/
