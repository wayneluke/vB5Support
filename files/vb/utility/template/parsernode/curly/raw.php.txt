<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * @package vBUtility
 */
class vB_Utility_Template_ParserNode_Curly_Raw extends vB_Utility_Template_ParserNode_Curly
{
	public function validate() : array
	{
		$errors = [];

		$attributecount = sizeof($this->main_node->attributes);

		if ($attributecount == 0)
		{
			$errors[] = ['no_variable_specified'];
		}
		else
		{
			$attribute = $this->main_node->attributes[0];

			// if this isn't a string the remaining checks aren't going to work and it's not clear what
			// a curly would even mean here (we don't want the equivilant to PHP's $$var here because that's
			// good way to allow all kinds of wierd exploits.  The previous logic just took the first param of
			// a curly and treated it as a varname until we actually hit a string to use.  That wasn't used
			// anywhere and doesn't add anything
			if (is_string($attribute))
			{
				//"(" isn't a valid php identifier character nor anything that we should be adding
				//for our template markup.  All it can do is cause a php function call which we don't want.
				if (strpos($attribute, '(') !== false)
				{
					throw new vB_Utility_Template_Parser_FatalError('template_text_not_safe');
				}

				//this doesn't do what we thought it does.  It looks like it matches against something of the form
				//x.y.z according to php identifier rules.  However, since it isn't anchored it will match anything that
				//has a substring that fits the pattern, which is nearly anything with an alpha character.
				//
				//Unfortunately tightening the match causes existing templates to fail validation -- including some things
				//that actually work.  Leaving this as is doesn't make anything worse so we'll need to handle this another
				//time
				else if (!preg_match('#\$?([a-z_][a-z0-9_]*)(\.([a-z0-9_]+|\$([a-z_][a-z0-9_]*))+)*#i', $attribute))
				{
					$errors[] = ['invalid_variable_name'];
				}
			}
			else
			{
				$errors[] = ['invalid_variable_name'];
			}
		}

		return $errors;
	}

	public function compile() : string
	{
		// We can compile without going through validation so make sure we generate
		// clean and safe code here even when don't have good attributes.
		// It doesn't have to work.
		if (is_string($this->main_node->attributes[0]))
		{
			$output = $this->compileVar($this->main_node->attributes[0]);
			if (!$this->main_node->refParam)
			{
				$output = '(' . $output . " ?? null)";
			}
		}
		else
		{
			$output = "''";
		}

		return $output;
	}
}
/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 115380 $
|| #######################################################################
\*=========================================================================*/
