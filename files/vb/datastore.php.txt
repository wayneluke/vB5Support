<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * Class for fetching and initializing the vBulletin datastore from the database
 *
 * @package	vBulletin
 */
class vB_Datastore
{
	use vB_Trait_NoSerialize;

	const BITFIELDS_TITLE = 'bitfields';
	const BITFIELDS_PREFIX = 'bf_';

	/**
	 * Default items that are always loaded by fetch();
	 *
	 * @var	array
	 */
	protected $defaultitems = [
		'bitfields',
		'attachmentcache',
		'usergroupcache',
		'stylecache',
		'languagecache',
		'products',
		'cron',
		'profilefield',
		'loadcache',
		'miscoptions',
		'noticecache',
		'hooks',
		'publicoptions',
		'prefixcache',
		'vBUgChannelPermissionsFrom',
		'vBChannelTypes',
		'locations',
	];

	/**
	 * Unique prefix for item's title, required for multiple forums on the same server using the same classes that read/write to memory
	 *
	 * @var	string
	 */
	protected $prefix = '';
	/**
	 * Whether we have verified that options were loaded correctly.
	 *
	 * @var bool
	 */
	protected $checked_options;
	/**
	 * Contains the config variables loaded from the config file
	 * @var array
	 */
	protected $config;
	/**
	 * Contains the assertor object
	 *
	 * @var vB_dB_Assertor
	 */
	protected $db_assertor;

	/*
	 * This variable contains the titles that need to be fetched
	 *
	 * @var array
	 */
	protected $pending = [];
	/**
	 * All of the entries that have already been fetched
	 *
	 * @var array string
	 */
	protected $registered = [];

	protected $registeredBitfields = false;

	protected $noValues = [];

	public function __construct(&$config, &$db_assertor)
	{
		$this->config = & $config;

		if (empty($db_assertor))
		{
			$this->db_assertor = vB::getDbAssertor();
		}
		else
		{
			$this->db_assertor = & $db_assertor;
		}

		$this->prefix = & $this->config['Datastore']['prefix'];

		if (defined('SKIP_DEFAULTDATASTORE'))
		{
			$this->defaultitems = ['options', 'bitfields'];
		}
	}

	/**
	 * Resets datastore cache
	 */
	public function resetCache()
	{
		// nothing to do here
	}

	/**
	 * Set an array of items that should be preloaded. These will not be loaded immediately
	 * but will be fetched on the first call to getValue.
	 *
	 * @param array $titles
	 */
	public function preload($titles)
	{
		if (!empty($titles))
		{
			foreach ($titles as $title)
			{
				if (strpos($title, self::BITFIELDS_PREFIX) !== false)
				{
					$title = self::BITFIELDS_TITLE;
				}

				if (!in_array($title, $this->pending))
				{
					$this->pending[] = $title;
				}
			}
		}
	}


	/**
	 * @deprecated
	 */
	public function get_value($title)
	{
		return $this->getValue($title);
	}

	public function registerCount()
	{
		return count($this->registered);
	}

	public function getValue($title)
	{
		if (isset($this->registered[$title]))
		{
			return $this->registered[$title];
		}
		else if (isset($this->noValues[$title]))
		{
			return null;
		}
		else
		{
			$this->preload([$title]);

			if ($this->fetch($this->pending) AND isset($this->registered[$title]))
			{
				return $this->registered[$title];
			}
			else
			{
				return null;
			}
		}
	}

	public function getOption($name)
	{
		$options = $this->getValue('options');
		if (!isset($options[$name]))
		{
			return null;
		}
		return $options[$name];
	}

	public function setOption($name, $value, $save = true)
	{
		$setting = $this->db_assertor->getRow('setting', ['varname' => $name]);
		if (is_null($setting))
		{
			return;
		}

		// This assumes that any "username" (or other name => id mapping types added later) options
		// have already been mapped to ids.  I'm not sure that is the best assumption but preserving existing behavior
		$settingobj = vB_Options_Option::createFromArray($setting);
		$valid_value = $settingobj->forceTypeStoredValue($value);

		//avoid warnings in the upgrader where we may not have the ispublic flag yet.
		$public = !empty($setting['ispublic']);

		//If styleid changes we need to clear fastDS'd templates.
		if (($name == 'styleid') AND ($fastDS = vB_FastDS::instance()))
		{
			$fastDS->setDsChanged('styleid');
		}

		$options = $this->getValue('options');
		$options[$name] = $valid_value;
		$this->registered['options'] = $options;

		// if this is a public option, we need to update the 'publicoptions' datastore item too
		if ($public)
		{
			$publicoptions = $this->getValue('publicoptions');
			$publicoptions[$name] = $valid_value;
			$this->registered['publicoptions'] = $publicoptions;
		}

		if ($valid_value != $setting['value'])
		{
			if ($save)
			{
				$this->db_assertor->update('setting', ['value' => $valid_value], ['varname' => $name]);
				$this->build('options', serialize($options), 1);
				if ($public)
				{
					$this->build('publicoptions', serialize($publicoptions), 1);
				}
			}
		}
	}

	/**
	 * This method is intended only for unit testing. Do NOT use it in other context.
	 * @param string $title
	 * @param mixed value
	 */
	public function setValue($title, $value)
	{
		if (!defined('VB_UNITTEST'))
		{
			throw new Exception('This method should be called only from unit tests');
		}
		else
		{
			$this->registered[$title] = $value;
		}
	}

	/**
	 * This method is intended only for unit testing. Do NOT use it in other context.
	 * Clear all the cache class vars, useful to calculate every value again.
	 */
	public function clearValues()
	{
		if (!defined('VB_UNITTEST'))
		{
			throw new Exception('This method should be called only from unit tests');
		}
		else
		{
			$this->registeredBitfields = false;
			$this->checked_options = false;
			$this->registered = [];
			$this->pending = [];
			$this->noValues = [];
		}
	}

	/**
	 * Save a value to the datastore.
	 *
	 * @param string $title
	 * @param string $data
	 * @param int $unserialize
	 * @param bool $storelocal -- if we should keep a local copy in memory
	 * 	as if this item had been loaded.  This prevents the mass rebuilding of
	 * 	large datastore items from overloading the available memory.
	 * @return void
	 */
	public function build($title = '', $data = '', $unserialize = 0, $storelocal = true)
	{
		if (empty($title))
		{
			return;
		}

		$assertor = vB::getDbAssertor();
		$assertor->assertQuery('updateDatastore', [
			'title' => $title,
			'data' => $data,
			'unserialize' => $unserialize,
		]);

		if ($storelocal)
		{
			// if we're building the bitfields, force re-registering.
			if ($title == self::BITFIELDS_TITLE)
			{
				$this->registeredBitfields = false;
			}
			$this->register($title, $data, $unserialize);
		}
		else
		{
			//if we've already loaded this we should clear the value so that
			//if we *do* load it we get the correct value instead of the stale one
			unset($this->registered[$title]);
			unset($this->noValues[$title]);
		}

		//the options may have changed.  So do this, even if we've already done it.
		$this->fix_options();

		//We want to force a fastDS rebuild, but we can't just call rebuild. There may be dual web servers,
		// and calling rebuild only rebuilds one of them.
		if ($fastDS = vB_FastDS::instance())
		{
			$fastDS->setDsChanged($title);
		}
	}

	/**
	 * Cover for build that hides the serialization details.
	 *
	 * Previously we had the caller serialize the data and set the unserialize to indicate they did that
	 * but it's better to ensure this stays in sync.
	 *
	 * @param string $title
	 * @param mixed $data
	 * @param bool $storelocal
	 * @return void
	 */
	public function buildSerialized(string $title, mixed $data, bool $storelocal = true) : void
	{
		// It might even better to detect if data is a non scalar type and serialize/not based on that
		// Which would allow us to have one build function and completely hide the details but that is
		// more complicated (doubly so for managing existing calls to build).
		$this->build($title, serialize($data), 1, $storelocal);
	}

	/**
	 *	Delete a datastore entry
	 *
	 *	@param $title datastore entry to delete
	 *	@return void
	 */
	public function delete($title)
	{
		$db = vB::getDbAssertor();
		$db->delete('datastore', ['title' => $title]);
		unset($this->registered[$title]);
		$this->noValues[$title] = $title;
	}


	/**
	 *	Get the list of all datastore keys
	 *
	 *	@return array -- string array of titles of the datastore keys stored.
	 */
	public function getKeys()
	{
		$assertor = vB::getDbAssertor();
		$keys = $assertor->getColumn('datastore', 'title');
		return $keys;
	}

	/**
	 * Temporary function to manage initializing the legacy registry from the datastore
	 *
	 * @deprecated
	 */
	// todo: remove this and the next function when all references to vbulletin settings are replaced
	public function init_registry()
	{
		// Currently, css templates rendered via css.php is not getting vboptions.simpleoptions
		// while using $vbulletin->options .
		// That is because for that particular flow, we call init_registry() BEFORE options are
		// loaded, so check_options()/fix_options() isn't called.
		// In fact, it seems like if the first datastore->getValue() call is not the options,
		// this will happen because ds->register() will call vB::getRegistry() which in turn calls
		// ds->init_registry() which is here. Note that I haven't actually ensured that if the
		// options is the first getValue() that guarantees anything -- I'm just assuming from
		// reviewing the code lightly.
		// We cannot add a check_options() call here because 1) options may not be loaded yet and
		// 2) check_options() MAY call ds->register() and ds->build_options (which call trickle
		// down to another ds->register() call), and it's unclear what will happen if that loop
		// occurs during our first init_registry() call where we DON'T have the $vbulletin registry yet.

		// I think what we need to do is forcibly ensure the options load, and tie fix_options() strongly
		// to registering options (& public options and misc options), but there's some code in
		// check_options() that 1) locks itself and 2) tries to rebuild options if stuff is missing
		// (which does not seem to always work, e.g. if options are NOT loaded yet, not sure why) and
		// it's unclear whether we can safely remove those or not.

		// In short, do NOT rely on $vbulletin->options if pseudo-options are important (and even if not)
		// and either use the datastore directly, or go through the options API (which uses the datastore
		// directly).

		$registry = &vB::get_registry();
		foreach ($this->registered AS $name => $data)
		{
			$this->update_registry($registry, $name, $data);
		}
	}

	protected function update_registry(&$registry, $title, $data)
	{
		if (!$registry)
		{
			return;
		}

		if ($title == self::BITFIELDS_TITLE)
		{
			//We should copy the logic for other properties of not setting the registry object if the
			//member we're trying to set doesn't exist. But that's going to require making sure we
			//aren't *using* any of the values that aren't set. For now skip values that we know aren't used via the registry.
			//These are mostly old datastore items that show up in the upgrade because of old data
			$skip = [
				'bf_misc_announcementoptions',
				'bf_misc_socnet',
				'bf_ugp_calendarpermissions',
				'bf_ugp_vbblog_general_permissions',
				'bf_ugp_vbblog_entry_permissions',
				'bf_ugp_vbblog_comment_permissions',
				'bf_misc_vbbloggrouppermissions',
				'bf_misc_vbblogmoderatorpermissions',
				'bf_misc_vbblogoptions',
				'bf_misc_vbbloguseroptions',
				'bf_misc_vbblogsocnetoptions',
				'bf_misc_vbblogregoptions',
				'bf_misc_vbblogblockoptions',
				'bf_misc_navstate',
			];

			foreach (array_keys($data) AS $group)
			{
				$registry->{self::BITFIELDS_PREFIX . $group} = & $data[$group];
				$group_prefix = self::BITFIELDS_PREFIX . $group . '_';
				$group_info = & $data[$group];
				foreach (array_keys($group_info) AS $subgroup)
				{
					$bfkey = $group_prefix . $subgroup;

					//If we have the key in the registry or it's not in the skip list then set it
					//(it shouldn't be in the skip list if it's in the registry but this lets us just
					//remove the "skip" logic when we are sure that all keys used exist in the registry
					if (property_exists($registry, $bfkey) OR !in_array($bfkey, $skip))
					{
						$registry->$bfkey = &$group_info[$subgroup];
					}
				}
			}
		}
		//The data check here is dubious.  It means we won't write an int value if, for instance, it's 0
		//It appears that the original intent was to not set a false value if we fail to read the memcache key
		//However since this is legacy code that we're managing out and there is no obvious problem just
		//going to quietly leave it alone.
		else if (property_exists($registry, $title) AND !empty($title) AND !empty($data))
		{
			//If we already have an array value and the data is an array then concatenate the arrays
			//I'm not sure why we do this, we should only load a title one and it should always be the
			//same data.
			if (isset($registry->$title) AND is_array($registry->$title) AND is_array($data))
			{
				$registry->$title = ($data + $registry->$title);
			}
			else
			{
				$registry->$title = $data;
			}
		}
	}

	/**
	 * Sorts the data returned from the cache and places it into appropriate places
	 *
	 * @param	string	The name of the data item to be processed
	 * @param	mixed	The data associated with the title
	 * @param	integer	If the data needs to be unserialized, 0 = no, 1 = yes, 2 = auto detect
	 *
	 * @return	boolean
	 */
	protected function register($title, $data, $unserialize_detect = 2)
	{
		// This was causing a bug where a newly added bitfield wasn't available after calling vB_Bitfield_Builder::save();
		// There might be other related bugs this is causing, but for now, I've bypassed this issue by clearing the
		// $this->registeredBitfields property in build(). Look for right before where build() calls register()
		if ($this->registeredBitfields AND ($title == self::BITFIELDS_TITLE))
		{
			return true;
		}

		// specifies whether or not $data should be an array
		$try_unserialize = false;
		if ($unserialize_detect == 2 AND !is_array($data) AND strlen($data) >= 2)
		{
			if ($data[0] == 'a' AND $data[1] == ':')
			{
				$try_unserialize = true;
			}
		}

		if ($try_unserialize OR $unserialize_detect == 1)
		{
			// unserialize returned an error so return false
			if (($data = @unserialize($data)) === false)
			{
				return false;
			}
		}

		if ($title == self::BITFIELDS_TITLE)
		{
			foreach (array_keys($data) AS $group)
			{
				$this->registered[self::BITFIELDS_PREFIX . $group] = & $data["$group"];

				$group_prefix = self::BITFIELDS_PREFIX . $group . '_';
				$group_info = & $data["$group"];

				foreach (array_keys($group_info) AS $subgroup)
				{
					$this->registered[$group_prefix . $subgroup] = & $group_info["$subgroup"];
				}
			}
			$this->registeredBitfields = true;
		}
		else if (!empty($title))
		{
			$this->registered[$title] = $data;
		}

		if (!empty($title))
		{
			unset($this->noValues[$title]);
		}

		//remove when the registry object is removed from the code.
		$this->update_registry(vB::get_registry(), $title, $data);
		return true;
	}

	/**
	 * Prepares a list of items for fetching.
	 * Items that are already fetched are skipped.
	 *
	 * @param array string $items - Array of item titles that are required
	 * @return array string - An array of items that need to be fetched
	 */
	protected function prepare_itemarray($items)
	{
		if ($items)
		{
			if (is_array($items))
			{
				$itemarray = $items;
			}
			else
			{
				$itemarray = explode(',', $items);

				foreach ($itemarray AS &$title)
				{
					$title = trim($title);
				}
			}
			// Include default items
			$itemarray = array_unique(array_merge($itemarray, $this->defaultitems));
		}
		else
		{
			$itemarray = $this->defaultitems;
		}

		// Remove anything that is already loaded
		//if we've already loaded the bitfields, don't do it again.
		if ($this->registeredBitfields)
		{
			$itemarray = array_diff($itemarray, array_keys($this->registered), array_keys($this->noValues), [self::BITFIELDS_TITLE]);
		}
		else
		{
			$itemarray = array_diff($itemarray, array_keys($this->registered), array_keys($this->noValues));
		}
		return $itemarray;
	}

	/**
	 * Prepares an array of items into a list.
	 * The result is a comma delimited, db escaped, quoted list for use in SQL.
	 *
	 * @param array string $items				- An array of item titles
	 * @param bool $prepare_items				- Wether to check the items first
	 *
	 * @return string							- A sql safe comma delimited list
	 */
	protected function prepare_itemlist($items, $prepare_items = false)
	{
		if (is_string($items) OR $prepare_items)
		{
			$items = $this->prepare_itemarray($items);
		}

		if (!sizeof($items))
		{
			return false;
		}

		return $items;
	}

	/**
	 * Fetches the contents of the datastore from the database
	 *
	 * @param	array	Array of items to fetch from the datastore
	 *
	 * @return	boolean
	 */
	public function fetch($items)
	{
		if ($items = $this->prepare_itemlist($items, true))
		{
			$this->fastDSFetch($items);

			if (empty($items))
			{
				return true;
			}
			$result = $this->do_db_fetch($items);
			if (!$result)
			{
				return false;
			}
		}

		$this->check_options();

		return true;
	}

	/**
	 * Tries to get values from fastDS, if available. Done this way to make interitance of fetch() easier.
	 */
	protected function fastDSFetch(&$items)
	{
		$fastDS = vB_FastDS::instance();

		if ($fastDS)
		{
			$cached = $fastDS->getDS($items);
			if (!empty($cached))
			{
				foreach ($items as $key => $item)
				{
					if (isset($cached[$item]))
					{
						$this->register($item, $cached[$item], false);
						unset($items[$key]);
					}
				}
			}
		}
	}

	/**
	 * Performs the actual fetching of the datastore items for the database, child classes may use this
	 *
	 * @param	string	title of the datastore item
	 *
	 * @return	bool	Valid Query?
	 */
	protected function do_db_fetch($itemlist)
	{
		$this->db_assertor->hide_errors();
		$result = $this->db_assertor->assertQuery('datastore', ['title' => $itemlist]);
		$this->db_assertor->show_errors();

		foreach ($result AS $dataitem)
		{
			$this->register($dataitem['title'], $dataitem['data'], $dataitem['unserialize'] ?? 2);
			//remove this value.
			$key = array_search($dataitem['title'], $itemlist);
			if ($key !== false)
			{
				unset($itemlist[$key]);
			}
		}

		//Whatever is left we don't have in the database. No reason to query in the future;
		if (!empty($itemlist))
		{
			foreach ($itemlist AS $item)
			{
				$this->noValues[$item] = $item;
			}
		}
		return true;
	}

	/**
	 * Checks that the options item has come out of the datastore correctly
	 * and sets the 'versionnumber' variable
	 */
	protected function check_options($force = false)
	{
		if (!$force AND $this->checked_options)
		{
			return;
		}

		if (!isset($this->registered['options']['templateversion']))
		{
			// fatal error - options not loaded correctly
			$this->register('options', $this->build_options(), 0);
		}

		$this->fix_options();
		$this->checked_options = true;
	}

	//this fixes some values in the options that might damage the site if misset.
	//it also creates some simplified option values based on
	private function fix_options()
	{
		//this is the session length.  Bad things happen if this is too short.
		if (isset($this->registered['options']['cookietimeout']) AND $this->registered['options']['cookietimeout'] < 60)
		{
			$this->registered['options']['cookietimeout'] = 60;
		}

		//set the pseduo options

		// set the short version number
		if (isset($this->registered['options']) && is_array($this->registered['options']) && !isset($this->registered['options']['simpleversion']))
		{
			$this->registered['options']['simpleversion'] = SIMPLE_VERSION . (isset($this->config['Misc']['jsver']) ? $this->config['Misc']['jsver'] : '');
		}

		if (isset($this->registered['publicoptions']) && is_array($this->registered['publicoptions']) && !isset($this->registered['publicoptions']['simpleversion']))
		{
			$this->registered['publicoptions']['simpleversion'] = SIMPLE_VERSION . (isset($this->config['Misc']['jsver']) ? $this->config['Misc']['jsver'] : '');
		}

		// set facebook active / inactive
		foreach (['options', 'publicoptions'] AS $key)
		{
			if (isset($this->registered[$key]) AND is_array($this->registered[$key]) AND !isset($this->registered[$key]['facebookactive']))
			{
				// if facebook is enabled and the appid & secret are set, then facebook is activated
				// always pull the facebook secret from the "options" array, since it is not public
				$this->registered[$key]['facebookactive'] = (
					//during upgrade these aren't always defined, so code so that they make sense
					!empty($this->registered[$key]['enablefacebookconnect']) AND
					!empty($this->registered[$key]['facebookappid']) AND
					!empty($this->registered['options']['facebooksecret'])
				);
			}
		}
	}


	/**
	 * Reads settings from the settings then saves the values to the datastore
	 *
	 * After reading the contents of the setting table, the function will rebuild the options array, then serialize
	 * the array and save that serialized array into the 'options' entry of the datastore in the database
	 *
	 * @return array
	 */
	public function build_options()
	{
		$options = [];
		$publicoptions = [];

		$products = $this->getValue('products');

		$result = $this->db_assertor->assertQuery('setting', []);
		foreach ($result AS $setting)
		{
			$product = $setting['product'];
			if (strcasecmp($product, 'vbulletin') == 0 OR $product == '' OR !empty($products[$product]))
			{
				// It's not clear why this is necesary.  According to the comments it's to makes sure
				// the options are "of the right type".  The only thing that makes sense is that we
				// end up storing the values all as strings so ints won't be integers etc when we
				// load things.
				//
				// This is annoying because we have to be careful to avoid issues where (like the
				// username => userid the forceType does) the operations aren't repeatable.
				$settingobj = vB_Options_Option::createFromArray($setting);
				$options[$setting['varname']] = $settingobj->forceTypeStoredValue($setting['value']);

				//we sometimes call this from the installer prior to the ispublic flag being added.
				if (!empty($setting['ispublic']))
				{
					$publicoptions[$setting['varname']] = $options[$setting['varname']];
				}
			}

		}

		if (!$options)
		{
			return $options;
		}

		if (isset($options['cookiepath']) AND substr($options['cookiepath'], -1, 1) != '/')
		{
			$options['cookiepath'] .= '/';
			$this->db_assertor->assertQuery('setting', [
				vB_dB_Query::TYPE_KEY =>  vB_dB_Query::QUERY_UPDATE,
				'varname' => 'cookiepath',
				'value' => $options['cookiepath']
			]);
		}

		$this->build('options', serialize($options), 1);
		$this->registered['options'] = $options;

		// Build public options
/*
		$publicoptions = [];
		foreach ($result AS $setting)
		{
			//we sometimes call this from the installer prior to the ispublic flag being added.
			if (!empty($setting['ispublic']))
			{
				$publicoptions[$setting['varname']] = $options[$setting['varname']];
			}
		}
 */

		$this->build('publicoptions', serialize($publicoptions), 1);
		$this->registered['publicoptions'] = $publicoptions;

		$miscoptions = $this->getValue('miscoptions');
		$miscoptions['optionsdate'] = vB::getRequest()->getTimeNow();
		$this->build('miscoptions', serialize($miscoptions), 1);

		//We want to force a fastDS rebuild, but we can't just call rebuild. There may be dual web servers,
		// and calling rebuild only rebuilds one of them.
		if ($fastDS = vB_FastDS::instance())
		{
			$fastDS->setDsChanged('options');
		}

		return $options;
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 117300 $
|| #######################################################################
\*=========================================================================*/
