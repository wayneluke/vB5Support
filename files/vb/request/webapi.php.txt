<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

class vB_Request_WebApi extends vB_Request_Web
{
	public function __construct()
	{
		parent::__construct();

		$this->sessionClass = 'vB_Session_WebApi';
	}

	public function createSession(...$args)
	{
		parent::createSession(...$args);

		return [
			'sessionhash' => $this->session->get('sessionhash'),
			'remembermetoken' => $this->session->getRememberMeToken()
		];
	}

	/**
	 *	Creates a session object and attach it to the request.  May reuse an existing session in the database.
	 *
	 *	@param string $sessionhash -- the token given to the client for session handling.  If the client has this token they
	 *		can use the session.
	 *	@param array $restoreSessionInfo -- Information to handle "remember me" logic.
	 *		* remembermetoken -- Token value for "remember me".  Stored in the "password" cookie for legacy reasons.  There are
	 *			so special values to indicate that we should reauthentic via a method other than the internal vB remember me
	 *			system.
	 *		* userid -- user we are remembering
	 *		* fbsr_{appid} (optional) -- Only valid if facebook is enabled, and only used if "remembermetoken" is "facebook".
	 *
	 *		@return array
	 *		* sessionhash -- the session hash for the session created.  This may be different from the passed sessionhash if that
	 *				session was expired or otherwise unusable.
	 *		* remembermetoken -- token for remembering the user.  This should only be set if the user requests it (or if the
	 *				there is already a token present but the token changed).  It is possible for this to change and if it
	 *				does and is not passed back to the client future attempts to "remember" the session (using the old value) will fail.
	 */
	public function createSessionNew($sessionhash, $restoreSessionInfo)
	{
		$deferRememberMe = true;
		$session = vB_Session_WebApi::createSessionNew($sessionhash, $restoreSessionInfo, $deferRememberMe);
		$this->setSession($session);

		// Before we hand it off to products for session overriding, we want to have our
		// session in a "stable" state in case the hook handling needs to call API functions.
		// Above will guarantee that we have a vB Session, though userid/guest state is not
		// guaranteed (depends on sessionhash & cookie lifetime)
		$doRememberMe = true;
		vB::getHooks()->invoke('hookWebApiAfterCreateSessionNew', [
			'userid'     => $session->get('userid') ?? 0,
			'session'    => &$session,
			'restoreSessionInfo' => &$restoreSessionInfo,
			'doRememberMe' => &$doRememberMe,
		]);

		// We could check if this is a different instance before setting it but I don't think
		// the savings is worth the complexity.
		if (is_a($session, 'vB_Session_WebApi'))
		{
			/*
			ATM we're relying on the hook to delete the old session if they replaced it.
			For the most part, most session switching code will do a courtesy delete already,
			and often times a guest session will be subsumed into a user session on login, in
			which case we do not want to delete that session.
			Do we need to keep track of the old session and do a delete here just to make sure?
			 */
			$this->setSession($session);
		}

		if ($doRememberMe)
		{
			$this->session->doRememberMe($restoreSessionInfo);
		}

		// Update privacy consent etc.
		$this->session->finalize();

		return [
			'sessionhash' => $this->session->get('sessionhash'),
			'remembermetoken' => $this->session->getRememberMeToken(),
		];
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 115152 $
|| #######################################################################
\*=========================================================================*/
