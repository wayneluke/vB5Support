<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

class vB_Request_Web extends vB_Request
{

	/*
	 *	The cookie salt constant is deprecated and has been left in place
	 *	only to support existing plugins that might use it.  It should not
	 *	be used in core vb code and plugin developers should change their
	 *	code to use the static variable instead.  This value will be removed
	 *	from a future version of vB  *CODE WHICH USES THE
	 *	CONSTANT IS NOT COMPATIBLE WITH vBCloud*
	 */
	const COOKIE_SALT = "OmrGuEyxxgTOo4oXhwI6C6GR47iqYgwwn";

	public static $COOKIE_SALT = "OmrGuEyxxgTOo4oXhwI6C6GR47iqYgwwn";
	protected $vBUrlScheme = 'http';
	protected $vBUrlPath;
	protected $vBUrlQuery;
	protected $vBUrlQueryRaw;
	protected $vBUrlClean;
	protected $vBUrlWebroot;
	protected $vBUrlBasePath;
	protected $vBHttpHost;
	protected $scriptPath;
	protected ?string $vBUrlPrevious = null;

	public function __construct()
	{
		parent::__construct();

		$this->resolveRequestUrl();

		// TODO: how should we determine this?
		if (!defined('LOCATION_BYPASS'))
		{
			define('LOCATION_BYPASS', 1);
		}

		$this->sessionClass = 'vB_Session_Web';
	}

	/**
	 * Overrides the default cookie salt. Required for vB Cloud.
	 * @param 	string 	$salt
	 */
	public static function setCookieSalt($salt)
	{
		self::$COOKIE_SALT = $salt;
	}

	public function getVbHttpHost()
	{
		return $this->vBHttpHost;
	}

	public function getVbUrlScheme()
	{
		return $this->vBUrlScheme;
	}

	public function getVbUrlPath()
	{
		return $this->vBUrlPath;
	}

	public function getVbUrlQuery()
	{
		return $this->vBUrlQuery;
	}

	public function getVbUrlQueryRaw()
	{
		return $this->vBUrlQueryRaw;
	}

	// This goes through some logic to deal with problematic urls but is no longer
	// html escaped (this was causing a bunch of double escape issues).
	public function getVbUrlClean()
	{
		return $this->vBUrlClean;
	}

	public function getVbUrlWebroot()
	{
		return $this->vBUrlWebroot;
	}

	public function getVbUrlBasePath()
	{
		return $this->vBUrlBasePath;
	}

	public function getScriptPath()
	{
		return $this->scriptPath;
	}

	/**
	 * Gets the url of the requesting page.
	 *
	 * By default this is the REFERRER url but this can be explicitly set by setting the
	 * 'url' parameter in the GET/POST
	*
	*
	* @return	string
	 */
	// Ported from class_core input.  Not sure we should be using this but better to have it here than
	// buried in legacy code.  At least this way it's easier to track who's calling it and we can only
	// generate it if we need it.
	//
	// Note that this is typically used to redirect back to the original page after taking some kind of
	// generic action (such as logging in/showing an error/etc).  The better approach is to handle the
	// action via an AJAX request and then reload the page if necesary because the state has changed.
	//
	// This prevents having to track the page context server side through and validating that the state
	// information from the client isn't completely spoofed.
	public function getRequestingUrl() : string
	{
		if (is_null($this->vBUrlPrevious))
		{
			//note regarding the default url if not set or inappropriate.
			//started out as index.php then moved to options['forumhome'] . '.php' when that option was added.
			//now we've changed to to the forumhome url since there is now quite a bit of logic around that.
			//Its not clear, however, with the expansion of vb if that's the most appropriate generic landing
			//place (perhaps it *should* be index.php).
			//In any case there are several places in the code that check for the default page url and change it
			//to something more appropriate.  If the default url changes, so do those checks.
			//The solution is, most likely, to make some note when vbulletin->url is the default so it can be overridden
			//without worrying about what the exact text is.

			$refurl = $_SERVER['HTTP_REFERER'] ?? '';
			$requesturl = $_REQUEST['url'] ?? '';

			$url = $_REQUEST['url'] ?? '';
			if (!$url)
			{
				$url = $_SERVER['HTTP_REFERER'] ?? '';
			}

			// The script path check is probably dubious because we aren't canonlicalizing the urls so we
			// may have the same url but not matching strings.  In particular the script path excludes the
			// scheme portion.  It's not clear *why* we need this check either.
			if (empty($url) OR $url == $this->getScriptPath())
			{
				//don't die just because we can't generate the home url we might not even use it or otherwise care.
				try
				{
					$url = vB5_Route::buildHomeUrl('fullurl');
				}
				catch (Exception $e)
				{
					$url = '';
				}
			}

			// don't html escape this url, it causes more problems than it solves.
			$this->vBUrlPrevious = vB::getCleaner()->xssClean($url, false);
		}

		return $this->vBUrlPrevious;
	}

	/**
	 * Resolves information about the request URL.
	 *
	 * Extracted from class vB_Input_Cleaner
	 */
	// Several constants were removed as they were not referenced in the code. If needed, add a class property
	// todo: remove constants from legacy code
	protected function resolveRequestUrl()
	{
		// Ports which will not be appended to the URL
		$ignore_ports = array(80, 443);
		$config = vB::getConfig();
		$backend_ports = @$config['Misc']['backendports'];
		if (!empty($backend_ports))
		{
			$ignore_ports = array_merge($ignore_ports, $backend_ports);
		}

		// Numerical port this request came from, may be a backend port
		$rawport = 80;

		// Will contain the port portion of the built URL, default empty
		$port = '';

		if (!empty($_SERVER['SERVER_PORT']))
		{
			$rawport = intval($_SERVER['SERVER_PORT']);
			$port = in_array($rawport, $ignore_ports) ? '' : ':' . $rawport;
		}

		// resolve the request scheme
		$isHttps = (($rawport == 443) OR (!empty($_SERVER['HTTPS']) AND ($_SERVER['HTTPS'] !== 'off')));
		$scheme =  $isHttps ? 'https://' : 'http://';

		$host = $this->fetchServerValue('HTTP_HOST');
		$name = $this->fetchServerValue('SERVER_NAME');

		// If host exists use it, otherwise fallback to servername.
		$host = ( !empty($host) ? $host : $name );

		// resolve the query
		$query = ($query = $this->fetchServerValue('QUERY_STRING')) ? '?' . $query : '';

		// resolve the path and query
		if (!($scriptpath = $this->fetchServerValue('REQUEST_URI')))
		{
			if (!($scriptpath = $this->fetchServerValue('UNENCODED_URL')))
			{
				$scriptpath = $this->fetchServerValue('HTTP_X_REWRITE_URL');
			}
		}

		if ($scriptpath)
		{
			// already have the query
			if ($scriptpath)
			{
				$query = '';
			}
		}
		else
		{
			// server hasn't provided a URI, try to resolve one
			if (!$scriptpath = $this->fetchServerValue('PATH_INFO'))
			{
				if (!$scriptpath = $this->fetchServerValue('REDIRECT_URL'))
				{
					if (!($scriptpath = $this->fetchServerValue('URL')))
					{
						if (!($scriptpath = $this->fetchServerValue('PHP_SELF')))
						{
							$scriptpath = $this->fetchServerValue('SCRIPT_NAME');
						}
					}
				}
			}
		}

		// build the URL
		$url = $scheme . $host . '/' . ltrim($scriptpath, '/\\') . $query;

		// store a literal version
		$vbUrl = $url;
		if (!defined('VB_URL'))
		{
			define('VB_URL', $vbUrl);
		}

		$vbUrlRelativePath = '';

		// Set URL info
		$url_info = @vB_String::parseUrl($vbUrl);
		$url_info['path'] = '/' . ltrim($url_info['path'], '/\\');
		$url_info['query_raw'] = (isset($url_info['query']) ? $url_info['query'] : '');
		$url_info['query'] = self::stripSessionhash($url_info['query_raw']);
		$url_info['query'] = trim($url_info['query'], '?&') ? $url_info['query'] : '';

		$url_info['scheme'] = substr($scheme, 0, strlen($scheme)-3);

		/*
			values seen in the wild:

			CGI+suexec:
			SCRIPT_NAME: /vb4/admincp/index.php
			ORIG_SCRIPT_NAME: /cgi-sys/php53-fcgi-starter.fcgi

			CGI #1:
			SCRIPT_NAME: /index.php
			ORIG_SCRIPT_NAME: /search/foo

			CGI #2:
			SCRIPT_NAME: /index.php/search/foo
			ORIG_SCRIPT_NAME: /index.php

		*/

		if (substr(PHP_SAPI, -3) == 'cgi' AND !empty($_SERVER['ORIG_SCRIPT_NAME']))
		{
			if (substr($_SERVER['SCRIPT_NAME'], 0, strlen($_SERVER['ORIG_SCRIPT_NAME'])) == $_SERVER['ORIG_SCRIPT_NAME'])
			{
				// cgi #2 above
				$url_info['script'] = $_SERVER['ORIG_SCRIPT_NAME'];
			}
			else
			{
				// cgi #1 and CGI+suexec above
				$url_info['script'] = $_SERVER['SCRIPT_NAME'];
			}
		}
		else
		{
			$url_info['script'] = (!empty($_SERVER['ORIG_SCRIPT_NAME']) ? $_SERVER['ORIG_SCRIPT_NAME'] : $_SERVER['SCRIPT_NAME']);
		}
		$url_info['script'] = '/' . ltrim($url_info['script'], '/\\');


		// define constants
		$this->vBUrlScheme = $url_info['scheme'];

		$vBUrlScriptPath = rtrim(dirname($url_info['script']), '/\\') . '/';

		$this->vBUrlPath = urldecode($url_info['path']);
		if (!defined('VB_URL_PATH'))
		{
			define('VB_URL_PATH',        $this->vBUrlPath);
		}

		$this->vBUrlQuery = $url_info['query'] ? $url_info['query'] : '';
		if (!defined('VB_URL_QUERY'))
		{
			define('VB_URL_QUERY',       $this->vBUrlQuery);
		}

		$this->vBUrlQueryRaw = $url_info['query_raw'];
		if (!defined('VB_URL_QUERY_RAW'))
		{
			define('VB_URL_QUERY_RAW',   $this->vBUrlQueryRaw);
		}

		$cleaner = vB::getCleaner();

		// Don't html escape the url.  We should be doing it when we inject it into html.  Otherwise we have to somehow skip doing it
		// we we inject it into the html and we have a lot of functions that automatically escape urls when building the page which makes
		// avoiding double encoding hard (not to mention that we may use this in emails or headers which shouldn't be html escaped).
		$this->vBUrlClean = $cleaner->xssClean(self::stripSessionhash($vbUrl), false);
		$this->vBUrlWebroot = $cleaner->xssClean($this->vBUrlScheme . '://' . $url_info['host'] . $port);
		$this->vBUrlBasePath = $cleaner->xssClean($this->vBUrlScheme . '://' . $url_info['host'] . $port . $vBUrlScriptPath . $vbUrlRelativePath);

		if (!defined('VB_URL_BASE_PATH'))
		{
			define('VB_URL_BASE_PATH',   $this->vBUrlBasePath);
		}

		$this->scriptPath = $cleaner->xssClean($this->addQuery($this->vBUrlPath));

		// legacy constants
		if (!defined('SCRIPT'))
		{
			define('SCRIPT', $_SERVER['SCRIPT_NAME']);
		}

		if (!defined('SCRIPTPATH'))
		{
			define('SCRIPTPATH', $this->scriptPath);
		}

		if (!empty($url_info) AND !empty($url_info['host']))
		{
			$this->vBHttpHost = $url_info['host'];
			if (!defined('VB_HTTP_HOST'))
			{
				define('VB_HTTP_HOST', $this->vBHttpHost);
			}
		}
	}

	/**
	* Strips out the s=gobbledygook& rubbish from URLs
	* Extracted from vB_Input_Cleaner
	*
	* @param	string	The URL string from which to remove the session stuff
	*
	* @return	string
	*/
	// This probably isn't needed any longer.  We don't add the session hash to urls even when the vestigal function/variable for it
	// is appended -- the session query string is always blank.
	private static function stripSessionhash($string)
	{
		return preg_replace('/(s|sessionhash)=[a-z0-9]{32}?&?/', '', $string);
	}

	/**
	 * Adds a query string to a path, fixing the query characters.
	 *
	 * @param 	string		The path to add the query to
	 * @param 	string		The query string to add to the path
	 *
	 * @return	string		The resulting string
	 */
	private function addQuery($path, $query = false)
	{
		if (false === $query)
		{
			$query = $this->vBUrlQuery;
		}

		if (!$query OR !($query = trim($query, '?&')))
		{
			return $path;
		}

		return $path . '?' . $query;
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 116975 $
|| #######################################################################
\*=========================================================================*/
