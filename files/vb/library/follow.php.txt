<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Library_Cron
 */
class vB_Library_Follow extends vB_Library
{
	//some internal cache variables.  We should really investigate if we need this much caching.
	private $userListCache = [];
	private $subscriptions = [];
	private $userFollowing = [];
	private $userFollowers = [];
	private $followers = [];

	/**
	 * This gets the following parameters- not the content
	 *
	 * @param	int		option userid
	 * @return array of content, user, member. Each is an array of integers.
	 */
	public function getFollowingParameters($userid)
	{
		$result = [
			'content' => [],
			'user' => [],
			'member' => [],
		];

		if ($userid < 1)
		{
			return $result;
		}

		$hashKey = "flwParams_$userid";
		$cacheResult = vB_Cache::instance(vB_Cache::CACHE_FAST)->read($hashKey);
		if ($cacheResult)
		{
			return $cacheResult;
		}

		$db = vB::getDbAssertor();
		//First content
		if (isset($this->subscriptions[$userid]))
		{
			foreach($this->subscriptions[$userid] as $discussionid)
			{
				$result['content'][] = $discussionid;
			}
		}
		else
		{
			$this->subscriptions[$userid] = [];
			$qry = $db->assertQuery('vBForum:subscribediscussion', ['userid' => $userid]);
			foreach($qry as $follow)
			{
				$result['content'][] = $follow['discussionid'];
				$this->subscriptions[$userid][$follow['discussionid']] = $follow['discussionid'];
			}
		}

		//Next users
		$params = [
			'userid' => intval($userid),
			'type'   => 'follow',
			'friend' => 'yes',
		];

		ksort($params);
		$cacheKey = md5(json_encode($params));

		if (!isset($this->userListCache[$cacheKey]))
		{
			$this->userListCache[$cacheKey] = $db->getRows('userlist', $params);
		}

		foreach($this->userListCache[$cacheKey] AS $follow)
		{
			$result['user'][] = $follow['relationid'];
		}

		//Now blogs or social groups where you are a member.
		$members = vB_Library::instance('user')->getGroupInTopic($userid);
		foreach($members AS $member)
		{
			$result['member'][] = $member['nodeid'];
		}

		vB_Cache::instance(vB_Cache::CACHE_FAST)->write($hashKey, $result, 1440, "followChg_$userid", "userChg_$userid");
		return $result;
	}


	/**
	 * 	This lists all the current followers, based userid param or current users's userid
	 *
	 * 	@param int	$userid -- will use current user if not set.
	 * 	@param array $options of options to filters the user followers. Used for pagination at the moment.
	 *
	 *	@return	array of user records
	 */
	public function getFollowers($userid, $options = [])
	{
		if (!$userid)
		{
			throw new vB_Exception_Api('invalid_userid');
		}

		$db = vB::getDbAssertor();

		$sortBy =  vB_Api_Follow::FOLLOWFILTER_SORTALL;
		$validsorts = [vB_Api_Follow::FOLLOWFILTER_SORTMOST, vB_Api_Follow::FOLLOWFILTER_SORTLEAST, vB_Api_Follow::FOLLOWFILTER_SORTALL];
		if(in_array($options[vB_Api_Follow::FOLLOWFILTERTYPE_SORT] ?? '', $validsorts))
		{
			$sortBy = $options[vB_Api_Follow::FOLLOWFILTERTYPE_SORT];
		}

		$limitNumber = (!empty($options['perpage'])) ? $options['perpage'] : 100;
		$currentPage = (!empty($options['page'])) ? $options['page'] : 1;

		$queryData = [
			'userid' => $userid,
			vB_dB_Query::PARAM_LIMITPAGE => $currentPage,
			vB_dB_Query::PARAM_LIMIT => $limitNumber,
			vB_Api_Follow::FOLLOWFILTERTYPE_SORT => $sortBy
		];

		$cacheKey = crc32(serialize($queryData));
		if (isset($this->userFollowers[$userid][$cacheKey]))
		{
			$result = $this->userFollowers[$userid][$cacheKey];
		}
		else
		{
			$followers = $db->getRows('vBForum:getUserFollowers', $queryData);
			$result = [];
			$result['results'] = $followers;
			$result['totalcount'] = count($result['results']);

			$userList = $this->getUserList($userid, 'followed', 'follow');
			$totalCount = count($userList);

			$result['paginationInfo'] = $this->getPaginationInfo([
				'totalCount' => $totalCount,
				'routeName' => 'subscription',
				'queryParams' => ['userid' => $userid, 'page' => $currentPage],
				'page' => $currentPage,
				'perPage' => $limitNumber,
				'tab' => 'subscribers',
			]);

			$this->userFollowers[$userid][$cacheKey] = $result;
		}

		$resultAux = [];
		foreach($result['results'] AS $user)
		{
			if(is_array($user))
			{
				vB_User::fetchMusername($user);
				vB_User::expandOptions($user);
			}

			$resultAux[] = $user;
		}

		if(!empty($resultAux))
		{
			$result['results'] = $resultAux;
		}

		return $result;
	}

	/**
	 * This indicates if user is following user's profile page.
	 * @param	int		Id from the user's profile page.
	 *
	 * @return	int		Used to indicate the following status between users.
	 * 					Values meaning:
	 * 					0 - Not following
	 * 					1 - Following
	 * 					2 - Pending
	 */
	public function isFollowingUser($profileUser)
	{
		$profileUser = intval($profileUser);
		if ($profileUser < 1)
		{
			throw new vB_Exception_Api('invalid_profile_userid', array($profileUser));
		}

		$currentUser = intval(vB::getUserContext()->fetchUserId());
		if ($currentUser < 1)
		{
			return vB_Api_Follow::FOLLOWING_NO;
		}

		// we might get the whole userlist...
		$follow = $this->getUserList($profileUser, 'followed', 'follow');
		$pending = $this->getUserList($profileUser, 'followed', 'pending');

		$return = '';
		if (array_key_exists($currentUser, $follow) AND ($follow[$currentUser]['friend'] == 'yes'))
		{
			$return = vB_Api_Follow::FOLLOWING_YES;
		}
		else if (array_key_exists($currentUser, $pending) AND ($pending[$currentUser]['friend'] == 'pending'))
		{
			$return = vB_Api_Follow::FOLLOWING_PENDING;
		}
		else
		{
			$return = vB_Api_Follow::FOLLOWING_NO;
		}

		return $return;
	}


	/**
	 * 	This lists what a user is following- the parameters, not the content
	 *
	 *	@param int $userid
	 *	@param string	$type = The type of following to get . Use class constants for this, available are:
	 *		vB_Api_Follow::FOLLOWTYPE_ALL
	 *		vB_Api_Follow::FOLLOWTYPE_USERS
	 *		vB_Api_Follow::FOLLOWTYPE_CONTENT
	 *		vB_Api_Follow::FOLLOWTYPE_CHANNEL
	 *	@param array $filters -- Settings to filter the following. Could be sort or/and type.  Key are
	 *		vB_Api_Follow::FOLLOWFILTERTYPE_SORT.  Valid values are:
	 *		vB_Api_Follow::FOLLOWFILTERTYPE_SORT =>
	 *			vB_Api_Follow::FOLLOWFILTER_SORTMOST
	 *			vB_Api_Follow::FOLLOWFILTER_SORTLEAST
	 *			vB_Api_Follow::FOLLOWFILTER_SORTALL
	 *	@param string|array $contenttypeclass	Content types classes to filter the following. It can be a
	 *		simple string or an array. The classes should contain 'vBForum_' prefix.  If not provided then
	 *		it defaults to all contenttypes *except* for Channels.
	 *	@param	array $options Array of options to the following.
	 * 		-- page int page to return (default 1)
	 * 		-- perpage int page size (default 100)
	 *
	 *	@return	array with 2 elements- users and nodes.
	 */
	public function getFollowing(
		$userid,
		$type    = vB_Api_Follow::FOLLOWTYPE_ALL,
		$filters = [vB_Api_Follow::FOLLOWFILTERTYPE_SORT => vB_Api_Follow::FOLLOWFILTER_SORTALL],
		$contenttypeclass = null,
		$options          = []
	)
	{
		$types = [
			vB_Api_Follow::FOLLOWTYPE_ALL,
			vB_Api_Follow::FOLLOWTYPE_USERS,
			vB_Api_Follow::FOLLOWTYPE_CONTENT,
			vB_Api_Follow::FOLLOWTYPE_CHANNELS,
			vB_Api_Follow::FOLLOWTYPE_ACTIVITY,
		];

		if (!in_array($type, $types))
		{
			throw new vB_Exception_Api('invalid_data');
		}

		$db = vB::getDbAssertor();

		// if is not set, then set default value
		if (isset($filters[vB_Api_Follow::FOLLOWFILTERTYPE_SORT]))
		{
			switch ($filters[vB_Api_Follow::FOLLOWFILTERTYPE_SORT])
			{
				case vB_Api_Follow::FOLLOWFILTER_SORTMOST:
					$sorts = ['lastactivity' => 'DESC', 'title' => 'ASC'];
					break;
				case vB_Api_Follow::FOLLOWFILTER_SORTLEAST:
					$sorts = ['lastactivity' => 'ASC', 'title' => 'ASC'];
					break;
				default:
					$sorts = ['title' => 'ASC'];
					break;
			}
		}
		else
		{
			$sorts = ['title' => 'ASC'];
		}

		$resultsLimit = (isset($options['perpage']) AND intval($options['perpage']))? intval($options['perpage']) : 100;
		$currentPage = (isset($options['page']) AND intval($options['page'])) ? intval($options['page']) : 1;

		$contenttypeid = [];
		if ($type == vB_Api_Follow::FOLLOWTYPE_CONTENT AND $contenttypeclass)
		{
			if (!is_array($contenttypeclass))
			{
				$contenttypeclass = [$contenttypeclass];
			}

			foreach ($contenttypeclass AS $contenttype)
			{
				if ($typeId = vB_Types::instance()->getContentTypeID(trim($contenttype)))
				{
					$contenttypeid[] = $typeId;
				}
			}
			sort($contenttypeid);
		}

		$follows = [];
		$totalCount = 0;

		//this cache is highly, highly dubious.  I'm guessing the hit rate is basically nil.
		$cacheKey = crc32(serialize([$userid, $type, $resultsLimit, $currentPage, $sorts, $contenttypeid]));
		if (isset($this->userFollowing[$userid][$cacheKey]))
		{
			$result = $this->userFollowing[$userid][$cacheKey];
		}
		else
		{
			$follows['results'] = $db->getRows('vBForum:getUserFollowing', [
				'userid' => $userid,
				vB_Api_Follow::FOLLOWTYPE => $type,
				vB_Api_Follow::FOLLOWFILTERTYPE_SORT => $sorts,
				vB_dB_Query::PARAM_LIMITPAGE => $currentPage,
				vB_dB_Query::PARAM_LIMIT => $resultsLimit,
				'contenttypeid' => $contenttypeid,
			]);

			// @TODO using one query to get all total count cases now. We might want to use userlist and
			// subscribediscussion in conjunction to get the total count as we used to before.
			$totalCount = $db->getField('vBForum:getUserFollowingCount', [
				'userid' => $userid,
				vB_Api_Follow::FOLLOWTYPE => $type,
				'contenttypeid' => $contenttypeid
			]);

			$result = [];
			$result['results'] = $follows['results'];
			$result['totalcount'] = count($follows['results']);
			$result['paginationInfo'] = $this->getPaginationInfo(
				[
					'routeName' => 'subscription',
					'totalCount' => $totalCount,
					'pageUrl' => 'following',
					'userid' => $userid,
					'page' => $currentPage,
					'perPage' => $resultsLimit,
					'tab' => 'subscriptions',
				]
			);

			$this->userFollowing[$userid][$cacheKey] = $result;
		}

		return $result;
	}

	/**
	 *	Clear various internal caches for the follows library
	 *
	 *	@param array $userids -- the users to clear the caches for.
	 *	@param bool $contentonly -- if the change only affects content some classes don't need clearing.
	 *	@return void
	 */
	public function clearFollowCache($userids, $contentonly = false)
	{
		$events = [];
		foreach ($userids AS $user)
		{
			if(!$contentonly)
			{
				unset($this->followers[$user]);
				unset($this->userFollowers[$user]);
			}

			unset($this->userFollowing[$user]);
			unset($this->subscriptions[$user]);
			$events[] = "followChg_$user";
		}

		vB_Cache::allCacheEvent($events);
		$this->userListCache = [];
	}

	//Transitional methods.  These are here to allow the API class to call them.  They really should be internal functions
	//and once we manage to port the bulk of the logic to the library they can be.  Consider calling them from outside
	//the follow classes to be akin to making a private function public. (And move them out of this section if you do)

	/**
	 * This gets the subscriptions to content nodes
	 *
	 *	@param		int		the userid
	 *
	 * 	@return		mixed	array of subscribediscussion records
	 */
	public function getSubscribedDiscussion($userid)
	{
		if (isset($this->subscriptions[$userid]))
		{
			return $this->subscriptions[$userid];
		}

		$db = vB::getDbAssertor();

		$column = $db->getColumn('vBForum:subscribediscussion', 'discussionid', ['userid' => $userid], false, 'discussionid');
		$this->subscriptions[$userid] = $column;

		return $this->subscriptions[$userid];
	}

	public function getPaginationInfo($params)
	{
		$startCount = $endCount = 0;
		//we use these values outside of the total count block below so we need to make
		//sure they get set (otherwise we can get a divide by 0 error)
		if (!isset($params['page']))
		{
			$params['page'] = 1;
		}

		$params['page'] = intval($params['page']);

		if (!isset($params['perPage']))
		{
			$params['perPage'] = 20;
		}

		$params['perPage'] = intval($params['perPage']);

		if ($params['totalCount'] > 0)
		{
			$startCount = ($params['page'] * $params['perPage']) - $params['perPage'] + 1;
			$endCount = $params['page'] * $params['perPage'];
			if ($endCount > $params['totalCount'])
			{
				$endCount = $params['totalCount'];
			}
		}
		$name = $params['routeName'];
		$userid = $params['userid'] ?? null;

		$totalPages = ceil($params['totalCount'] / $params['perPage']);
		if ($totalPages < 1)
		{
			$totalPages = 1;
		}

		$prevPage = ($params['page'] > 1) ? '#' : '';
		$nextUrl = ($params['page'] < $totalPages) ? '#' : '';
		$return = [
			'startcount' => $startCount,
			'endcount' => $endCount,
			'totalcount' => $params['totalCount'],
			'currentpage' => $params['page'],
			'page' => $params['page'],
			'prevurl' => $prevPage,
			'nexturl' => $nextUrl,
			'totalpages' => $totalPages,
			'name' => $name,
			'tab' => $params['tab'],
			'userid' => $userid,
		];

		return $return;
	}

	/**
	 * This gets the followers.
	 * For $type = 'follow',
	 * $direction = 'following' means "get all users that $userid is following" (userlist.userid => $userid)
	 * $direction = 'followed' means "get all users following $userid" (userlist.relationid => $Userid)
	 *
	 *	@param	int		the userid
	 *	@param	string	type- following (userlist.userid) or followed (userlist.relationid)
	 *	@param	string	type- follow, pending or ignore (aka blocked)
	 *
	 * 	@return	array of userlist records
	 */
	public function getUserList($userid, $direction = 'followed', $type = 'follow')
	{
		// Reminder, common operations:
		// get users followed by A = getUserList(A, 'following', 'follow')
		// get users following A = getUserList(A, 'followed', 'follow')
		// get users blocked by A = getUserList(A, 'following', 'ignore')

		if (isset($this->followers[$userid][$direction][$type]))
		{
			return $this->followers[$userid][$direction][$type];
		}

		if (!isset($this->followers[$userid][$direction][$type]))
		{
			$this->followers[$userid][$direction][$type] = [];
		}

		$userListCache = $this->getUserListCache($userid, $direction, $type);

		if (is_array($userListCache))
		{
			foreach ($userListCache AS $result)
			{
				// This $key flipflop follows the logic that $direction == 'following' means all result.userid == $userid
				// and $direction == 'followed' means all result.relationid == $userid.
				// Effectively, the keys work as what should be the return array anyways, i.e. the "other userid"
				// and current callers rely on that behavior.
				$key = ($direction == 'following' ? $result['relationid'] : $result['userid']);
				$this->followers[$userid][$direction][$type][$key] = $result;
			}
		}

		return $this->followers[$userid][$direction][$type];
	}

	//End transitional methods.

 	/**
	 * This gets the followers.
	 *
	 *	@param	int		the userid
	 *	@param	string	type- following($userid field) or followed($relationid)
	 *	@param	string	type- follow, pending or ignore
	 *
	 * 	@return	array the userListCache
	 */
	//keep an internal cache of user values based on query params.  We have so many layers of
	//caching and we aggressively purge enough that it's debatable if it's doing any good.
	private function getUserListCache($userid, $direction, $type)
	{
		$params = [vB_dB_Query::TYPE_KEY => vB_dB_Query::QUERY_SELECT];

		if ($direction == 'followed')
		{
			$params['relationid'] = intval($userid);
		}
		else
		{
			$params['userid'] = intval($userid);
		}

		if ($type == 'follow')
		{
			$params['type']	 = 'follow';
			$params['friend'] = 'yes';
		}
		else if ($type == 'ignore')
		{
			$params['type'] = 'ignore';
			$params['friend'] =	'denied';
		}
		else if ($type == 'pending')
		{
			$params['type']	 = 'follow';
			$params['friend'] = 'pending';
		}
		else
		{
			throw new vB_Exception_Api('invalid_data');
		}

		ksort($params);
		$cacheKey = md5(json_encode($params));

		if (!isset($this->userListCache[$cacheKey]))
		{
			$db = vB::getDbAssertor();
			$this->userListCache[$cacheKey] = $db->getRows('userlist', $params);
		}

		return $this->userListCache[$cacheKey];
	}


	/**
	 * This deletes a follower. needs userid and followerid
	 *
	 * 	@param	int	$follow_item	"optional" (but will throw an exception if not provided) nodeid or userid of the item to stop following.
	 *		That is, the item that was being followed by $userid
	 * 	@param	string 	$type			The type of the follow add action. USERS, CHANNELS or CONTENT types.
	 *	@param	int		$userid			Optional, will use current user if not provided. The userid of the follower/subscriber.
	 *
	 *	@return	int
	 */
	public function delete($follow_item, $type, $userid)
	{
		$db = vB::getDbAssertor();
		switch ($type)
		{
			case vB_Api_Follow::FOLLOWTYPE_CHANNELS:
			case vB_Api_Follow::FOLLOWTYPE_CONTENT:
				$db->delete('vBForum:subscribediscussion', ['userid' => $userid, 'discussionid' => $follow_item]);
				$this->clearFollowCache([$userid], true);
				break;
			case vB_Api_Follow::FOLLOWTYPE_USERS:
				$db->delete('userlist', [
					'type' => 'follow',
					'userid' => $userid,
					'relationid' => $follow_item,
					'friend' => 'yes',
				]);
				$this->clearFollowCache([$userid, $follow_item], true);
				break;
			default:
				// just ignore
				return 1;
				break;
		}

		vB_Library::instance('search')->purgeCacheForCurrentUser();

		return 1;
	}
}
/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 101013 $
|| #######################################################################
\*=========================================================================*/
