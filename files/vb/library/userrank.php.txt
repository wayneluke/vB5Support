<?php if (!defined('VB_ENTRY')) die('Access denied.');
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Libary_Userrank
 *
 * @package vBLibrary
 * @access public
 */
/*
 *	Note that the "ranks" datastore entry should be considered private to this class even though there is no
 *	way to enforce that.  The only other place its currently used is the unit tests -- in order to reset the
 *	value between tests and to test the "self heal" logic when the datastore entry randomly goes missing.
 */
class vB_Library_Userrank extends vB_Library
{
	/**
	 * Fetch Userrank By RankID
	 *
	 * @param int $rankid Rank ID
	 * @return array User rank information
	 */
	public function fetchById($rankid)
	{
		$rank = vB::getDbAssertor()->getRow('vBForum:ranks', ['rankid' => intval($rankid)]);

		if (!$rank)
		{
			throw new vB_Exception_Api('invalid_rankid');
		}

		return $rank;
	}

	/**
	 * Fetch All user ranks
	 *
	 * @return array Array of user ranks
	 */
	public function fetchAll()
	{
		return vB::getDbAssertor()->getRows('userrank_fetchranks', []);
	}

	/**
	 * Insert a new user rank or update existing user rank
	 *
	 * @param array $data User rank data to be inserted or updated
	 *              'active'              => Bool Active.
	 *              'grouping'            => String Grouping tag
	 *              'priority'            => Int Priority for grouped user ranks
	 *              'ranklevel'           => Int Number of times to repeat rank
	 *              'usergroupid'         => Int Usergroup
	 *              'minposts'            => Int Minimum Posts
	 *              'startedtopics'       => Int Minimum Topics
	 *              'registrationtime'    => Int Minimum time since registration, in seconds
	 *              'reputation'          => Int Minimum Reputation Level
	 *              'totallikes'          => Int Minimum Likes from other users
	 *              'stack'               => Bool Stack Rank.
	 *              'display'             => 0|1 Display Type. 0 - Always, 1 - If Displaygroup = This Group
	 *              'rankimg'             => String User Rank File Path (only used if rankhtml is empty)
	 *              'rankhtml'            => String User Rank HTML Text (if not empty rankimg will be ignored)
	 * @param int $rankid If not 0, it's the ID of the user rank to be updated
	 *
	 * @return int New rank's ID or updated rank's ID
	 */
	public function save($data, $rankid = 0)
	{
		$rankid = intval($rankid);

		//set some defaults to make PHP8 happy
		$data['active'] = $data['active'] ?? 1;
		$data['grouping'] = $data['grouping'] ?? '';
		$data['priority'] = $data['priority'] ?? 0;
		$data['ranklevel'] = $data['ranklevel'] ?? null;
		$data['rankimg'] = $data['rankimg'] ?? null;
		$data['rankhtml'] = $data['rankhtml'] ?? null;
		$data['rankurl'] = $data['rankurl'] ?? null;
		$data['startedtopics'] = $data['startedtopics'] ?? 0;
		$data['registrationtime'] = $data['registrationtime'] ?? 0;
		$data['reputation'] = $data['reputation'] ?? 0;
		$data['totallikes'] = $data['totallikes'] ?? 0;

		if (!$data['ranklevel'] OR (!$data['rankimg'] AND !$data['rankhtml'] AND !$data['rankurl']))
		{
			throw new vB_Exception_Api('please_complete_required_fields');
		}

		if ($data['usergroupid'] == -1)
		{
			$data['usergroupid'] = 0;
		}

		if ($data['rankhtml'])
		{
			$type = 1;
			$data['rankimg'] = $data['rankhtml'];
		}
		else if ($data['rankurl'])
		{
			$type = 2;
			$data['rankimg'] = $data['rankurl'];
		}
		else
		{
			//type cannot be non empty here.  Not sure if this intended to be $data['type'] or what.
			if (empty($type))
			{
				if (!(@is_file(DIR . $data['rankimg'])))
				{
					throw new vB_Exception_Api('invalid_file_path_specified');
				}
				$type = 0;

				//what?
				$data['rankimg'] =  $data['rankimg'];
			}
			else
			{
				$type = $data['type'];
			}

		}

		if (!$rankid)
		{
			/*insert query*/
			$rankid = vB::getDbAssertor()->assertQuery('vBForum:ranks', [
				vB_dB_Query::TYPE_KEY => vB_dB_Query::QUERY_INSERT,
				'active'            => $data['active'],
				'grouping'          => $data['grouping'],
				'priority'          => $data['priority'],
				'ranklevel'         => $data['ranklevel'],
				'minposts'          => $data['minposts'],
				'startedtopics'     => $data['startedtopics'],
				'registrationtime'  => $data['registrationtime'],
				'reputation'        => $data['reputation'],
				'totallikes'        => $data['totallikes'],
				'rankimg'           => trim($data['rankimg']),
				'usergroupid'       => $data['usergroupid'],
				'type'              => $type,
				'stack'             => $data['stack'],
				'display'           => $data['display'],
			]);

			if (!empty($rankid['errors']))
			{
				throw new vB_Exception_Api('invalid_data');
			}
		}
		else
		{
			/*update query*/
			//The unit test requires the return to be the rankid whether it's an insert or
			//update.  By coincidence it passed, but when fixing VBV-13749 it failed.
			$update = vB::getDbAssertor()->assertQuery('vBForum:ranks', [
				vB_dB_Query::TYPE_KEY => vB_dB_Query::QUERY_UPDATE,
				'active'            => $data['active'],
				'grouping'          => $data['grouping'],
				'priority'          => $data['priority'],
				'ranklevel'         => $data['ranklevel'],
				'minposts'          => $data['minposts'],
				'startedtopics'     => $data['startedtopics'],
				'registrationtime'  => $data['registrationtime'],
				'reputation'        => $data['reputation'],
				'totallikes'        => $data['totallikes'],
				'rankimg'           => trim($data['rankimg']),
				'usergroupid'       => $data['usergroupid'],
				'type'              => $type,
				'stack'             => $data['stack'],
				'display'           => $data['display'],
				vB_dB_Query::CONDITIONS_KEY => [
					'rankid' => $rankid,
				]
			]);

			if (!empty($update['errors']))
			{
				throw new vB_Exception_Api('invalid_data');
			}

		}

		$this->buildRanks();
		return $rankid;
	}

	/**
	 * Delete an user rank
	 *
	 * @param int $rankid The ID of user rank to be deleted
	 * @return void
	 */
	public function delete($rankid)
	{
		vB::getDbAssertor()->assertQuery('vBForum:ranks', array(
			vB_dB_Query::TYPE_KEY => vB_dB_Query::QUERY_DELETE,
			'rankid' => $rankid,
		));

		$this->buildRanks();
	}

	/**
	 * Delete all user ranks based for a given usergroup
	 *
	 * This is primarily intended for cleanup when a usergroup is deleted.
	 *
	 * @param int $usergroupid The usergroup to clear the ranks for.
	 */
	public function deleteForUsergroup($usergroupid)
	{
		vB::getDbAssertor()->assertQuery('vBForum:ranks', array(
			vB_dB_Query::TYPE_KEY => vB_dB_Query::QUERY_DELETE,
			'usergroupid' => $usergroupid
		));
		$this->buildRanks();
	}

	/**
	 *	Determines if we have ranks defined in the system.  This allows
	 *	us to determine if we even need to worry about changing a user's rank.
	 */
	public function haveRanks()
	{
		$ranks = vB::getDatastore()->getValue('ranks');
		if (!is_array($ranks))
		{
			$ranks = $this->buildRanks();
		}

		return !empty($ranks);
	}

	/**
	 *	Gets the current rank for a user.
	 *
	 *	Intended to allow updating the user after a change is made.
	 *
	 *	We use the following logic to find the ranks for a user.
	 *
	 * 	A rank is a match if
	 * 	* We our user has greater than or equal to the min post count for the rank
	 *  * We are a member of the ranks group (or the rank is set to all user groups)
	 *  * If we are set to only match the display group then our display group is the same as the rank group
	 *			If the rank is set to "all groups" and set to only match a display group then we match the
	 *			rank if we have not matched a previous rank.
	 *
	 *	Additionally we will not consider any ranks if we have previously matched a rank for the same usergroup
	 *	with a higher minimum post count.  If there are several ranks with the same user group and post count
	 *	that match we will select all of them if they are the highest that match.  For this purpose ranks
	 *	set to "all groups" are considered their own usergroup (that is we will select up to one rank per
	 *	usergroup and one for "all usergroups" assuming we do not select multiple ranks with the same postcount).
	 *
	 *  Note that there is undocumented (in the UI) behavior surrounding the seemingly nonsensical
	 *  combination of "all groups" and "display group = this group".  We specifically only match the group if
	 *  we haven't matched a previous ranks (for any usergroup, not just "all groups").  As an additional quirk,
	 *  if we would match an "all group" rank with a lower post count and without the display group flag set
	 *  we will match the rank with the display group flag instead, which seems inconsistant (this is because
	 *  we encounter the higher post cont rank first in process order and make a decision on it before looking
	 *  at the ranks farther down -- and when we encounter the lower ranks we've already selected the higher
	 *  count rank for all groups and therefore we do not consider the lower rank for inclusion).
	 *
	 *  This behavior was clearly done for a reason (based the specifical inclusion of code to handle that case),
	 *  however the reasons for it are lost to history.  It does not appear to be a widely used case in the wild.
	 *  The current thinking is that it is not a useful feature and we should consider it an error to enter a
	 *  rank in that state.  The logic has not yet been changed to reflect this (its been that way for a long
	 *  time and doesn't appear to be hurting anything).
	 *
	 * @param array $userinfo    The user info array.  We currently only use the following fields
	 *                               posts:int
	 *                               startedtopics:int
	 *                               joindate:unixtime
	 *                               reputation:int
	 *                               totallikes:int
	 *                               usergroupid:int
	 *                               displaygroupid:int
	 *
	 * @return string    The user rank html
	 */
	public function getRankHtml(array $userinfo) : string
	{
		//if for some reason we don't have the datastore value then rebuild it.  Replaces a call in the
		//admincp global page.  This is the only place where we use the rank datastore value.
		$ranks = vB::getDatastore()->getValue('ranks');
		if (!is_array($ranks))
		{
			$ranks = $this->buildRanks();
		}

		$doneusergroup = [];
		$displaygroupid = (empty($userinfo['displaygroupid']) ? $userinfo['usergroupid'] : $userinfo['displaygroupid']);

		//For historical reasons, probably to save space when the array is serialized in the datastore, the ranks
		//in the datastore used single character aliases for the fields
		//ranklevel: l, minposts: m, rankimg: i, type: t, stack: s, display: d, usergroupid: u
		//However, the modern ranks datastore object has been updated to use the full column names instead of the
		//above aliases for readability.

		// The old logic used to sort by usergroupid DESC & minposts DESC, and for a given usergroupid,
		// only the highest minposts rank (or all ranks with same the highest minposts value) were displayed.
		// The usergroupid DESC sorting also let the "all groups" and "display group = this group" work.
		// This edge case is now handled via the $onlyShowThisRankIfNoOtherRanks check below, but we may
		// remove it in the near future if no one really wants this behavior, and/or replace it with a more
		// explicit feature to "show this rank only if no other ranks are applied" for ANY usergroupid.
		// Now that we've expanded the rank qualifiers to include minposts, startedtopics, registrationtime,
		// reputation and likes, sorting & comparing rank hierarchies by minposts no longer works.
		// We've added the `priority` column to handle sorting the ranks. We've also added the `grouping`
		// field to rank grouping/collapsing explicit instead of the previous implicit grouping by usergroupid.

		// We are breaking up the rank filtering & rank html generation into separate loops so that we can apply
		// more complex or explicit sorting in between and not have to rely on the fetch query sorting for us..
		$userranksByGrouping = [];
		$onlyShowThisRankIfNoOtherRanks = [];

		/** @var vB_Library_User */
		$userLib = vB_Library::instance('user');

		foreach ($ranks AS $rank)
		{
			//assume no match
			$match = false;

			// This is probably not needed, as the ranks datastore shouldn't contain any inactive ranks, but
			// just in case something went sideways.
			if (!$rank['active'])
			{
				continue;
			}

			//do we have enough posts to match this rank?
			if ($this->earnedRank($userinfo, $rank))
			{
				//Either we haven't matched a rank for this usergroup before or the rank we matched has the
				//same min posts and this one (and thus we can match both per our rules).
				//Note: This logic relies on fetchRank being ordered by priority DESC
				// Show this rank if it's ungrouped (which show all qualified ranks without collapsing)
				// or if it's the highest priority within the group.
				$showRank = (
					empty($rank['grouping']) OR
					empty($doneusergroup[$rank['grouping']]) OR
					$doneusergroup[$rank['grouping']] == $rank['priority']
				);

				if ($showRank)
				{
					//is this rank for a specific user group?
					if ($rank['usergroupid'] > 0)
					{
						//are we a member of that usergroup?
						if ($userLib->isMemberOf($userinfo, $rank['usergroupid'], false))
						{
							//do we need to match the display group?  If we do then do we?
							if (empty($rank['display']) OR $rank['usergroupid'] == $displaygroupid)
							{
								$match = true;
							}
						}
					}

					// Previously, this block was allowing a userrank with usergroupid=0 ("All Usergroups")
					// to show iff display=0 ("Always") or if no other userrank was set yet.
					// Note, the logic of "only match if no other ranks match" for when rank.usergroupid=0 &
					// rank.display=1 works only if the ranks fetch query orders by usergroupid DESC.
					else if ($rank['usergroupid'] == 0)
					{
						if (empty($rank['display']))
						{
							$match = true;
						}
						else
						{
							//do we have the special case of "only match if no other ranks match" case?
							// (display=1, usergroupid=0). Only show the first highest priority, no others.
							// This is very weird and inconsistent but trying to preserve old behavior for now.
							if (empty($onlyShowIfNoOtherRanks) OR $onlyShowIfNoOtherRanks['priority'] < $rank['priority'])
							{
								$onlyShowThisRankIfNoOtherRanks = $rank;
							}
						}
					}
				}
			}

			if ($match)
			{
				// Allow ungrouped ranks to simultaneously show.
				if ($rank['grouping'])
				{
					$doneusergroup[$rank['grouping']] = $rank['priority'];
				}

				$userranksByGrouping[$rank['grouping']][] = $rank;
			}
		}

		// Check for the "only match if no other ranks match" case.
		if (empty($userranksByGrouping) AND !empty($onlyShowThisRankIfNoOtherRanks))
		{

			$userranksByGrouping = ['' => [$onlyShowThisRankIfNoOtherRanks]];
		}

		// here, we could change the sorting in more complex ways than a simple (e.g. no ranking aliases) mysql query
		// allows, for example, by taking the ungrouped $userranksByGrouping[''] block out, processing everything else,
		// then processing the ungrouped to swap the sorting around, or changing the sorting algorithm to something in
		// PHP, e.g. "natural sorting" (["0 a", "1 b", "099 c"]) instead of mysql string sorting (["0 a", "099 c", "1 b"])

		$userrank = '';
		foreach ($userranksByGrouping AS $__grouping => $__groupRanks)
		{
			foreach ($__groupRanks AS $__rank)
			{
				//@todo -- we should not be generating html this deep in the code.  Need to seperate into a data list and provide a
				//template for rendering on the front end.  However that's going to require some work in terms of changing the datamodel
				//on down so for now we'll go with the code the way its been since (I think) vB2
				if (!empty($userrank) AND $__rank['stack'])
				{
					$userrank .= '<br />';
				}

				for ($x = $__rank['ranklevel']; $x--; $x > 0)
				{
					if (empty($__rank['type']))
					{
						//must include 'core/'.  See VBV-14906
						$__rank['rankimg'] = ltrim($__rank['rankimg'], '/');
						$userrank .= "<img src=\"core/{$__rank['rankimg']}\" alt=\"\" border=\"\" />";
					}
					else if ($__rank['type'] == 2)
					{
						$userrank .= "<img src=\"{$__rank['rankimg']}\" alt=\"\" border=\"\" />";
					}
					else
					{
						$userrank .= $__rank['rankimg'];
					}
				}
			}
		}

		return $userrank;
	}

	private function earnedRank($userinfo, $rankinfo)
	{
		$postsCriteria = ($userinfo['posts'] >= $rankinfo['minposts']);

		$topicsCriteria = ($userinfo['startedtopics'] >= $rankinfo['startedtopics']);

		$timenow = vB::getRequest()->getTimeNow();
		$timeSinceJoin = $timenow - $userinfo['joindate'];
		$registrationTimeCriteria = ($timeSinceJoin >= $rankinfo['registrationtime']);

		// Note, ranks.reputation is currently signed INT because user.reputation was allowed to be negative.
		// Per team discussion however, it seems like negative reputation has been removed from vB5, and
		// for now we'll only do >= checks for this qualifier rather than bidirectional or range checks.
		$reputationCriteria = ($userinfo['reputation'] >= $rankinfo['reputation']);

		$likesCriteria = ($userinfo['totallikes'] >= $rankinfo['totallikes']);

		return (
			$postsCriteria AND
			$topicsCriteria AND
			$registrationTimeCriteria AND
			$reputationCriteria AND
			$likesCriteria
		);
	}

	/**
	 *	Rebuild the rank datastore entry
	 *
	 *	Must be called after any operation that changes the rank table
	 */
	private function buildRanks()
	{
		//the logic for ranks strongly depends on this query returning things sorted is order
		//grouping ASC, priority DESC
		$ranks = vB::getDbAssertor()->assertQuery('vBForum:fetchranks', []);

		$rankarray = [];
		foreach($ranks as $rank)
		{
			$rankarray[] = $rank;
		}

		// Why do we have this? It's not like the build above does any kind of calculations or computations...

		vB::getDatastore()->build('ranks', serialize($rankarray), 1);
		return $rankarray;
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 117198 $
|| #######################################################################
\*=========================================================================*/
