<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Library_Unsubscribe
 *
 * @package vBLibrary
 */

class vB_Library_Unsubscribe extends vB_Library
{
	protected array $mailhashCache = [];
	protected array $mailoptionCache = [];

	const EMAILOPTION_DEFAULT = 0;
	const EMAILOPTION_UNSUBSCRIBED = 1;
	const EMAILOPTION_OPTED_IN = 2;

	/**
	 * Prepare user hash for bulk mail sending operations.
	 * Warning, this will reset $this->mailhashCache.
	 */
	public function prefetchUserHashes(array $userids) : void
	{
		if (!$userids)
		{
			return;
		}
		$assertor = vB::getDbAssertor();
		$conditions = [
			'userid' => $userids,
			// e.g. enforce expiry for tokens
			//['field' => 'tokencreated', 'value' => vB::getRequest()->getTimeNow() - 60 * 86400, 'operator' => vB_dB_Query::OPERATOR_GTE],
			//['field' => 'tokenlastused', 'value' => vB::getRequest()->getTimeNow() - 30 * 86400, 'operator' => vB_dB_Query::OPERATOR_GTE],
		];
		$existing = $assertor->getRows('mailhash', $conditions, false, 'userid');
		$this->mailhashCache = $existing;
		$inserts = [];
		foreach ($userids AS $__userid)
		{
			if (!isset($existing[$__userid]))
			{
				$inserts[$__userid] = $this->createMailhashArrayForUser($__userid);
				$this->mailhashCache[$__userid] = $inserts[$__userid];
			}
		}

		if ($inserts)
		{
			$first = reset($inserts);
			$fields = array_keys($first);
			$assertor->insertMultiple('mailhash', $fields, $inserts);
		}
		//$combined = $existing + $inserts;
		//$this->mailhashCache = $combined;

		// We're assuming we're going to use the token if we prepared it.
		// Note however, this is generating a lot more DB writes / network for bulk email sends
		//$this->bulkUpdateTokenLastused($combined);
		$this->bulkUpdateTokenLastused($existing);
	}

	public function bulkUpdateTokenLastused(array $useridHashArray, bool $shutdown = false)
	{
		// todo: refactor this for bulk update?
		// todo: shift off to systemevent? Though maybe not as we don't want a new subscribelink to accidentally expire until the cron kicks in.

		$timenow = vB::getRequest()->getTimeNow();
		$assertor = vB::getDbAssertor();
		foreach ($useridHashArray AS ['userid' => $__userid, 'hash' => $__hash])
		{
			$assertor->update('mailhash', ['tokenlastused' => $timenow], ['userid' => $__userid, 'hash' => $__hash], $shutdown);
		}
	}

	public function ensureUserHash(int $userid) : array
	{
		if ($userid <= 0)
		{
			return [
				'userid' => '',
				'hash' => '',
			];
		}

		// This memory cache is because we frequently bulk
		if (isset($this->mailhashCache[$userid]))
		{
			return $this->mailhashCache[$userid];
		}

		$assertor = vB::getDbAssertor();
		$check = $assertor->getRow('mailhash', ['userid' => $userid]);

		if (empty($check))
		{
			$data = $this->createMailhashArrayForUser($userid);
			$assertor->insert('mailhash', $data);
			$this->mailhashCache[$userid] = $data;
		}
		else
		{
			$this->mailhashCache[$userid] = $check;
		}

		return $this->mailhashCache[$userid];
	}

	private function createMailhashArrayForUser($userid) : array
	{
		// >>
		// The URI SHOULD include an opaque identifier or another hard-to-forge
		// component in addition to, or instead of, the plaintext names of the
		// list and the subscriber.  The server handling the unsubscription
		// SHOULD verify that the opaque or hard-to-forge component is valid.
		// This will deter attacks in which a malicious party sends spam with
		// List-Unsubscribe links for a victim list, with the intention of
		// causing list unsubscriptions from the victim list as a side effect of
		// users reporting the spam, or where the attacker does POSTs directly
		// to the mail sender's unsubscription server.
		// << - https://datatracker.ietf.org/doc/html/rfc8058#section-3.1
		// We need a hard-to-forge component to prevent enumeration attacks:
		// >>
		//  ... The server handling the unsubscription
		// SHOULD verify that the opaque or hard-to-forge component is valid.
		// This will deter attacks in which a malicious party sends spam with
		// List-Unsubscribe links for a victim list, with the intention of
		// causing list unsubscriptions from the victim list as a side effect of
		// users reporting the spam, or where the attacker does POSTs directly
		// to the mail sender's unsubscription server.
		// << - https://datatracker.ietf.org/doc/html/rfc8058#section-3.1
		// This component, "hash", will be permanent for now as to allow use-cases
		// where links from really old emails are still valid. Note that CAN-SPAM
		// requires AT LEAST 30 days lifetime for subscription links.

		$timenow = vB::getRequest()->getTimeNow();
		$random = new vB_Utility_Random();
		$seed = $random->alphanumeric(32);
		$hash = hash('sha256', $userid . '-' . $seed);
		$data = [
			'userid' => $userid,
			'hash' => $hash,
			// 'emailoption' => self::EMAILOPTION_DEFAULT,
			// 'emailoptionupdated' => 0,
			'tokencreated' => $timenow,
			'tokenlastused' => $timenow,
		];

		// permanent hash (fornow)
		// url=<userid, hash>
		// no secret or signature


		return $data;
	}

	public function resetAllHashes()
	{
		$assertor = vB::getDbAssertor();
		$assertor->assertQuery('truncateTable', ['table' => 'mailhash']);
	}

	public function resetSingleHash(int $userid)
	{
		$assertor = vB::getDbAssertor();
		$assertor->delete('mailhash', ['userid' => $userid]);
	}

	public function afterUserDelete(int $userid)
	{
		$assertor = vB::getDbAssertor();
		$assertor->delete('mailhash', ['userid' => $userid]);
		$assertor->delete('mailoption', ['userid' => $userid]);
	}

	// TODO: do we need a function to reset all mailoption secret & hashes? E.g. like resetting passwords after a breach.

	// TODO: delete record when user is deleted

	// Add admincp tool to invalidate hash for single user.
	// Add admincp tool for truncate table in case of DB breach -- (also?) tie it to reset passwords?
	// add explanations that all unsub links will be invalidated (CAN-SPAM 30days ??)


	public function fetchUrlParameters(int $userid) : array
	{
		$info = $this->ensureUserHash($userid);
		if (empty($info['hash']))
		{
			return [
				'userid' => 0,
				'hash' => '',
			];
		}

		return [
			'userid' => $userid,
			'hash' => $info['hash'],
		];
	}

	public function verifyHash(int $userid, string $hash) : bool
	{
		$assertor = vB::getDbAssertor();
		$check = $assertor->getRow('mailhash', ['userid' => $userid, 'hash' => $hash,]);

		// In the future, we may want to validate tokencreated, or tokenlastused
		return !empty($check['userid']);
	}


	/**
	 * Prefetch user `mailoption` for bulk mail sending operations.
	 * Warning, this will reset $this->mailoptionCache.
	 */
	public function prefetchUserMailOptions(array $userids) : void
	{
		$assertor = vB::getDbAssertor();
		$conditions = [
			'userid' => $userids,
			// e.g. enforce expiry for tokens
			//['field' => 'tokencreated', 'value' => vB::getRequest()->getTimeNow() - 60 * 86400, 'operator' => vB_dB_Query::OPERATOR_GTE],
			//['field' => 'tokenlastused', 'value' => vB::getRequest()->getTimeNow() - 30 * 86400, 'operator' => vB_dB_Query::OPERATOR_GTE],
		];
		$this->mailoptionCache = $assertor->getRows('mailoption', $conditions, false, 'userid');
		foreach ($userids AS $__userid)
		{
			if (!isset($this->mailoptionCache[$__userid]))
			{
				$this->mailoptionCache[$__userid] = [
					'userid' => $__userid,
					'emailoption' => self::EMAILOPTION_DEFAULT,
					'emailoptionupdated' => 0,
				];
			}

		}
	}

	public function trackEmailOptInOut(int $userid, int $option = self::EMAILOPTION_DEFAULT) : void
	{
		// This bit is for the future.
		// We currently don't have mail categories or the like, and we don't have explicit options for some autogenerated emails
		// (e.g. paid subscription reminders).
		// This bit is so that we have some way to check "did user opt out of all emails" if we need/want to block sending
		// some of those outgoing emails without explicit options.

		$assertor = vB::getDbAssertor();
		$timenow = vB::getRequest()->getTimeNow();
		$values = [
			'userid' => $userid,
			'emailoption' => $option,
			'emailoptionupdated' => $timenow
		];
		$assertor->replace('mailoption', $values);

		$this->mailoptionCache[$userid] = $values;
	}

	public function isUserOptedOutOfEmail(int $userid) : bool
	{
		if (empty($this->mailoptionCache[$userid]))
		{
			$assertor = vB::getDbAssertor();
			$check = $assertor->getRow('mailoption', ['userid' => $userid]);
			if (!$check)
			{
				$check = [
					'userid' => $userid,
					'emailoption' => self::EMAILOPTION_DEFAULT,
					'emailoptionupdated' => 0,
				];
			}
			$this->mailoptionCache[$userid] = $check;
		}

		switch ($this->mailoptionCache[$userid]['emailoption'])
		{
			case self::EMAILOPTION_UNSUBSCRIBED:
				return true;
				break;
			case self::EMAILOPTION_OPTED_IN:
				return false;
				break;
			// Note, we may change this default behavior to "require opt in" instead of "assume opt in" in the future.
			case self::EMAILOPTION_DEFAULT:
			default:
				return false;
				break;
		}
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 99787 $
|| #######################################################################
\*=========================================================================*/
