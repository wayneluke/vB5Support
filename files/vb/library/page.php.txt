<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Library_Page
 *
 * @package vBLibrary
 */
class vB_Library_Page extends vB_Library
{
	protected $lastCacheData = [];

	// array of info used for precaching
	protected $preCacheInfo = [];

	//Last time we saved cache- useful to prevent thrashing
	protected $lastpreCache = false;

	//Minimum time between precache list updates, in seconds
	const MIN_PRECACHELIFE = 300;


	/**
	 * This preloads information for the current page.
	 *
	 * @param	string	the identifier for this page, which comes from the route class.
	 */
	public function preload($pageKey)
	{
		$this->lastCacheData = vB_Cache::instance(vB_Cache::CACHE_LARGE)->read("vbPre_$pageKey");

		//If we don't have anything, just return;
		if (!$this->lastCacheData)
		{
			return;
		}

		$this->lastpreCache = $this->lastCacheData['cachetime'];

		if (!empty($this->lastCacheData['data']))
		{
			foreach ($this->lastCacheData['data'] AS $class => $tasks)
			{
				try
				{
					$library = vB_Library::instance($class);
					foreach ($tasks AS $method => $params)
					{
						if (method_exists($library, $method))
						{
							$reflection = new ReflectionMethod($library, $method);
							$reflection->invokeArgs($library, $params);
						}
					}

				}
				catch(exception $e)
				{
					//nothing to do. Just try the other methods.
				}
			}
		}
	}

	/**
	 * This saves preload information for the current page.
	 * @param string $pageKey -- the identifier for this page, which comes from the route class.
	 */
	public function savePreCacheInfo($pageKey)
	{
		$timenow = vB::getRequest()->getTimeNow();

		if (empty($this->preCacheInfo) OR
			(($timenow - intval($this->lastpreCache)) < self::MIN_PRECACHELIFE)
		)
		{
			return;
		}
		$data = array('cachetime' => $timenow, 'data' => $this->preCacheInfo);

		vB_Cache::instance(vB_Cache::CACHE_LARGE)->write("vbPre_$pageKey", $data, 300);
	}

	/**
	 * This saves preload information for the current page.
	 *
	 *	@param	string $apiClass -- name of the api class
	 * 	@param	string $method -- name of the api method that should be called
	 *	@param	mixed $params -- array of method parameters that should be passed
	 */
	public function registerPrecacheInfo($apiClass, $method, $params)
	{
		//if we have cached within the last five minutes do nothing.
		if ((vB::getRequest()->getTimeNow() - intval($this->lastpreCache)) < self::MIN_PRECACHELIFE)
		{
			return;
		}

		if (!isset($this->preCacheInfo[$apiClass]))
		{
			$this->preCacheInfo[$apiClass] = [];
		}

		$this->preCacheInfo[$apiClass][$method] = $params;
	}

	/*
	 *	Should have a delete($pageid) function here that does the same as the API
	 *	function without the permissions checks.  But that requires pulling a bunch
	 *	of logic from the API function into this class which is beyond the scope
	 *	of the current effort.
	 */

	/**
	 *	Delete a page
	 *
	 *	@param array $page -- the page info
	 *	@return true|array -- either on sucess true or an error array
	 */
	public function deleteFromPageInfo($page)
	{
		$assertor = vB::getDbAssertor();
		$check = $assertor->delete('page', ['pageid' => $page['pageid']]);

		if ($check AND empty($check['errors']))
		{
			$this->postDeletePage($page);
			return true;
		}
		else
		{
			return $check;
		}
	}


	public function getURLs($params = [])
	{
		$usercontext = vB::getUserContext();
		$assertor = vB::getDbAssertor();

		// Process the shorthand type param
		if (!empty($params['type']) AND empty($params['include']) AND empty($params['exclude']))
		{
			// For now, just filter via PHP & use jquery ui tabs.
			//$params['type'] = 'all';
			switch ($params['type'])
			{
				// If they're looking for "system" or "custom", we'll include pages only.
				case 'system':
					$params['include'] = ['system'];
					//$params['exclude']  = ['channels'];
					// So we can't exclude channels, because we want to include the default /homepage route
					// with "system", but that one is technically a channel not a page.
					$params['exclude'] = [];
					break;
				case 'custom':
					$params['include'] = ['custom'];
					$params['exclude']  = ['channels'];
					break;
				case 'channels':
					// So we kind of have a problem, where created channels are set to "Custom".
					// I.e. we have NO way to tell if a channel route has a modified URL,
					// or is a system-created one, unless it happens to be a default channel
					// (e.g. main-forum, articles, blogs, social-groups).
					// I'm not sure if that's the intended behavior or not.
					// See https://tracker.vbulletin.com/vbulletin5/issues/VBV-21524
					$params['include'] = ['channels'];
					$params['exclude']  = [];
					break;
				case 'home':
					$params['include'] = ['home'];
					$params['exclude']  = [];
					break;
				case 'all':
				default:
					$params['include'] = ['all'];
					$params['exclude']  = [];
					break;
			}
		}

		if (isset($params['include']) AND !is_array($params['include']))
		{
			$params['include'] = [$params['include']];
		}

		if (empty($params['sortby']))
		{
			// This was mostly useful for debugging/testing, but leaving it in place for now.
			// url|pagetitle
			$params['sortby'] = 'pagetitle';
		}

		$queryParams = [
			'include' => $params['include'] ?? [],
			'exclude' => $params['exclude'] ?? [],
			'pageid' => $params['pageid'] ?? [],
		];
		$rows = $assertor->getRows('vBForum:getURLs', $queryParams);

		/*
			Fetch the nodeids of certain channels we need to exclude from the list.
		 */
		$excludedChannelGUIDs = [
			vB_Channel::DEFAULT_CHANNEL_PARENT, // 'special' channel
			vB_Channel::PRIVATEMESSAGE_CHANNEL,
			vB_Channel::VISITORMESSAGE_CHANNEL,
			vB_Channel::ALBUM_CHANNEL,
			vB_Channel::REPORT_CHANNEL,
			vB_Channel::INFRACTION_CHANNEL,
		];
		$excludedChannels = $assertor->assertQuery('vBForum:channel', ['guid' => $excludedChannelGUIDs]);
		$excludedChannelsByChannelid = [];
		foreach ($excludedChannels AS $row)
		{
			$excludedChannelsByChannelid[$row['nodeid']] = $row;
		}


		// bulk fetch phrases for page title
		$phraseidsByPageGuid = [];
		$phraseLIB = vB_Library::instance('phrase');
		foreach ($rows AS $row)
		{
			$phraseKey = 'page_' .  $phraseLIB->cleanGuidForPhrase($row['page_guid']) . '_title';
			$phraseidsByPageGuid[$row['page_guid']] = $phraseKey;
		}
		$phrases = vB_Api::instanceInternal('phrase')->fetch($phraseidsByPageGuid);

		$baseurl = (empty($params['doabsoluteurl']) ? "" : vB::getDatastore()->getOption('frontendurl')  . "/");
		$data = [];
		//$custom_pages = [];
		foreach ($rows AS $row)
		{
			// contentid can be pageid or nodeid depending on the type of the route.
			// For channels, contentid is the nodeid of the channel. See vB5_Route_Channel::validInput()
			if ($row['class'] == 'vB5_Route_Channel' AND
				!empty($row['contentid']) AND
				isset($excludedChannelsByChannelid[$row['contentid']])
			)
			{
				continue;
			}

			// This is only for the edge case where a conversation route is marked as home. We need to account for
			// a few weird behaviors in that case, such as not being able to build the "canonical" url from the
			// found route, and conversations pages overriding titles with their node titles for widget_pagetitle.
			$pagetitleoverride = null;
			$row['arguments'] = vb_unserialize($row['arguments']);
			try
			{
				// We used to just set the prefix as the URL because back when the sitebuilder panel
				// was made, we did not have the |nohomeurl option in order to show canonical URLs.
				if ($row['class'] == 'vB5_Route_Conversation' AND !empty($row['arguments']['customUrl']) AND !empty($row['arguments']['nodeid']))
				{
					// We can do the normal URL build for most routes, but when a conversation is set as
					// a home page, it's usually marked as customUrl which makes the route build return
					// its channel url (because it just returns the prefix). So we have to manually
					// reconstruct it.
					// Since ALL convo routes as home may apparently be marked as custom, not just ones with actual
					// custom URLs, we need to heuristically determine whether it's really a custom URL or not.
					// If we find a channel route with a matching prefix, let's assume this isn't actually custom
					$channelroute = $assertor->getRow('routenew', ['class' => 'vB5_Route_Channel', 'prefix' => $row['prefix']]);
					if ($channelroute)
					{
						$node = vB_Library::instance('node')->getNodeBare($row['arguments']['nodeid']);
						$channelUrl = vB5_Route::buildUrl($channelroute['routeid'] . '|nohomeurl');
						$channelUrl = rtrim($channelUrl, '/');
						$url = $channelUrl . '/' . $node['nodeid'] . '-' . $node['urlident'];
						// Also override the page title
						$pagetitleoverride = $node['title'];
					}
					else
					{
						// Assume this is truly a custom route and just run the normal URL build.
						$url = vB5_Route::buildUrl($row['routeid'] . '|nohomeurl');
					}

				}
				else
				{
					$url = vB5_Route::buildUrl($row['routeid'] . '|nohomeurl');
				}
			}
			catch (Exception $e)
			{
				// nothing, just fall back to prefix.
			}
			if (empty($url))
			{
				$url = $row['prefix'];
			}
			// Since we have multiple ways the url might've been built, let's make this safe to use as a relative url
			// (or prepended to {frontendurl}/ if $param['doabsoluteurl'] == true) in the href attribute
			$url = ltrim($url, '/');

			$phraseid = $phraseidsByPageGuid[$row['page_guid']];
			$pagetitle = $phrases[$phraseid];
			$label = $pagetitleoverride ?? $pagetitle;
			$label_after_anchor = " (/$url)";

			// key *should* be unique, as the URL is unique. Unless in some freaky convoluted case where
			// a madman generates a page title + URL combination to somehow collide
			// with another page. The delimiter ":::" is there to help with that, as the URL shouldn't
			// contain those characters, and we're always ending the key with the URL...
			// We prefix the key with the pagetitle, as to sort it alphabetically via pagetitle first.
			$delimiter = ":::";
			switch ($params['sortby'])
			{
				case 'url':
					$key = $url . $delimiter . $pagetitle;
					break;
				case 'pagetitle':
				default:
					$key = $pagetitle . $delimiter . $url;
					break;
			}

			if (!isset($data[$key]))
			{
				$data[$key] = [
					'pageid' => $row['pageid'],
					'routeid' => $row['routeid'],
					'class' => $row['class'],
					'name' => $row['name'],
					'pagetype' => $row['pagetype'],
					'url' => $baseurl . $url,
					'label' => $label,
					'label_after_anchor' => $label_after_anchor,
					// in case we want to add some raw HTML around the label in the future.
					'html_label' => vB_String::htmlSpecialCharsUni($label),
					'ishomeroute' => $row['ishomeroute'],
				];
			}

			$checkPerms = [
				'vB5_Route_Channel' => true,
				'vB5_Route_Conversation' => true,
				'vB5_Route_Article' => true,
			];
			if (isset($checkPerms[$row['class']]))
			{
				$arguments = $row['arguments'];
				if (isset($arguments['channelid']) AND is_numeric($arguments['channelid']))
				{
					$channelid = intval($arguments['channelid']);
					$channelPermissionResult = false;

					// There are many places in the code upstream of getChannelPermission()
					// where it can throw an invalid_node_id if an invalid node id is
					// encountered. If we somehow pass an invalid one, let's just ignore it
					// instead of causing the whole page list to fail.
					try
					{
						$channelPermissionResult = $usercontext->getChannelPermission('forumpermissions', 'canview', $channelid);
					}
					catch (vB_Exception_Api $e)
					{
						if (!$e->has_error('invalid_node_id'))
						{
							// rethrow any other exceptions
							throw $e;
						}
					}

					if (!$channelPermissionResult)
					{
						// No view perms on this node-associated route.
						unset($data[$key]);
					}
				}
			}
		}

		// Sort alphabetically by pagetitle (or whatever the array keys are defined with).
		ksort($data, SORT_NATURAL );


		$perpage = max($params['perpage'] ?? 10, 1);
		$paginated = array_chunk($data, $perpage, true);
		$totalcount = count($paginated);


		$return = [
			'all' => [
				'pagenav' => [
					'currentpage' => 1,
					'totalpages' => max($totalcount, 1),
					'totalcount' => $totalcount,
				],
				'paginated' => $paginated,
				// Depending on the filter used, we might end up with no results,
				// e.g. 'type' => 'custom' on a fresh install
				'empty_phraseid' => 'sbpanel_pagelist_empty_placeholder',
			],
		];

		if (!empty($params['unpaginated']))
		{
			$return['all']['unpaginated'] = $data;
		}

		return $return;
	}


	public function getOrphanedPagetemplates($params = [])
	{
		$assertor = vB::getDbAssertor();

		$rows = $assertor->getRows('vBForum:getOrphanedPagetemplates');

		$defaultPagetemplateGUIDs = vB_Page::getDefaultPageTemplateGUIDs();

		$table_headers = [
			"pagetemplateid" => "pagetemplateid",
			"title" => "title",
			//"guid",
		];


		$phrases = vB_Api::instanceInternal('phrase')->fetch([
			'pagetemplate_no_title',
		]);

		$data = [];
		$sortbykey = 'pagetemplateid';
		foreach ($rows AS $__row)
		{
			$__key = $__row[$sortbykey];
			$__guid = $__row['guid'];
			if (isset($defaultPagetemplateGUIDs[$__guid]))
			{
				continue;
			}

			$__title = $__row['title'];
			if (empty($__title))
			{
				$__title = $phrases['pagetemplate_no_title'];
			}

			// keep this in sync with $table_headers above
			$data[$__key] = [
				"pagetemplateid" => $__row['pagetemplateid'],
				"title" => $__title,
				//"guid" => $__guid,
			];
		}

		// Sort by pagetemplateid
		ksort($data, SORT_NATURAL );


		$perpage = 10;
		$paginated = array_chunk($data, $perpage, true);

		return [
			'orphans' => [
				'pagenav' => [
					'currentpage' => 1,
					'totalpages' => count($paginated),
				],
				'paginated' => $paginated,
				'table_headers' => $table_headers,
				'empty_phraseid' => 'sbpanel_pagelist_empty_placeholder_orphans', // "no orphaned pagetemplates"
			],
		];
	}

	/**
	 * Returns a list of pages to show as the home page options in quick config
	 */
	public function getHomePages()
	{
		$pageguids = array(
			'vbulletin-4ecbdac82ef5d4.12817784',
			'vbulletin-page-homeclassic-5d5f1629c20b77.42318601',
			'vbulletin-page-homecommunity-5d6039ff53c7b6.02957268',
		);

		// allow products to add pages to the list
		vB::getHooks()->invoke('hookLibraryPageGetHomePages', array(
			'pageguids' => &$pageguids,
		));

		$pages = vB::getDbAssertor()->getRows('vBForum:getHomePages', array('pageguids' => $pageguids));

		if (!empty($pages))
		{
			$foundHomeRoute = false;
			$homeRouteId = false;
			$cleanGuids = [];
			$phraseVarnames = [];

			$phraseLib = vB_Library::instance('phrase');
			$phraseApi = vB_Api::instanceInternal('phrase');

			foreach ($pages AS $page)
			{
				// clean guid is used for phrase & thumbnail URL
				$cleanGuid = $phraseLib->cleanGuidForPhrase($page['guid']);
				$cleanGuids[$page['guid']] = $cleanGuid;

				// get home page title phrases (this is not the same phrase as the page's displaytitle)
				$phraseVarnames[$page['guid']] = 'page_' . $cleanGuid . '_homepagetitle';

				// check if one of these pages is set as home page
				if ($page['ishomeroute'] == 1)
				{
					$foundHomeRoute = true;
					$homeRouteId = $page['routeid'];
				}
			}
			$phrases = $phraseApi->fetch($phraseVarnames);

			foreach ($pages AS $k => $page)
			{
				// add home page title
				$varname = $phraseVarnames[$page['guid']];
				$pages[$k]['title'] = $phrases[$varname] ?? '~~' . $varname . '~~';

				// add thumbnail URLs
				$cleanGuid = $cleanGuids[$page['guid']];
				$pages[$k]['thumbnailurl'] = 'images/sitebuilder/page-thumb-' . $cleanGuid . '.png';

				// is this one selected?
				$pages[$k]['selected'] = ($page['ishomeroute'] == 1);
			}

			if (!$homeRouteId)
			{
				// custom home page
				$homeRoute = vB::getDbAssertor()->getRow('routenew', array('ishomeroute' => 1));
				$homeRouteId = $homeRoute['routeid'];
			}

			return array(
				'success' => true,
				'pages' => $pages,
				'foundhomeroute' => $foundHomeRoute,
				'homerouteid' => $homeRouteId,
			);
		}

		return array('success' => false);
	}

	public function pageIsViewControllable(int $pageid) : bool
	{
		$assertor = vB::getDbAssertor();
		/** @var vB_Library_Route */
		$routeLib = vB_Library::instance('route');
		$excludeCheck = $routeLib->getPageViewPermissionExcludedPrefixes();
		$check = $assertor->getRow('getPageAndRouteExcludingPrefixes', ['pageid' => $pageid, 'excluded' => $excludeCheck]);
		if ($check)
		{
			return true;
		}

		return false;
	}

	public function canViewPage(int $pageid, int $userid) : bool
	{
		// Note, check banned info separately!
		// $bannedInfo = vB_Library::instance('user')->fetchBannedInfo(false);

		// Note, we may want to check pageIsViewControllabe(), but for now we're relying on
		// the route class & prefix checks before calling this in vB_Api_Route::canViewRouteOrPage()

		$userContext = vB::getUserContext($userid);
		$usergroupids = $userContext->fetchUserGroups();

		$assertor = vB::getDbAssertor();
		$check = $assertor->getRows('pageviewpermission', ['pageid' => $pageid], false, 'usergroupid');
		// Currently, we're only creating the `pageviewpermission` for pages that were explicitly prohibited for any usergroups
		// and the default behavior is to be permissive.
		// As such we're grabbing all records for the pageid, and if we have absolutely 0 records, that probably means that no
		// view customizations were made for this page.
		if (empty($check))
		{
			return true;
		}

		// We are intentionally NOT collapsing below checks with above as to maintain the different meanings of the checks.

		$anyPermissive = false;
		foreach ($usergroupids AS $__id)
		{
			// Here, if a usergroupid record is empty, it probably means the usergroup was created after the customization was made.
			// Let's make the default for that PROHIBITIVE, but we may change this in the future...
			if (!isset($check[$__id]))
			{
				continue;
			}
			else if ($check[$__id]['viewpermission'] == 1)
			{
				$anyPermissive = true;
				break;
			}
		}

		return $anyPermissive;
	}

	// Clean up associated records after a `page` record is deleted.
	private function postDeletePage(array $page)
	{
		vB5_Route::deleteRoute($page['routeid']);

		$assertor = vB::getDbAssertor();
		$check = $assertor->delete('pageviewpermission', ['pageid' => $page['pageid']]);
	}

	// Not sure if this is a great place for this function, but can't think of anywhere better
	// than maybe a new "frontend" focused class...
	public function convertNodeIdToPageNumber(int $nodeid, int $resultsPerPage, ?string $type, string $sort = 'ASC') : int
	{
		// calculate page number for canonical URL e.g. /16-awsome-thread/page3
		/** @var vB_Api_Search */
		$searchApi =  vB_Api::instanceInternal('search');

		/** @var vB_Library_Node */
		$nodeLib = vB_Library::instance('node');
		$nodeBare = $nodeLib->getNodeBare($nodeid);
		assert(!empty($nodeBare), 'Node not found for nodeid ' . $nodeid);
		if (empty($nodeBare))
		{
			return 0;
		}

		if ($nodeBare['starter'] == $nodeid)
		{
			$starterBare = $nodeBare;
		}
		else
		{
			$starterBare = $nodeLib->getNodeBare($nodeBare['starter']);
		}

		$type ??= '';
		$pagenumber = $searchApi->getPageNumber($nodeid, $starterBare, $resultsPerPage, 1, $sort, 1, $type);

		return $pagenumber;
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 117379 $
|| #######################################################################
\*=========================================================================*/
