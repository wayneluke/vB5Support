<?php if (!defined('VB_ENTRY')) die('Access denied.');
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Library_Nodevote
 *
 * @package vBLibrary
 * @access public
 */
class vB_Library_Paidsubscription extends vB_Library
{
	protected $subobj = null;


	protected function __construct()
	{
		parent::__construct();
		require_once(DIR . '/includes/class_paid_subscription.php');

		// Cache subscriptions
		$this->subobj = new vB_PaidSubscription();
		$this->subobj->cache_user_subscriptions();
	}

	public function getSubObject() : vB_PaidSubscription
	{
		return $this->subobj;
	}

	public function getSpecificSubcriptionObject($subscriptionid)
	{
		$sub = $this->subobj->subscriptioncache[$subscriptionid] ?? null;
		if (is_null($sub))
		{
			throw new vB_Exception_Api('payment_api_error');
		}

		$sub['newoptions'] = @unserialize($sub['newoptions'], ['allowed_classes' => false]);

		// There is also 'cost' that is serialized, but the sub object is historically passed into the
		// payment classes without fully unserializing everything and I don't want to try to detangle
		// that right now.

		return $sub;
	}

	public function convertArrayToPaidsubscriptionEntity(
		$vbsubscriptionid,
		$vbsubscription_subid,
		$timeAndCosts,
		$currency,
		$userid = 0,
		$vbhash = ''
	) : vB_Entity_Paidsubscription
	{
		$actualCost = $timeAndCosts[$vbsubscription_subid]['cost'][$currency] ?? null;
		if (is_null($actualCost))
		{
			throw new vB_Exception_Api('invalid_currency');
		}

		$vbsubscriptioninfo = vB_Entity_Paidsubscription::createFromArray([
			'cost' => $actualCost,
			'currency' => $currency,
			// time info
			'recurring' => $timeAndCosts[$vbsubscription_subid]['recurring'],
			'duration' => $timeAndCosts[$vbsubscription_subid]['length'],
			'duration_units' => $timeAndCosts[$vbsubscription_subid]['units'],
			// sub info
			'subscriptionid' => $vbsubscriptionid,
			'subscriptionsubid' => $vbsubscription_subid,
			// only present if this is for actual payment
			'userid' => $userid,
			'vbhash' => $vbhash,
		]);

		return $vbsubscriptioninfo;
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 106452 $
|| #######################################################################
\*=========================================================================*/
