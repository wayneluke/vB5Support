<?php if (!defined('VB_ENTRY')) die('Access denied.');
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

class vB_Notification_Moderator_ReportedPost extends vB_Notification_Moderator
{
	const TYPENAME = 'ReportedPost';

	protected static $triggers = [
		'node-reported-post' => 20,
	];

	protected $notifyBitfieldName = 'reportedpost';
	protected $emailBitfieldName = 'reportedpost';

	protected function overwriteRule()
	{
		return 'always';
	}

	final protected static function defineUnique($notificationData, $skipValidation)
	{
		$items = [];

		// sender (the user reporting a post)
		$items['senderid'] = (int) $notificationData['sender'];

		// the node for the report
		$items['sentbynodeid'] = (int) $notificationData['sentbynodeid'];

		return $items;
	}

	/**
	 * @see vB_Notification::fetchPhraseArray()
	 */
	public static function fetchPhraseArray($notificationData)
	{
		$customData = self::normalizeCustomData($notificationData['customdata']);

		$senderUrl = '';
		try
		{
			$senderUrl = vB5_Route::buildUrl('profile|fullurl', [
				'userid' => $notificationData['senderid'],
				'username' => $notificationData['sender_username'],
			]);
		}
		catch (Throwable $e){}

		$nodeUrl = '';
		try
		{
			$nodeUrl = vB5_Route::buildUrl('node|fullurl', [
				'nodeid' => $notificationData['sentbynodeid']
			]);
		}
		catch (Throwable $e){}

		$userid = $notificationData['sender'];
		$displayname_safe = vB_String::htmlSpecialCharsUni($notificationData['sender_displayname']);

		$phraseVarName = 'ab_reported_post_cd_reason_e';
		$phraseData = [
			$senderUrl,
			$displayname_safe,
			$nodeUrl,
			$notificationData['aboutstartertitle'],
			// we need to escape this because customdata.reason came directly from the report node's
			// `text`.`rawtext`.
			// `rawtext` is never safe regardless of channel permissions & `text`.`htmlstate`, and
			// must be escaped by the consumer if we're not rendering it through the parser.
			vB_String::htmlSpecialCharsUni($customData['reason']),
			$userid,
		];

		return [
			$phraseVarName,
			$phraseData,
		];
	}

	/**
	 * @see vB_Notification::renderEmailPhrases()
	 */
	public static function renderEmailPhrases($data)
	{
		$assertor = vB::getDbAssertor();
		$customData = self::normalizeCustomData($data['customdata']);
		$phraseAPI = vB_Api::instanceInternal('phrase');

		$nodeUrl = '';
		try
		{
			$nodeUrl = vB5_Route::buildUrl('node|fullurl', [
				'nodeid' => $data['sentbynodeid']
			]);
		}
		catch (Throwable $e){}

		if (!empty($data['sender']))
		{
			$senderLabel = vB_User::getEmailUserLabel($data['sender']);
		}
		else
		{
			$phrase = 'a_guest_cap';
			$sender = $phraseAPI->renderPhrasesNoShortcode([$phrase => $phrase], $data['languageid']);
			$senderLabel = $sender['phrases'][$phrase];
		}


		$title = '';
		if (!empty($data['aboutstartertitle']))
		{
			$title = $data['aboutstartertitle'];
		}
		else if (!empty($data['sentbynodeid']))
		{
			$node = $assertor->getRow('vBForum:node', ['nodeid' => $data['sentbynodeid']]);
			if (!empty($node['title']))
			{
				$title = $node['title'];
			}
			else
			{
				$node = $assertor->getRow('vBForum:node', ['nodeid' => $node['starter']]);
				if (!empty($node['title']))
				{
					$title = $node['title'];
				}
			}
		}


		$vboptions = vB::getDatastore()->getValue('options');
		$string = vB::getString();
		$bbtitle_escaped = $string->htmlspecialchars($vboptions['bbtitle']);

		$maildata = $phraseAPI->fetchEmailPhrases(
			'notification_reportedpost',
			[
				$string->htmlspecialchars($data['recipient_displayname']),
				$senderLabel,
				$nodeUrl,
				// Reason must be escaped in HTML because it comes from raw text (see note in fetchPhraseArray()).
				nl2br($string->htmlspecialchars($customData['reason'])),
				$bbtitle_escaped,
			],
			[vB_String::unHtmlSpecialChars($title)],
			$data['languageid']
		);

		return $maildata;
	}

	// override -- remove unrelated channel-mods.
	protected function populateUsersToNotify()
	{
		if ($this->usersToNotify === null)
		{
			parent::populateUsersToNotify();

			// This should've been set by the constructor, and sentbynodeid *should* have been passed in.
			$reportedNodeid = $this->notificationData['sentbynodeid'];

			// Only notify users who are relevant channel mods, or super moderators (all channels), or administrators.
			$relevantModerators = [];
			/** @var vB_Library_Node */
			$nodeLib = vB_Library::instance('node');
			$channelMods = $nodeLib->getNodeModerators($reportedNodeid);
			foreach ($channelMods AS $moderator)
			{
				$relevantModerators[$moderator['userid']] = $moderator['userid'];
			}

			// Fetch admins and super moderators
			$superModsAndAdmins = $nodeLib->getForumSupermoderatorsAdmins($relevantModerators);
			foreach ($superModsAndAdmins AS $moderator)
			{
				$relevantModerators[$moderator['userid']] = $moderator['userid'];
			}

			foreach ($this->usersToNotify['notify'][$this->notifyBitfieldName] AS $__userid => $__useridAgain)
			{
				if (!isset($relevantModerators[$__userid]))
				{
					unset($this->usersToNotify['notify'][$this->notifyBitfieldName][$__userid]);
				}
			}
			foreach ($this->usersToNotify['email'][$this->emailBitfieldName] AS $__userid => $__useridAgain)
			{
				if (!isset($relevantModerators[$__userid]))
				{
					unset($this->usersToNotify['email'][$this->emailBitfieldName][$__userid]);
				}
			}
		}


	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 116132 $
|| #######################################################################
\*=========================================================================*/
