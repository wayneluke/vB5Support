<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
* Class to do data save/delete operations for StyleVarDefinitions.
*
* @package	vBulletin
*/

class vB_DataManager_StyleVarDefn extends vB_DataManager
{
	/**
	* Array of recognized and required fields for attachment inserts
	*
	* @var	array
	*/
	protected $validfields = [
		'stylevarid'    => [vB_Cleaner::TYPE_STR,      vB_DataManager_Constants::REQ_YES],
		'styleid'       => [vB_Cleaner::TYPE_INT,      vB_DataManager_Constants::REQ_NO, vB_DataManager_Constants::VF_METHOD],
		'parentid'      => [vB_Cleaner::TYPE_INT,      vB_DataManager_Constants::REQ_YES, vB_DataManager_Constants::VF_METHOD],
		// 'parentlist'    => [vB_Cleaner::TYPE_STR,      vB_DataManager_Constants::REQ_AUTO, 'return preg_match(\'#^(\d+,]*-1$#\', $data);'),
		'parentlist'    => [vB_Cleaner::TYPE_STR,      vB_DataManager_Constants::REQ_NO],
		'stylevargroup' => [vB_Cleaner::TYPE_STR,		vB_DataManager_Constants::REQ_YES],
		'product'       => [vB_Cleaner::TYPE_STR,		vB_DataManager_Constants::REQ_YES,  vB_DataManager_Constants::VF_METHOD],
		'datatype'      => [vB_Cleaner::TYPE_STR,		vB_DataManager_Constants::REQ_YES,  vB_DataManager_Constants::VF_METHOD],
		'validation'    => [vB_Cleaner::TYPE_STR,		vB_DataManager_Constants::REQ_NO],
		'failsafe'      => [vB_Cleaner::TYPE_STR,		vB_DataManager_Constants::REQ_NO],
		'units'         => [vB_Cleaner::TYPE_STR,		vB_DataManager_Constants::REQ_NO,   vB_DataManager_Constants::VF_METHOD],
		'uneditable'    => [vB_Cleaner::TYPE_BOOL,		vB_DataManager_Constants::REQ_YES],
	];

	/**
	* The main table this class deals with
	*
	* @var	string
	*/
	protected $table = 'vBForum:stylevardfn';

	//we store data to the table name
	protected $stylevardfn = [];

	protected $datatype = 'Custom';

	protected $keyField = 'stylevarid';

	/**
	* Verifies that the parent style specified exists and is a valid parent for this style
	*
	* @param	integer	Parent style ID
	*
	* @return	boolean	Returns true if the parent id is valid, and the parent style specified exists
	*/
	public function verify_parentid(&$parentid)
	{
		if ($parentid == $this->fetch_field('styleid'))
		{
			$this->error('cant_parent_style_to_self');
			return false;
		}
		else if ($parentid <= 0)
		{
			$parentid = -1;
			return true;
		}
		$stylecache = vB_Library::instance('Style')->fetchStyles(false, false);
		if (!isset($stylecache["$parentid"]))
		{
			$this->error('invalid_style_specified');
			return false;
		}
		else if ($this->condition !== null)
		{
			return $this->is_substyle_of($this->fetch_field('styleid'), $parentid);
		}
		else
		{
			// no condition specified, so it's not an existing style...
			return true;
		}
	}

	protected function verify_styleid(&$data)
	{
		if ($data < -1)
		{
			$data = 0;
		}
		return true;
	}

	/**
	* Verifies that a given style parent id is not one of its own children
	*
	* @param	integer	The ID of the current style
	* @param	integer	The ID of the style's proposed parentid
	*
	* @return	boolean	Returns true if the children of the given parent style does not include the specified style... or something
	*/
	public function is_substyle_of($styleid, $parentid)
	{
		$stylecache = vB_Library::instance('Style')->fetchStyles(false, false);
		// TODO: TEST THIS FUNCTION!!!  Coded w/o testing or reference
		while (is_array($stylecache["$styleid"]))
		{
			$curstyle = $stylecache["$styleid"];
			if ($curstyle['parentid'] == $parentid)
			{
				return true;
			}
			if ($curstyle['parentid'] == -1)
			{
				break;
			}
			$styleid = $curstyle['parentid'];
		}
		$this->error('cant_parent_style_to_child');
		return false;
	}


	public function verify_product($product)
	{
		// check if longer than 25 chars, contains anything other than a-zA-Z1-0
		return (preg_match('#^[a-z0-9_]+$#s', $product) AND strlen($product) < 25);
	}

	public function verify_datatype($datatype)
	{
		$valid_datatypes = array(
			'numeric',
			'string',
			'color',
			'url',
			'path',
			'background',
			'imagedir',
			'fontlist',
			'textdecoration',
			'texttransform',
			'textalign',
			'dimension',
			'border',
			'padding',
			'margin',
			'font',
			'size',
			'boolean',
		);

		return in_array($datatype, $valid_datatypes);
	}

	public function verify_units($unit)
	{
		$valid_units = array(
			'',
			'%',
			'px',
			'pt',
			'em',
			'rem',
			'ch',
			'ex',
			'pc',
			'in',
			'cm',
			'mm',
			'vw',
			'vh',
			'vmin',
			'vmax',
		);

		return in_array($unit, $valid_units);
	}

	/**
	* Any checks to run immediately before saving. If returning false, the save will not take place.
	*
	* @param	boolean	Do the query?
	*
	* @return	boolean	True on success; false if an error occurred
	*/
	public function pre_save($doquery = true)
	{
		if ($this->presave_called !== null)
		{
			return $this->presave_called;
		}

		$return_value = true;
		// Legacy Hook 'stylevardfndata_presave' Removed //

		$this->presave_called = $return_value;
		return $return_value;
	}

	/**
	* Additional data to update after a save call (such as denormalized values in other tables).
	* In batch updates, is executed for each record updated.
	*
	* @param	boolean	Do the query?
	*/
	public function post_save_each($doquery = true)
	{
		// Legacy Hook 'stylevardfndata_postsave' Removed //
	}

	/**
	* Deletes a stylevardfn and its associated data from the database
	*/
	public function delete($doquery = true)
	{
		//this function isn't called, and hasn't worked for a very long time
		//this is an attempt to fix it but as there isn't anything that uses it there isn't really any
		//good way to test it.  This code hasn't actually been run.

		//might be better to move this to pre/post delete to color inside the lines.  But that
		//would require an unfortunate class variable to store the ids between the calls.
		//Would be more efficient to create a single query to delete both tables, but that
		//would require incorporating some of the checks from parent::delete here.
		$matchedids = $this->assertor->getColumn($table, 'stylevarid', $this->condition);

		$result = parent::delete($doquery);

		//the parent delete function deoesn't honor $doquery and while we *should* here
		//it's more important to be consistent with the parent behavior and I'm not fixing
		//that for this.
		if ($result AND ($doquery OR true))
		{
			$this->assertor->delete('stylevar', $matchedids);
		}

		return $result;
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 114568 $
|| #######################################################################
\*=========================================================================*/
