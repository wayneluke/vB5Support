<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

//this entire class should be consolidated to the user library and much of it made private to that class.
class vB_User
{
	use vB_Trait_NoSerialize;

	private static $strikeLimit = 10;


	protected static $users = [];
	/**
	 * Processes logins into CP
	 * THIS METHOD DOES NOT SET ANY COOKIES, SO IT CANNOT REPLACE DIRECTLY THE LEGACY FUNCTION
	 *
	 * @static
	 * @param array $auth -- userid/password (remembeme value)
	 * @param string $logintype Currently 'cplogin' only or empty
	 * @param string $cssprefs AdminCP css preferences array
	 * @return array The $auth parameter with the addition of
	 * 	sessionhash -- hash identifying the new session
	 * 	cpsessionhash -- the hash for the cp session (only present if the user is an admin or a mod)
	 * 	lastvisit -- session lastvisit
	 * 	lastactivity -- session lastactivity
	 */
	public static function processNewLogin($auth, $logintype = '')
	{
		$result = [];

		$session = vB::getCurrentSession();
		if ($session AND $session->isCreated() AND ($session->get('userid') == 0))
		{
			// if we just created a session on this page, there's no reason not to use it
			$newsession = $session;
			$newsession->set('userid', $auth['userid']);
		}
		else
		{
			$newsession = vB::getRequest()->createSessionForUser($auth['userid']);
		}

		$newsession->set('loggedin', 1);

		//not sure if this is needed, but it loads the user info as a side effect.
		$newsession->fetch_userinfo();
		vB::setCurrentSession($newsession);
		$result['sessionhash'] = $newsession->get('dbsessionhash');
		$result['lastvisit'] = $newsession->get('lastvisit');
		$result['lastactivity'] = $newsession->get('lastactivity');

		$usercontext = vB::getUserContext();

		//create the session hash if requested. And appropriate for the user.
		//note that we use the cplogin type for the inline mod problem
		//so we'll except either cplogin or modpclogin for either
		//admin or moderator.
		if (
			($logintype == 'cplogin' OR $logintype == 'modcplogin') AND
		 	($usercontext->isAdministrator() OR $usercontext->isModerator())
		)
		{
			$cpsession = $newsession->fetchCpsessionHash();
			$result['cpsession'] = $cpsession;
		}

		$newsession->processNewLogin();

		$result = array_merge($result, $auth);

		vB::getHooks()->invoke('hookProcessNewLogin', [
			'result' => &$result,
			'logintype' => $logintype,
			'cssprefs' => '',
			'userinfo' => $newsession->fetch_userinfo(),
		]);

		return $result;
	}

	public static function setAdminCss($userid, $cssprefs)
	{
		$assertor = vB::getDbAssertor();
		$usercontext = vB::getUserContext();

		// admin control panel or upgrade script login
		if ($usercontext->hasAdminPermission('cancontrolpanel'))
		{
			// empty cssprefs means use default per 'cpstylefolder' setting
			$admininfo = $assertor->getRow('vBForum:administrator', ['userid' => $userid]);
			if ($admininfo)
			{
				$admindm = new vB_DataManager_Admin(vB_DataManager_Constants::ERRTYPE_CP);
				$admindm->set_existing($admininfo);
				$admindm->set('cssprefs', $cssprefs);
				$admindm->save();
			}
		}
	}

	/**
	 * Verifies a security token is valid
	 *
	 * @param	string	Security token from the REQUEST data
	 * @param	string	Security token used in the hash
	 *
	 * @return	boolean	True if the hash matches and is within the correct TTL
	 */
	public static function verifySecurityToken($request_token, $user_token)
	{
		global $vbulletin;

		if (!$request_token)
		{
			return false;
		}

		$parts = explode('-', $request_token);
		// $request_token can be 'guest' and not have 2 parts.
		// if it doesn't have the $time & $token parts, we can't really verify anything, so let's return false
		if (count($parts) < 2)
		{
			return false;
		}
		else
		{
			list($time, $token) = $parts;
		}

		if ($token !== sha1($time . $user_token))
		{
			return false;
		}

		// A token is only valid for 3 hours
		if ($time <= vB::getRequest()->getTimeNow() - 10800)
		{
			$vbulletin->GPC['securitytoken'] = 'timeout';
			return false;
		}

		return true;
	}

	/**
	 * Logs the current user out
	 *
	 * This function does not remove the session cookies
	 *
	 * @param int|null  $userid             Optional. If not provided, current user will be logged out.
	 * @param bool $alsoLogOutApiClients    Optional, default false. If true, also clear MAPI client sessions.
	 *
	 * @return array{success:bool, sessionhash:string, apiaccesstoken:string}
	 *	sessionhash -- hash identifying the new session, if logging out the current user.
	 *	apiaccesstoken -- the current api access token, if logging out the current user and this is a request through MAPI
	 */
	public static function processLogout(?int $userid = null, bool $alsoLogOutApiClients = false) : array
	{
		$assertor = vB::getDbAssertor();
		$session = vB::getCurrentSession();
		$sessionUserInfo = $session->fetch_userinfo();

		if ($userid)
		{
			$userinfo = self::fetchUserinfo($userid);
			assert(!empty($userinfo['userid']));
		}
		else
		{
			$userinfo = $sessionUserInfo;
			$userid = $userinfo['userid'];
		}

		$timeNow = vB::getRequest()->getTimeNow();
		$options = vB::getDatastore()->getValue('options');

		if ($userinfo['userid'] AND $userinfo['userid'] != -1)
		{
			// init user data manager
			$userdata = new vB_DataManager_User(vB_DataManager_Constants::ERRTYPE_SILENT);
			$userdata->set_existing($userinfo);
			$userdata->set('lastactivity', $timeNow - $options['cookietimeout']);
			$userdata->set('lastvisit', $timeNow);
			$userdata->save();

			//Not entirely clear why we always log out from all sessions when logging out from one
			//(though "remember me" won't be affected so not sure most people logged in multiple locations
			//are really going to notice.  Even less clear why we exempt MAPI sessions from this.
			$sessionConditions = [
				'userid' => $userinfo['userid'],
			];
			// Keep legacy behavior for normal logout -- don't touch MAPI sessions
			if (!$alsoLogOutApiClients)
			{
				$sessionConditions['apiaccesstoken'] = '';
			}

			$assertor->delete('session', $sessionConditions);
			$assertor->delete('cpsession', ['userid' => $userinfo['userid']]);
		}

		$assertor->delete('session', ['sessionhash' => $session->get('dbsessionhash')]);

		$result = [
			'success' => true,
		];
		if ($sessionUserInfo['userid'] == $userid)
		{
			if ($session->isCreated())
			{
				// if we just created a session on this page, there's no reason not to use it
				$newsession = $session;

				// Note for logoutAllDevices() -- Since I think iscreated() is only true for the single request that created a whole
				// new session, I don't think the client browser would have received relevant cookies (sessionhash) yet. As such I
				// don't think we necessarily need to re-reset this session for the logout all case.
			}
			else
			{
				$newsession = vB_Session::getNewSession(vB::getDbAssertor(), vB::getDatastore(), vB::getConfig(), '', 0, '', $session->get('styleid'));
			}

			$newsession->set('userid', 0);
			$newsession->set('loggedin', 0);

			$newsession->processLogout();
			vB::setCurrentSession($newsession);
			$result['sessionhash'] = $newsession->get('dbsessionhash');
			$result['apiaccesstoken'] = $newsession->get('apiaccesstoken');
		}
		else
		{
			// These are unused for logging out someone else.
			$result['sessionhash'] = '';
			$result['apiaccesstoken'] = '';
		}


		vB::getHooks()->invoke('hookProcessLogout', [
			'result' => &$result,
			'userinfo' => $userinfo,
			'currentUserinfo' => $sessionUserInfo,
		]);

		return $result;
	}

	/**
	 * Verifies that the user hasn't exceeded the strike total
	 * for attempted logins.  Based both on user name and IP address.
	 *
	 * @param string $username
	 */
	public static function verifyStrikeStatus($username = '')
	{
		$assertor = vB::getDbAssertor();
		$request = vB::getRequest();

		$assertor->delete('vBForum:strikes', [
			['field' => 'striketime', 'value' => ($request->getTimeNow() - 3600), 'operator' => vB_dB_Query::OPERATOR_LT]
		]);

		if (!vB::getDatastore()->getOption('usestrikesystem'))
		{
			return 0;
		}

		$strikes = $assertor->getRow('user_fetchstrikes', self::getIpCondition($request->getIpAddress()));
		if ($strikes['strikes'] >= self::$strikeLimit AND $strikes['lasttime'] > ($request->getTimeNow() - 900))
		{
			//they've got it wrong more than the limit times or greater for any username at the moment
			//the user is still not giving up so lets keep increasing this marker
			self::execStrikeUser($username);
			return [false, false];
		}

		return [$strikes['strikes'], self::$strikeLimit];
	}

	public static function execStrikeUser($username = '')
	{
		$assertor = vB::getDbAssertor();
		$request = vB::getRequest();

		$options = vB::getDatastore()->getValue('options');

		if (!$options['usestrikesystem'])
		{
			return 0;
		}

		$strikeip = $request->getIpAddress();
		$ipFields = vB_Ip::getIpFields($strikeip);

		$ipCondition = self::getIpCondition(vB::getRequest()->getIpAddress());

		if (!empty($username))
		{
			// This seems like we're assuming username is UNescaped for the `strikes` table, but then assume username is already escaped
			// for the `user` table. From what I can tell the only caller passes in escaped usernames so this is double escaped here.
			// I guess as long as all passes into `strikes` is consistently double-escaped here & execStrikeUser(), this is OK, but this
			// just does not look right.
			$condition = $ipCondition;
			$condition[vB_dB_Query::TYPE_KEY] = vB_dB_Query::QUERY_COUNT;
			$condition['username'] = vB_String::htmlSpecialCharsUni($username);
			$strikes_user = $assertor->getRow('vBForum:strikes', $condition);

			if ($strikes_user['count'] == (self::$strikeLimit -1))  // We're about to add the last strike for a user
			{
				$user = $assertor->getRow('user', [
					vB_dB_Query::CONDITIONS_KEY => [
						'username' => $username,
						['field' => 'usergroupid', 'value' => 3, 'operator' => vB_dB_Query::OPERATOR_NE],
					]
				]);

				if ($user)
				{
					$ip = $request->getIpAddress();
					$string = vB::getString();
					$displayname_safe = $string->htmlspecialchars($user['displayname']);
					$bbtitle_escaped = $string->htmlspecialchars($options['bbtitle']);

					$maildata = vB_Api::instanceInternal('phrase')->fetchEmailPhrases(
						'accountlocked',
						[
							$displayname_safe,
							$bbtitle_escaped,
							$ip,
							self::$strikeLimit,
						],
						[$options['bbtitle']],
						$user['languageid']
					);
					// Account security email, skip vbmailWithUnsubscribe() & isUserOptedOutOfEmail()
					vB_Mail::vbmail2($user['email'], $maildata['subject'], $maildata['message'], true);
				}
			}
		}

		$condition = $ipCondition;
		$condition['striketime'] = $request->getTimeNow();
		$condition['strikeip'] = $strikeip;
		$condition['username'] = vB_String::htmlSpecialCharsUni($username);
		$assertor->insert('vBForum:strikes', $condition);
	}

	public static function execUnstrikeUser($username)
	{
		$condition = self::getIpCondition(vB::getRequest()->getIpAddress());
		$condition['username'] = vB_String::htmlSpecialCharsUni($username);
		vB::getDbAssertor()->delete('vBForum:strikes', $condition);
	}

	private static function getIpCondition($ip)
	{
		$ipFields = vB_Ip::getIpFields($ip);
		return [
			'ip_4' => vB_dB_Type_UInt::instance($ipFields['ip_4']),
			'ip_3' => vB_dB_Type_UInt::instance($ipFields['ip_3']),
			'ip_2' => vB_dB_Type_UInt::instance($ipFields['ip_2']),
			'ip_1' => vB_dB_Type_UInt::instance($ipFields['ip_1']),
		];
	}

	/**
	* Fetches an array containing info for the specified user, or false if user is not found
	*
	* Values for Option parameter:
	* avatar - Get avatar
	* admin - Join the administrator table to get various admin options
	* signpic - Join the sigpic table to get the userid just to check if we have a picture
	* usercss - Get user's custom CSS
	* isfriend - Is the logged in User a friend of this person?
	* Therefore: ['avatar', 'location'] means 'Get avatar' and 'Process online location'
	*
	* @param integer User ID
	* @param array Fetch Option (see description)
	* @param integer Language ID. If set to 0, it will use user-set languageid (if exists) or default languageid
	* @param boolean If true, the method won't use user cache but fetch information from DB.
	*
	* @return array The information for the requested user
	*/
	public static function fetchUserinfo($userid = 0, $option = [], $languageid = false, $nocache = false)
	{
		$datastore = vB::getDatastore();

		sort($option);

		//this differs from the cache key we use for the FAST cache for no apparent reason
		//we should probably use one or the other consistently.  Both caches are transitory
		//so we should be able to make the change without upgrade concerns (though it is
		//also not clear why we have both caches).
		//Though if we alter the fast cache key we need to make sure we catch all of the places
		//that use it.
		if (!empty($option))
		{
			$optionKey = implode('-', $option);
		}
		else
		{
			$optionKey = '#';
		}

		$session = vB::getCurrentSession();
		if ($session)
		{
			$currentUserId = $session->get('userid');
			if ($currentUserId AND !$userid)
			{
				$userid = $currentUserId;
			}
		}

		$userid = intval($userid);

		if (!$userid AND $session)
		{
			// return guest user info
			$guestInfo = $session->fetch_userinfo();

			//we can be a guest in an "admin" context if we are trying to log into the control panels.
			if (in_array(vB_Api_User::USERINFO_ADMIN, $option) AND empty($guestInfo['cssprefs']))
			{
				$vboptions = $datastore->getValue('options');
				$guestInfo['cssprefs'] = $vboptions['cpstylefolder'];
			}

			return $guestInfo;
		}

		if ($languageid === false)
		{
			if (!empty($session))
			{
				$languageid = $session->get('languageid');
			}
			else
			{
				$languageid = vB::getDatastore()->getOption('languageid');
			}
		}

		if ($nocache AND isset(self::$users[$userid][$optionKey]))
		{
			// clear the cache if we are looking at ourself and need to add one of the JOINS to our information.
			unset(self::$users[$userid][$optionKey]);
		}

		// return the cached result if it exists
		if (isset(self::$users[$userid][$optionKey]))
		{
			return self::$users[$userid][$optionKey];
		}

		$cache = vB_Cache::instance(vB_Cache::CACHE_FAST);
		$hashKey = self::getUserCacheKey($userid, $option, $languageid);

		if (!$nocache)
		{
			$user = $cache->read($hashKey);
		}

		if (empty($user))
		{
			$users = self::getBaseUsers($userid, $option);

			if (empty($users))
			{
				return false;
			}
			$user = reset($users);
			$cache->write($hashKey, $user, 1440, 'userChg_' . $userid);
		}

		$user['languageid'] = (!empty($languageid) ? $languageid : $user['languageid']);

		// decipher 'options' bitfield
		self::expandOptions($user);

		// make a username variable that is safe to pass through URL links
		$user['urlusername'] = urlencode(unhtmlspecialchars($user['username']));

		self::fetchMusername($user);

		// get the user's real styleid (not the cookie value)
		$user['realstyleid'] = $user['styleid'];

		$request = vB::getRequest();

		if ($request)
		{
			$timenow = vB::getRequest()->getTimeNow();
		}
		else
		{
			$timenow = time();
		}

		//should only happen during upgrades from before we had the secret field.
		if(!isset($user['secret']))
		{
			$user['secret'] = '';
		}

		$user['securitytoken_raw'] = sha1($user['userid'] . sha1($user['secret']) . sha1(vB_Request_Web::$COOKIE_SALT));
		$user['securitytoken'] = $timenow . '-' . sha1($timenow . $user['securitytoken_raw']);

		$user['logouthash'] =& $user['securitytoken'];

		// privacy_options
		if (isset($user['privacy_options']) AND $user['privacy_options'])
		{
			$user['privacy_options'] = unserialize($user['privacy_options']);
		}

		// VBV-11898 - Ignore secondary usergroups if allowmembergroups is set to "No." If any page requires the full membergroupids
		// regardless of the usergroup option (ex. adminCP user profile), they should call vB_Library_User->fetchUserGroups()
		$bf_ugp_genericoptions = $datastore->getValue('bf_ugp_genericoptions');
		$usergroupCache = $datastore->getValue('usergroupcache');
		if (!($usergroupCache[$user['usergroupid']]['genericoptions'] & $bf_ugp_genericoptions['allowmembergroups']))
		{
			$user['membergroupids'] = '';
		}

		//the interval in seconds to add to a time in the user's timezone to get to the server timezone
		$user['servertimediff'] = self::calcUsertimeDiff($user);

		//this shouldn't happen, but if it does bad things will happen downstream.  So let's try to catch it here
		if(empty($user['location']))
		{
			$user['location'] = 'UNKNOWN';
		}

		//make sure some string values aren't null
		$user['ignorelist'] = strval($user['ignorelist']);
		$user['buddylist'] = strval($user['buddylist']);

		self::censorUserData($user);
		self::cacheUserLocal($userid, $optionKey, $user);
		return $user;
	}

	private static function censorUserData(&$userInfo)
	{
		if(isset($userInfo['status']))
		{
			$userInfo['rawstatus'] = $userInfo['status'];
			$userInfo['status'] = vB_String::fetchCensoredText($userInfo['status']);
		}
	}

	public static function getUserCacheKey($userid, $option, $languageid)
	{
		$hashKey = 'vb_UserInfo_' . $userid;
		if ($languageid)
		{
			$hashKey .= '_' . $languageid;
		}

		if ($option)
		{
			sort($option);
			$hashKey .= '_' . md5(serialize($option));
		}

		return $hashKey;
	}

	//this doesn't do *any* caching and shouldn't.  It's intended to consoldiate some logic
	//where we call the fetchUserinfo query and do different things with it.  In particular
	//caching to the vb_UserInfo_ should come from this function/query to ensure that the
	//various places that rely on the cache all agree on what it contains.  We really need to
	//get a better handle on what fields are part of the user array in which configurations
	//and consolidate the various ways/places we are caching that information.
	public static function getBaseUsers($userids, $option)
	{
		$datastore = vB::getDatastore();

		$users = vB::getDbAssertor()->getRows('fetchUserinfo', [
			'userid'     => $userids,
			'option'     => $option,
		], false, 'userid');

		if (!$users)
		{
			return [];
		}

		foreach($users AS &$user)
		{
			if (!is_numeric($user['timezoneoffset']))
			{
				$user['timezoneoffset'] = 0;
			}

			// This calculation comes up *a lot*.  Just do it once and store it.
			$bf_misc_useroptions = $datastore->getValue('bf_misc_useroptions');
			$user['realtimezoneoffset'] = $user['timezoneoffset'];
			if ($user['options'] | $bf_misc_useroptions['dstonoff'])
			{
				$user['realtimezoneoffset']++;
			}

			// Ensure we output a valid value for startofweek
			if ($user['startofweek'] < 1 OR $user['startofweek'] > 7)
			{
				// In vB4, this defaulted to -1 meaning to use the startofweek
				// that was set for the calendar they were viewing. That concept
				// doesn't translate to vB5, so we'll default to Sunday.
				$user['startofweek'] = 1;
			}

			if (in_array(vB_Api_User::USERINFO_ADMIN, $option) AND empty($user['cssprefs']))
			{
				$user['cssprefs'] = $datastore->getOption('cpstylefolder');
			}

			// If we're in an upgrade, we may hit a case where we have to access user displayname from an existing user table BEFORE
			// we've added the displayname column and copied the unescaped username into the displayname (for example, for the session
			// object before we hit 500a1 steps). For that case, just set up the expected default values so things like channel imports
			// ETC work without errors during the upgrade.
			if (!isset($user['displayname']))
			{
				$user['displayname'] = vB_String::unHtmlSpecialChars($user['username']);
			}
		}

		return $users;
	}

	public static function expandOptions(&$user)
	{
		$datastore = vB::getDatastore();
		$bf_misc_useroptions = $datastore->getValue('bf_misc_useroptions');
		$bf_misc_adminoptions = $datastore->getValue('bf_misc_adminoptions');

		if (!empty($bf_misc_useroptions) AND isset($user['options']))
		{
			//should we also do this with adminoptions?  The code I pulled this from doesn't.
			$user['options'] = intval($user['options']);

			foreach ($bf_misc_useroptions AS $optionname => $optionval)
			{
				$user[$optionname] = ($user['options'] & $optionval ? 1 : 0);
			}
		}

		if (!empty($bf_misc_adminoptions) AND isset($user['adminoptions']))
		{
			foreach($bf_misc_adminoptions AS $optionname => $optionval)
			{
				$user[$optionname] = ($user['adminoptions'] & $optionval ? 1 : 0);
			}
		}

	}

	private static function cacheUserLocal($userid, $optionKey, $user)
	{
		if (!isset(self::$users[$userid]))
		{
			self::$users[$userid] = [];
		}
		self::$users[$userid][$optionKey] = $user;
	}

	public static function calcUsertimeDiff($userinfo)
	{
		$tzoffset = (int) $userinfo['timezoneoffset'];
		if ($userinfo['dstonoff'])
		{
			// DST is on, add an hour
			$tzoffset++;
		}

		return date('Z', vB::getRequest()->getTimeNow()) - ($tzoffset * 3600);
	}

	/**
	 * fetches the proper username markup and title
	 *
	 * @param array $user (ref) User info array
	 * @param string $displaygroupfield Name of the field representing displaygroupid in the User info array
	 * @param string $usernamefield Name of the field representing username in the User info array
	 *
	 * @return string Username with markup and title
	 */
	public static function fetchMusername(&$user, $displaygroupfield = 'displaygroupid', $usernamefield = 'displayname')
	{
		if (!empty($user['musername']))
		{
			// function already been called
			return $user['musername'];
		}

		switch ($usernamefield)
		{
			// display name is not stored escaped, so must escape for render here since we have actual
			// html in the "m" part.
			case 'displayname':
				$username = vB_String::htmlSpecialCharsUni($user['displayname'] ?? '');
				break;
			case 'username':
			default:
				$username = $user[$usernamefield] ?? $user['username'];
				break;
		}

		$datastore = vB::getDatastore();
		$usergroupcache = $datastore->getValue('usergroupcache');
		$bf_ugp_genericoptions = $datastore->getValue('bf_ugp_genericoptions');

		//if we don't have this then we're probably in the installer, but most of the logic
		//is going to fall over in weird ways.  Let's default to ... something.
		if($usergroupcache)
		{
			if (!empty($user['infractiongroupid']) AND $usergroupcache["$user[usergroupid]"]['genericoptions'] & $bf_ugp_genericoptions['isnotbannedgroup'])
			{
				$displaygroupfield = 'infractiongroupid';
			}

			if (isset($user[$displaygroupfield], $usergroupcache[$user[$displaygroupfield]]) AND $user[$displaygroupfield] > 0)
			{
				// use $displaygroupid
				$displaygroupid = $user[$displaygroupfield];
			}
			else if (isset($usergroupcache[$user['usergroupid']]) AND $user['usergroupid'] > 0)
			{
				// use primary usergroupid
				$displaygroupid = $user['usergroupid'];
			}
			else
			{
				// use guest usergroup
				$displaygroupid = 1;
			}

			$user['musername'] = $usergroupcache["$displaygroupid"]['opentag'] . $username . $usergroupcache["$displaygroupid"]['closetag'];
			$user['displaygrouptitle'] = $usergroupcache["$displaygroupid"]['title'];
			$user['displayusertitle'] = $usergroupcache["$displaygroupid"]['usertitle'];
		}
		else
		{
			$displaygroupfield = 'displaygroupid';
			$user['musername'] = $username;
		}

		if ($displaygroupfield == 'infractiongroupid' AND $usertitle = $usergroupcache[$user[$displaygroupfield]]['usertitle'])
		{
			$user['usertitle'] = $usertitle;
		}
		else if (isset($user['customtitle']) AND $user['customtitle'] == 2)
		{
			$user['usertitle'] = function_exists('htmlspecialchars_uni') ? htmlspecialchars_uni($user['usertitle']) : htmlspecialchars($user['usertitle']);
		}

		return $user['musername'];
	}

	/**
	 * This grants a user additional permissions in a specific channel, by adding to the groupintopic table
	 *
	 *	@param	int
	 *	@param	mixed	integer or array of integers
	 * 	@param	int
	 *
	 *	@return	bool
	 */
	public static function setGroupInTopic($userid, $nodeids, $usergroupid)
	{
		//check the data.
		if (!is_numeric($userid) OR !is_numeric($usergroupid))
		{
			throw new vB_Exception_Api('invalid_data');
		}

		if (!is_array($nodeids))
		{
			$nodeids = [$nodeids];
		}
		else
		{
			$nodeids = array_unique($nodeids);
		}

		//We don't do a permission check. It's essential that the api's do that before calling here.

		//let's get the current channels in which the user already is set for that group.
		//Then remove any for which they already are set.
		$assertor = vB::getDbAssertor();
		$existing = $assertor->assertQuery('vBForum:groupintopic', ['userid' => $userid, 'groupid' => $usergroupid]);
		foreach ($existing as $permission)
		{
			$index = array_search($permission['nodeid'] , $nodeids);

			if ($index !== false)
			{
				unset($nodeids[$index]);
			}
		}

		//and do the inserts
		foreach ($nodeids as $nodeid)
		{
			$assertor->assertQuery('vBForum:groupintopic', [
				vB_dB_Query::TYPE_KEY => vB_dB_Query::QUERY_INSERT,
				'userid' => $userid,
				'nodeid' => $nodeid,
				'groupid' => $usergroupid
			]);
		}

		vB_Cache::allCacheEvent(["userPerms_$userid", "userChg_$userid", "followChg_$userid", "sgMemberChg_$userid"]);
		vB_Api::instanceInternal('user')->clearChannelPerms($userid);
		vB::getUserContext($userid)->reloadGroupInTopic();
		vB::getUserContext()->clearChannelPermissions();

		//if we got here all is well.
		return true;
	}

	/**
	 * Clears user cached information.
	 */
	public static function clearUsersCache($userid)
	{
		$userid = intval($userid);
		self::$users[$userid] = null;
		vB_Cache::instance(vB_Cache::CACHE_FAST)->event('userChg_' . $userid);
	}

	/**
	 * Obtains user info depending on the login credentials method.
	 * @param $credential
	 * @return mixed
	 */
	public static function getUserInfoByCredential($credential)
	{
		$assertor = vB::getDbAssertor();
		$vboptions = vB::getDatastore()->getValue('options');
		$loginType = intval($vboptions['logintype']);

		$columnsToObtain = ['email', 'username', 'userid', 'token', 'scheme', 'rememberme_secret',];
		switch($loginType)
		{
			case 0:
				$data = $assertor->getRows('user', [
					vB_dB_Query::COLUMNS_KEY => $columnsToObtain,
					vB_dB_Query::PARAM_LIMIT => 1,
					'email' => $credential
				]);
				break;
			case 1:
				$data = $assertor->getRows('user', [
					vB_dB_Query::COLUMNS_KEY => $columnsToObtain,
					vB_dB_Query::PARAM_LIMIT => 1,
					'username' => $credential
				]);
				break;
			case 2:

				$data = $assertor->getRows('user', [
					vB_dB_Query::COLUMNS_KEY => $columnsToObtain,
					vB_dB_Query::PARAM_LIMIT => 1,
					'username' => $credential
				]);

				if($data == null || count($data) == 0)
				{
					$data = $assertor->getRows('user', [
						vB_dB_Query::COLUMNS_KEY => $columnsToObtain,
						vB_dB_Query::PARAM_LIMIT => 1,
						'email' => $credential
					]);
				}
				break;
		}

		if(is_array($data) && !empty($data))
		{
			$userData = $data[0];
		}
		else
		{
			$userData = null;
		}

		return $userData;
	}

	/**
	 * Generate the user label for use in emails. E.g. "Display Name (username)". Note, this returns
	 * html-escaped data for use in html emails.
	 *
	 * @param int|array   $userOrId   Either int userid or array with 'username' and 'displayname'.
	 * @return string
	 */
	public static function getEmailUserLabel($userOrId)
	{
		if (is_array($userOrId))
		{
			$userinfo = $userOrId;
		}
		else
		{
			$userinfo = self::fetchUserinfo(intval($userOrId));
		}

		if (self::doShowDisplaynameAndUsername($userinfo))
		{
			return vB_String::htmlSpecialCharsUni($userinfo['displayname']) . ' (' . $userinfo['username'] . ')';
		}
		else
		{
			return vB_String::htmlSpecialCharsUni($userinfo['displayname']);
		}
	}

	/**
	 * Returns true if enabledisplayname is on or if enabledisplayname is off but username & displayname
	 * are not equivalent. Used for templates that cannot run certain functions required perform this check.
	 *
	 * @param array $user User info array, e.g. from fetchUserinfo()
	 * @return bool
	 */
	public static function doShowDisplaynameAndUsername($user)
	{
		/*
		If this option is off, chances are most users' username & displayname will be the same
		unless the admin specifically set the displayname to be different. Don't bother showing
		both unless we need to disambugate. Note that even if this is removed, the profile URL
		will still show a form of the username.
		 */
		$enabledisplayname = vB::getDatastore()->getOption('enabledisplayname');
		$usernameIsDisplayname = $user['username'] == vB_String::htmlSpecialCharsUni($user['displayname']);

		return ($enabledisplayname OR !$usernameIsDisplayname);
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 117495 $
|| #######################################################################
\*=========================================================================*/
