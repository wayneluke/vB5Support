<?php if (!defined('VB_ENTRY')) die('Access denied.');
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Api_Route
 *
 * @package vBApi
 * @access public
 */
class vB_Api_Route extends vB_Api
{
	protected $whitelistRoute = [
		'admincp',
		'auth/login',
	];

	// Generated in the library, these (canonical) prefixes always allow viewing even without channel permissions
	private $alwaysAllowedPrefixes = [];
	// Generated in the library, these prefixes are excluded from page view permission controls, and usually always
	// allow viewing, or has other controls relevant to the specific page in play (e.g. usergroup permissions,
	// channel permissions). Always contains $alwaysAllowedPrefixes as a subset.
	private $excludeFromPageViewPerms = [];

	protected $disableWhiteList = ['getRoute', 'getUrls', 'preloadRoutes'];

	protected function __construct()
	{
		parent::__construct();

		vB::getHooks()->invoke('hookSetRouteWhitelist', [
			'whitelistRoute' => &$this->whitelistRoute,
		]);

		/** @var vB_Library_Route */
		$lib = vB_Library::instance('route');
		$this->alwaysAllowedPrefixes = $lib->getAlwaysAllowedPrefixes();
		$this->excludeFromPageViewPerms = $lib->getPageViewPermissionExcludedPrefixes();
	}

	/**
	 * Return a list of route => nodeid that should always give a no permission error if directly viewed.
	 *
	 * @return array<string, int>
	 */
	private function getSpecialRoutes()
	{
		// Routes that should always give
		// a no permission error if directly viewed
		// They are mostly Top Level special channels

		/** @var vB_Library_Content_Channel */
		$channelLib = vB_Library::instance('content_channel');
		$specialChannel = $channelLib->fetchChannelIdByGUID(vB_Channel::DEFAULT_CHANNEL_PARENT);
		$reportChannel = $channelLib->fetchChannelIdByGUID(vB_Channel::REPORT_CHANNEL);
		return [
			'special' => $specialChannel,
			'special/reports' => $reportChannel,
		];
	}

	/**
	 * Returns a matching route if available for $pathInfo
	 *
	 * @param string $pathInfo
	 * @param string $queryString
	 * @return vB_Frontend_Route
	 */
	public function getRoute($pathInfo, $queryString, $anchor = '')
	{
		static $closed;

		// clean the path if necessary
		$parsed = vB_String::parseUrl($pathInfo);
		$pathInfo = $parsed['path'];

		// check for any querystring to append
		if (!empty($parsed['query']))
		{
			if (!empty($queryString))
			{
				$queryString = $parsed['query'] . '&' . $queryString;
			}
			else
			{
				$queryString = $parsed['query'];
			}
		}

		if (empty($anchor) AND (!empty($parsed['anchor'])))
		{
			$anchor = $parsed['anchor'];
		}

		$route = null;

		//Check for standard routes.
		if (is_string($pathInfo))
		{
			$common = vB5_Route::fetchCommonRoutes();

			if (isset($common[$pathInfo]))
			{
				//See if we have a match
				// pattern matching is case-insensitive
				$pattern = '#^' . $common[$pathInfo]['regex'] . '(?:/)?$#i';

				if (preg_match($pattern, $pathInfo, $matches))
				{
					$className = vB5_Route::DEFAULT_CLASS;
					if(!empty($common[$pathInfo]['class']) AND class_exists($common[$pathInfo]['class']))
					{
						$className = $common[$pathInfo]['class'];
					}

					if ((!empty($common[$pathInfo]['arguments'])))
					{
						$common[$pathInfo]['arguments'] = unserialize($common[$pathInfo]['arguments']);
					}

					try
					{
						$route = new $className($common[$pathInfo], $matches, $queryString, $anchor);
					}
					catch (vB_Exception $ex)
					{
						return $this->handleRouteExceptions($ex);
					}
				}
			}

		}

		if ((!isset($route)))
		{
			// calculate prefixes set
			$prefixes = vB5_Route::getPrefixSet($pathInfo);
			// get matching routes
			$result = vB::getDbAssertor()->assertQuery('get_best_routes', ['prefix' => $prefixes]);

			if (in_array($result->db()->errno, $result->db()->getCriticalErrors()))
			{
				throw new Exception ('no_vb5_database');
			}

			$prefixMatches = [];

			foreach ($result AS $route)
			{
				if (($unserialized = @unserialize($route['arguments'])) !== false)
				{
					$route['arguments'] = $unserialized;
				}
				else
				{
					$route['arguments'] = [];
				}
				$prefixMatches[$route['routeid']] = $route;
			}
			unset($route);
		}

		// check for banned
		$bannedInfo = vB_Library::instance('user')->fetchBannedInfo(false);

		// get best route
		try
		{
			if (!isset($route))
			{
				$route = vB5_Route::selectBestRoute($pathInfo, $queryString, $anchor, $prefixMatches);
			}

			vB::getHooks()->invoke('hookGetRouteMain', [
				'pathInfo' => $pathInfo,
				'queryString' => $queryString,
				'anchor' => $anchor,
				'route' => &$route,
			]);

			if ($route)
			{
				// Check if forum is closed
				$routeInfo = [
					'routeguid' => $route->getRouteGuid(),
					'controller' => $route->getController(),
					'action' => $route->getAction(),
					'arguments' => $route->getArguments(),
				];

				$segments = $route->getRouteSegments();
				$cleanedRoute = implode('/', $segments);

				$specialRoutes = $this->getSpecialRoutes();
				if(
					isset($specialRoutes[$cleanedRoute]) OR
					// This is to handle accessing the special or report channel directly when using routebynode option.
					$cleanedRoute == 'node' AND in_array($routeInfo['arguments']['nodeid'] ?? -1, $specialRoutes)
				)
				{
					return ['no_permission' => 1];
				}


				//Always allow login and access to the admincp, even if closed.
				if (!in_array($cleanedRoute, $this->whitelistRoute))
				{
					if (!isset($closed))
					{
						if (vB_Cache::instance(vB_Cache::CACHE_FAST)->isLoaded('vB_State_checkBeforeView'))
						{
							$closed = vB_Cache::instance(vB_Cache::CACHE_FAST)->read('vB_State_checkBeforeView');
						}
						else
						{
							$closed = vB_Api::instanceInternal('state')->checkBeforeView($routeInfo);
						}
					}

					if ($closed !== false)
					{
						return ['forum_closed' => $closed['msg']];
					}
				}

				if ($bannedInfo['isbanned'])
				{
					return ['banned_info' => $bannedInfo];
				}

				if (!$this->canViewRouteOrPage($route))
				{
					return ['no_permission' => 1];
				}


				if (is_array($route) AND (isset($route['no_permission']) OR isset($route['internal_error'])))
				{
					return $route;
				}

				//get the canonical route.  We use this to get the canonical url. Also if the canonical route
				//is different from the route then we'll use that instead to process the page. This allows a route
				//to delegate url creation to a different route (to provide an alternative url scheme) and for that
				//route to pass back to the original once the route matching occurs on page load.
				$canonicalRoute = $route->getCanonicalRoute(); // will be false if route doesn't have implementation
				if ($canonicalRoute)
				{
					$canonicalUrl = $canonicalRoute->getFullUrl();
					$canonicalUrl = str_replace('&amp;', '&', $canonicalUrl);
				}
				else
				{
					$canonicalUrl = false;
					$canonicalRoute = $route;
				}

				//if our route class doesn't define a canonical url then just assume that $pathInfo is it.
				$canonicalPathInfo = ($canonicalUrl !== false) ? vB_String::parseUrl($canonicalUrl, PHP_URL_PATH) : $pathInfo;
				$canonicalParam = $route->getCanonicalQueryParameters();
				if ($canonicalPathInfo AND $canonicalPathInfo[0] == '/')
				{
					$canonicalPathInfo = substr($canonicalPathInfo, 1);
				}

				$queryParams = $route->getQueryParameters();
				$routeId =  $route->getRouteId();
				// return routeid even for 301 redirects. Certain callers expect
				// this function to return the routeid in order to write a cache record

				if ($redirectId = $route->getRedirect301())
				{
					return [
						'routeid' => $routeId,
						'redirect' => vB5_Route::buildUrl($redirectId, $route->getArguments(), $queryParams, $route->getAnchor()),
						'redirectRouteId' => $redirectId
					];
				}
				else if ($pathInfo != $canonicalPathInfo OR ($canonicalParam !== false AND $queryParams != $canonicalParam))
				{
					//hack, but sometimes we add the anchor, sometimes we don't in the route.  So don't add it
					//if it's already there.  Really we should consistantly add it to the canonical url when it
					//is needed and not do anything here.  But digging that out is too risky right now
					$hashtag = '';
					if (isset($queryParams['p']) AND strpos($canonicalUrl, '#post') === false)
					{
						// some browers do not preserve fragment during redirects, VBV-10255
						$hashtag = '#post' . $queryParams['p'];
					}

					return [
						'routeid' => $routeId,
						'redirect' => $canonicalUrl . $hashtag,
						'redirectRouteId' => $canonicalRoute->getRouteId(),
					];
				}
				else
				{
					return [
						'routeid'         => $canonicalRoute->getRouteId(),
						'routeguid'       => $canonicalRoute->getRouteGuid(),
						'controller'      => $canonicalRoute->getController(),
						'action'          => $canonicalRoute->getAction(),
						'template'        => $canonicalRoute->getTemplate(),
						'arguments'       => $canonicalRoute->getArguments(),
						'queryParameters' => $canonicalRoute->getQueryParameters(),
						'pageKey'         => $canonicalRoute->getPageKey(),
						'userAction'      => $canonicalRoute->getUserAction(),
						'breadcrumbs'     => $canonicalRoute->getBreadcrumbs(),
						'headlinks'       => $canonicalRoute->getHeadLinks(),
					];
				}
			}
			else
			{
				return false;
			}
		}

		//this is bad.  An API method should *not* be returning a php object of any sort.
		//Need to determine if this catch block is even appropriate.
		catch (vB_Exception $ex)
		{
			return $this->handleRouteExceptions($ex);
		}
	}

	private function canViewRouteOrPage($route) : bool
	{
		$canonicalPrefix = $route->getCanonicalPrefix();
		if (in_array($canonicalPrefix, $this->alwaysAllowedPrefixes))
		{
			return true;
		}

		$prefix = $route->getPrefix();
		$arguments = $route->getArguments();
		if ($prefix == 'admincp' OR $prefix == 'modcp')
		{
			// do nothing really, just allow passage
			return true;
		}
		else if ($prefix == 'ajax')
		{
			$allowedOptions = [
				'/api/contactus/sendMail',
				'/api/hv/generateToken',
			];
			if (isset($arguments['route']) AND in_array($arguments['route'], $allowedOptions))
			{
				return true;
			}
		}

		// Keep these checks in sync with vB_Library_Page::pageIsViewControllable(). Currently keeping the
		// checks separate to save an extra query on every page load that the method would incur.
		if (is_a($route, 'vB5_Route_Page', false))
		{
			// going with the canonical prefix check instead of prefix check since that's what
			// we're doing for the whitelistPrefix check above...
			$skipCheck = (in_array($canonicalPrefix, $this->excludeFromPageViewPerms));
			if (!$skipCheck)
			{
				$pageid = $arguments['pageid'] ?? 0;
				if ($pageid)
				{
					/** @var vB_Library_Page */
					$pageLib = vB_Library::instance('page');
					$userid = vB::getCurrentSession()->get('userid');
					$check = $pageLib->canViewPage($pageid, $userid);
					return $check;
				}
			}
			else if (!empty($arguments['channelid']) OR !empty($arguments['nodeid']))
			{
				//$nodeidToCheck = $arguments['channelid'] ?? $arguments['nodeid'];
				// TODO: check channel perms instead of MAIN_CHANNEL perm later.
				// Known affected pages are blogs, articles, social-groups
			}
		}

		// I feel like this should check the specific channel associated with the route instead of just the main channel...
		// However, it's not trivial to suddenly open this up for forums that might have been depending on this behavior.
		// Not that in getRoute(), before this is called, the route construction would've already checked the specific
		// channel for vB5_Route_Channel routes
		$channelid = vB_Api::instanceInternal('content_channel')->fetchChannelIdByGUID(vB_Channel::MAIN_CHANNEL);
		if (!vB::getUserContext()->getChannelPermission('forumpermissions', 'canview', $channelid) )
		{
			return false;
		}

		return true;
	}

	public function getRouteByIdent($ident)
	{
		$route = vB5_Route::getRouteByIdent($ident);

		//mimic as much as possible the return from get route.  We don't have all of the params
		//because we don't actually have a url here and thus aren't instantiating the class.
		return [
			'routeid'         => $route['routeid'],
			'routeguid'       => $route['guid'],
			'controller'      => $route['controller'],
			'action'          => $route['action'],
			'template'        => $route['template'],
			'arguments'       => $route['arguments'],
		];
	}

	/*
	 *	This function emulates the exception catch behavior of the old route generation
	 */
	protected function handleRouteExceptions(Exception $ex)
	{
		if ($ex instanceof vB_Exception_NodePermission)
		{
			// check for banned
			$bannedInfo = vB_Library::instance('user')->fetchBannedInfo(false);
			if (!$bannedInfo['isbanned'])
			{
				return ['no_permission' => 1];
			}
			else
			{
				return ['banned_info' => $bannedInfo];
			}
		}
		elseif ($ex instanceof vB_Exception_Api)
		{
			return [
				'internal_error' => $ex
			];
		}
		elseif ($ex instanceof vB_Exception_404)
		{
			// we want to return a 404
			return false;
		}

		throw $ex;
	}

	/**
	 * Returns the route id for the generic conversation route
	 * @param int $channelId
	 * @return int
	 */
	public function getChannelConversationRoute($channelId)
	{
		if(empty($channelId))
		{
			return false;
		}

		$route = vB5_Route::getChannelConversationRouteInfo($channelId);

		if(empty($route))
		{
			return false;
		}

		return $route['routeid'];
	}

	/**
	 * Get fullURL of a node. It appends frontendurl to the relative node route.
	 *
	 * @param int $nodeid Node ID
	 * @param array $data Additional route data for the node
	 * @param array $extra Extra data for the route
	 *
	 * @return string Node's URL
	 */
	public function getAbsoluteNodeUrl($nodeid, $data = [], $extra = [])
	{
		$node = vB_Api::instanceInternal('node')->getNode($nodeid);
		$data = array_merge($data, ['nodeid' => $node['nodeid']]);

		return $this->getUrl($node['routeid'] . '|fullurl', $data, $extra);
	}

	/**
	 * Get URL of a node
	 *
	 * @param int $nodeid Node ID
	 * @param array $data Additional route data for the node
	 * @param array $extra Extra data for the route
	 *
	 * @return string Node's URL
	 */
	public function getNodeUrl($nodeid, $data = [], $extra = [])
	{
		$node = vB_Api::instanceInternal('node')->getNode($nodeid);

		$data = array_merge($data, ['nodeid' => $node['nodeid']]);

		return $this->getUrl($node['routeid'], $data, $extra);
	}

	/**
	 * Returns one URL
	 *
	 * @param mixed $route
	 * @param array $data
	 * @param array $extra
	 * @param array $anchor
	 * @return string	Always in UTF-8. If vB_String::getCharset() is not utf-8, it's percent encoded.
	 */
	public function getUrl($route, array $data = [], array $extra = [], $anchor = '')
	{
		return vB5_Route::buildUrl($route, $data, $extra, $anchor);
	}

	/**
	 * get the urls in one batch
	 * @param array $URLInfoList has to contain the route, data and extra
	 * @return array URLs built based on the input
	 */
	public function getUrls($URLInfoList)
	{
		return vB5_Route::buildUrls($URLInfoList);
	}
	/**
	 *	get a unique hash
	 * @param mixed $route
	 * @param array $data
	 * @param array $extra
	 * @return string
	 */
	public function getHash($route, array $data, array $extra)
	{
		return vB5_Route::getHash($route, $data, $extra);
	}

	/**
	 * Preloads a list of routes to reduce database traffic
	 *
	 * @param	mixed	array of route ids- can be integers or strings.
	 */
	public function preloadRoutes($routeIds)
	{
		return vB5_Route::preloadRoutes($routeIds);
	}

	/**
	 * Returns the URL for the legacy postid
	 * @param int $postId
	 * @return mixed
	 */
	public function fetchLegacyPostUrl($postId)
	{
		$nodeInfo = vB::getDbAssertor()->getRow('vBForum:fetchLegacyPostIds', [
			'oldids' => $postId,
			'postContentTypeId' => vB_Types::instance()->getContentTypeID('vBForum_Post'),
		]);

		if ($nodeInfo)
		{
			return vB5_Route::buildUrl('node|fullurl', $nodeInfo);
		}
		else
		{
			return false;
		}
	}

	/**
	 * Returns the URL for the legacy threadid
	 * @param int $threadId
	 * @return mixed
	 */
	public function fetchLegacyThreadUrl($threadId)
	{
		$nodeInfo = vB::getDbAssertor()->getRow('vBForum:node', [
			vB_dB_Query::TYPE_KEY => vB_dB_Query::QUERY_SELECT,
			vB_dB_Query::COLUMNS_KEY => ['nodeid', 'starter', 'routeid'],
			vB_dB_Query::CONDITIONS_KEY => [
				'oldid' => $threadId,
				'oldcontenttypeid' => vB_Types::instance()->getContentTypeID('vBForum_Thread')
			]
		]);

		if ($nodeInfo)
		{
			return vB5_Route::buildUrl('node|fullurl', $nodeInfo);
		}
		else
		{
			return false;
		}
	}

	/**
	 * Sets a route as the home page route. Note, this is currently only for use in the "Quick Setup"
	 * Sitebuilder Panel's home page switching tool (to switch between the 3 default homepages).
	 *
	 * @param int routeid
	 */
	public function setAsHomeRoute($routeid)
	{
		$this->checkHasAdminPermission('canusesitebuilder');

		$data = ['ishomeroute' => 1];

		$routeid = vB5_Route::updateRoute($routeid, $data);

		/*
		Notably, this API method does not handle adding / updating the navbar. We MAY want to do that
		but we won't know how to handle the "revert" in that case as we don't keep a history of the
		old navbar anywhere.
		 */

		return ['success' => true, 'routeid' => $routeid];
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 117855 $
|| #######################################################################
\*=========================================================================*/
