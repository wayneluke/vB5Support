<?php if (!defined('VB_ENTRY')) die('Access denied.');
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Api_Userrank
 *
 * @package vBApi
 * @access public
 */
class vB_Api_Userrank extends vB_Api
{
	/**
	 * Fetch Userrank By RankID
	 *
	 * @param int $rankid Rank ID
	 * @return array User rank information
	 */
	public function fetchById($rankid)
	{
		$this->checkHasAdminPermission('canadminusers');
		return vB_Library::instance('userrank')->fetchById($rankid);
	}

	/**
	 * Fetch All user ranks
	 *
	 * @return array Array of user ranks
	 */
	public function fetchAll()
	{
		$this->checkHasAdminPermission('canadminusers');
		return vB_Library::instance('userrank')->fetchAll();
	}

	/**
	 * Insert a new user rank or update existing user rank
	 *
	 * @param array $data User rank data to be inserted or updated
	 *              'active'              => Bool Active.
	 *              'grouping'            => String Grouping tag
	 *              'priority'            => Int Priority for grouped user ranks
	 *              'ranklevel'           => Int Number of times to repeat rank
	 *              'usergroupid'         => Int Usergroup
	 *              'minposts'            => Int Minimum Posts
	 *              'startedtopics'       => Int Minimum Topics
	 *              'registrationtime'    => Int Minimum time since registration, in seconds
	 *              'reputation'          => Int Minimum Reputation Level
	 *              'totallikes'          => Int Minimum Likes from other users
	 *              'stack'               => Bool Stack Rank.
	 *              'display'             => 0|1 Display Type. 0 - Always, 1 - If Displaygroup = This Group
	 *              'rankimg'             => String User Rank File Path
	 *              'rankhtml'            => String User Rank HTML Text
	 * @param int $rankid If not 0, it's the ID of the user rank to be updated
	 *
	 * @return int New rank's ID or updated rank's ID
	 */
	public function save($data, $rankid = 0)
	{
		$this->checkHasAdminPermission('canadminusers');
		return vB_Library::instance('userrank')->save($data, $rankid);
	}

	/**
	 * Delete an user rank
	 *
	 * @param int $rankid The ID of user rank to be deleted
	 * @return array -- standard success array
	 */
	public function delete($rankid)
	{
		$this->checkHasAdminPermission('canadminusers');
		vB_Library::instance('userrank')->delete($rankid);
		return ['success' => true];
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 116506 $
|| #######################################################################
\*=========================================================================*/
