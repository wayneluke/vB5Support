<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Api_Wol
 * Who is online API
 *
 * @package vBApi
 */
class vB_Api_Wol extends vB_Api
{
	private $onlineusers = [];

	/**
	 * Register an online action
	 * Example:
	 *   vB_Api::instanceInternal('Wol')->register('viewing_x', [['nodeid', $nodeid]]);
	 *
	 * @param string $action
	 * @param array $params Parameters of the action
	 *        It's an array of parameters that will be used in the phrase
	 *        The key of a parameter is the index-1 of a phrase brace var
	 *        The value of a parameter may be a string which will directly replace brance var
	 *        Other types of id may be added later
	 * @param string $pagekey Pagekey of the page where the user is
	 * @param int $nodeid Node ID of the node being viewed
	 *
	 * @return array -- standard success array.
	 */
	public function register($action, $params = [], $pagekey = '',  $location = '', $nodeid = 0)
	{
		$session = vB::getCurrentSession();;

		$session->set('wol', ['action' => $action, 'params' => $params, 'nodeid' => $nodeid]);
		$session->set('pagekey', $pagekey);
		$session->set('location', $location);

		return ['success' => true];
	}

	/**
	 * Fetch who is online records
	 *
	 * @param string $pagekey Fetch users who are only on the page with this pagekey
	 * @param string $who Show 'members', 'guests', 'spiders' or all ('')
	 * @param int $pagenumber
	 * @param int $perpage
	 * @param string $sortfield
	 * @param string $sortorder
	 * @return array Who is online information
	 */
	public function fetchAll($pagekey = '', $who = '', $pagenumber = 1, $perpage = 200, $sortfield = 'time', $sortorder = 'desc', $resolveIp = false)
	{
		//allow access to this function to everybody since basic information is widely displayed.
		//we'll restrict the information based on what people are actually allowed to see.

		$nodeApi = vB_Api::instance('Node');
		$datastore = vB::getDatastore();
		$bf_misc_useroptions = $datastore->getValue('bf_misc_useroptions');

		// check permissions
		$currentUserContext = vB::getUserContext();
		$canSeeIp = $currentUserContext->hasPermission('wolpermissions', 'canwhosonlineip');
		$canViewFull = $currentUserContext->hasPermission('wolpermissions', 'canwhosonlinefull');
		$canViewBad = $currentUserContext->hasPermission('wolpermissions', 'canwhosonlinebad');
		$canViewlocationUser = $currentUserContext->hasPermission('wolpermissions', 'canwhosonlinelocation');
		$canWhosOnline = $currentUserContext->hasPermission('wolpermissions', 'canwhosonline');

		//The documentation says guest, the fetchCount function uses 'guests' but the query previously
		//used 'guest'.  Let's quietly accept that for backwards compatibility but consider it deprecated.
		if ($who == 'guest')
		{
			$who = 'guests';
		}

		//There are a lot of potentially invalid page/perpage values and at some point we have to rely on the caller to not do stupid
		//things.  On the other hand, we probably want to make sure the limit values are valid SQL
		if ($perpage < 0)
		{
			$perpage = 200;
		}

		$pagenumber = max(1, $pagenumber);

		$data = [
			'who' => $who,
			'cutoff' => vB::getRequest()->getTimeNow() - $datastore->getOption('cookietimeout'),
			'sortfield' => $sortfield,
			'sortorder' => $sortorder,
			vB_dB_Query::PARAM_LIMIT => $perpage,
			vB_dB_Query::PARAM_LIMITSTART => ($pagenumber - 1) * $perpage,
		];

		if ($pagekey)
		{
			$data['pagekey'] = $pagekey;
		}

		$allusers = vB::getDbAssertor()->assertQuery('fetchWolAllUsers', $data);

		// $onlineUsers -> temp array to hold the info on already added users to the totalOnline array
		// $totalOnline -> This is the array we return in which we keep the ordering from the query we executed
		$onlineUsers = [];
		$totalOnline = [];
		$i = 0;
		foreach ($allusers AS $userRecord)
		{
			$userRecord = array_merge($userRecord, convert_bits_to_array($userRecord['options'] , $bf_misc_useroptions));
			$resolved = false;

			if ($userRecord['invisible'])
			{
				if (!($currentUserContext->hasPermission('genericpermissions', 'canseehidden') OR $userRecord['userid'] == vB::getCurrentSession()->fetch_userinfo_value('userid')))
				{
					continue;
				}
			}

			if (
				(
					$userRecord['userid'] > 0
					AND
					(
						empty($onlineUsers[$userRecord['userid']])
						OR
						(isset($onlineUsers[$userRecord['userid']]) AND $onlineUsers[$userRecord['userid']]['lastactivity'] < $userRecord['lastactivity'])
					)
				)
				OR
				$userRecord['userid'] == 0
			)
			{
				// Note: I think this check isn't complete. It says we want the most recent record, which is presumably why we compared the lastactivity,
				// but since we always skip here if $onlineUsers is set, we actually don't overwrite with the most recent record if the $sortorder ever changes.
				// It's probably not noticeable usually because of the default sorting by lastactivity DESC.
				//We only want the most recent record
				if (($userRecord['userid'] > 0) AND isset($onlineUsers[$userRecord['userid']]))
				{
					continue;
				}

				// basic info used by the homepage What's Going On module
				$user = [
					'username' => $userRecord['username'],
					'displayname' => $userRecord['displayname'],
					'musername' => vB_Api::instanceInternal('User')->fetchMusername($userRecord),
					'userid' => $userRecord['userid'],
					'posts' => $userRecord['posts'],
					'enable_pmchat' => $userRecord['enable_pmchat'],
					'receivepm' => $userRecord['receivepm'],
					'location' => '',
					'useragent' => '',
					'wol' => [],
					// Add a flag so the presentation layer can add an invisible marker
					// (If we got here either the this user isn't invisbile or the current user is allowed to know they are)
					'invisible' => (bool) $userRecord['invisible'],
				];

				// add additional info used by the Who's Online (/online) page
				if ($canWhosOnline)
				{
					$user['lastactivity'] = $userRecord['lastactivity'];
					$user['joindate'] = $userRecord['joindate'];

					if ($canSeeIp)
					{
						if ($resolveIp)
						{
							$user['host'] = @gethostbyaddr($userRecord['host']);
						}
						else
						{
							$user['host'] = $userRecord['host'];
						}

						$user['useragent'] = $userRecord['useragent'];
					}

					if ($canViewBad)
					{
						$user['bad'] =  $userRecord['badlocation'];
					}

					$wol = vb_unserialize_array($userRecord['wol']);
					if (!empty($wol['action']))
					{
						if ($canViewFull)
						{
							$user['wol'] = $wol;
						}
						else
						{
							$user['wol']['action'] = $wol['action'];
							$user['wol']['params'] = $wol['params'] ?? [];
						}

						// check to see if the viewing user can view the target node
						// for this online user's location and wol action.
						// If not, don't show it.
						if (!empty($wol['nodeid']))
						{
							// can this user view the node?
							$node = $nodeApi->getNode($wol['nodeid']);
							if (!empty($node['errors']))
							{
								$user['wol'] = [];
								$user['location'] = '';
							}
						}
					}

					if ($canViewlocationUser)
					{
						$user['location'] = $userRecord['location'];
					}
				}

				// We need the avatars as per the wireframes
				// We should batch this and possibly restore the avatar fetch in the base query as part of that
				// to avoid additional queries (fetchAvatars appears to have an option to use existing raw data).
				$user['avatar']  = vB_Api::instanceInternal('user')->fetchAvatar($user['userid']);

				if (!$user['username'])
				{
					$phrase = vB_Api::instanceInternal('phrase')->fetch('guest');
					$user['username'] = $phrase['guest'];
				}

				$resolved = true;
			}

			if ($user['userid'] == 0)
			{
				// Add the guest in the totalOnline array and increase the counter $i
				$totalOnline[$i] = $user;
				$i++;
			}
			else if ($resolved)
			{
				// if we find this user already in the onlineUsers array, we overwrite the record in the totalOnline array
				// and we dont touch the counter $i
				if (isset($onlineUsers[$user['userid']]))
				{
					$totalOnline[$onlineUsers[$user['userid']]['totalid']] = $user;
				}
				else
				// If no record found we add the counter info to the user array and add it to the totelOnline array.
				// And increase the counter $i
				{
					$totalOnline[$i] = $user;
					$user['totalid'] = $i;
					$onlineUsers[$user['userid']] = $user;
					$i++;
				}
				// We don't want to set lastactivity in $user unless currently viewing user can view who's online (apparently).
				// However, we should track the latest lastactivity on $onlineusers so that the other if check above works.
				// I'm guessing that there can be multiple session records fetched for a single user and we want to show the
				// most recent info.
				$onlineUsers[$user['userid']]['lastactivity'] = $userRecord['lastactivity'];
			}
		}

		return $totalOnline;
	}

	public function refreshUsers(
		$pagekey = '',
		$who = '',
		$pagenumber = 1,
		$perpage = 0,
		$sortfield = 'time',
		$sortorder = 'desc',
		$resolveIp = false,
		$pageRouteId = null
	)
	{
		$result = [];

		$onlineUsers = $this->fetchAll($pagekey, $who, $pagenumber, $perpage, $sortfield , $sortorder, $resolveIp);

		$showIP = false;
		foreach ($onlineUsers AS $onlineUser)
		{
			if (!empty($onlineUser['host']))
			{
				$showIP = true;
			}
		}

		$onlineUserCounts = $this->fetchCounts($pagekey);
		$totalMembers = $who == 'members' ? $onlineUserCounts['members'] : $onlineUserCounts['total'];

		$pageRouteInfo = [];
		if ($pageRouteId)
		{
			$routeInfo = vB5_Route::getRouteByIdent($pageRouteId);
			$pageRouteInfo = [
				'routeId' => $routeInfo['routeid'],
				'arguments' => [
					'pageid' => $routeInfo['arguments']['pageid'],
					'contentid' => $routeInfo['contentid'],
				],
				'queryParameters' => [],
			];
		}

		$template = new vB5_Template('onlineuser_details');
		$template->register('onlineUsers', $onlineUsers);
		$template->register('showIP', $showIP);
		$template->register('totalMembers', $totalMembers);
		$template->register('pagenumber', $pagenumber);
		$template->register('perpage', $perpage);
		$template->register('pageRouteInfo', $pageRouteInfo);
		$template = $template->render();

		$userCounts = $this->fetchCounts($pagekey);

		$result['template'] = $template;
		$result['userCounts'] = $userCounts;
		return $result;
	}


	/**
	 * Fetch online user counts
	 *
	 * @param string $pagekey Fetch users who are only on the page with this pagekey
	 * @return array
	 * 	total int -- all users
	 *	members int -- members only
	 * 	guests int => guests only
	 *	recordusers int -- most users ever
	 *	maxonlinedate int -- Date the most ever user occurred as timestamp
	 *	recorddate string -- date as string (deprecated)
	 *	recordtime string -- time as string (deprecated)
	 */
	public function fetchCounts($pagekey = '')
	{
		$db = vB::getDbAssertor();
		$datastore = vB::getDatastore();

		if ($pagekey)
		{
			$members = $db->getField('fetchWolCount', ['pagekey' => $pagekey, 'who' => 'members']);
			$guests =  $db->getField('fetchWolCount', ['pagekey' => $pagekey, 'who' => 'guests']);
		}
		else
		{
			$members = $db->getField('fetchWolCount', ['who' => 'members']);
			$guests = $db->getField('fetchWolCount', ['who' => 'guests']);
		}

		$vboptions = $datastore->getValue('options');

		//the datastore item may not yet exist.  If not default to something that
		//we can use until we properly create it.
		$maxloggedin = $datastore->getValue('maxloggedin');
		if (!$maxloggedin)
		{
			$maxloggedin = [
				'maxonline' => 0,
				'maxonlinedate' => 0,
			];
		}

		$totalonline = $members + $guests;

		// Update max loggedin users
		if (intval($maxloggedin['maxonline']) <= $totalonline)
		{
			$maxloggedin['maxonline'] = $totalonline;
			$maxloggedin['maxonlinedate'] = vB::getRequest()->getTimeNow();
			build_datastore('maxloggedin', serialize($maxloggedin), 1);
		}

		$recordusers = vb_number_format($maxloggedin['maxonline']);
		$recorddate = vbdate($vboptions['dateformat'], $maxloggedin['maxonlinedate']);
		$recordtime = vbdate($vboptions['timeformat'], $maxloggedin['maxonlinedate']);

		return [
			'total' => $members + $guests,
			'members' => $members,
			'guests' => $guests,
			'recordusers' => $recordusers,
			'maxonlinedate' => $maxloggedin['maxonlinedate'],
			'recorddate' => $recorddate,
			'recordtime' => $recordtime,
		];
	}

	public static function buildSpiderList()
	{
		$spiders = [
			'spiderstring' => '',
			'agents' => [],
		];

		$files = vB_Library::instance('product')->loadProductXmlList('spiders');
		foreach ($files AS $file)
		{
			$xmlobj = new vB_XML_Parser(false, $file);
			$spiderdata = $xmlobj->parse();

			if (is_array($spiderdata['spider']))
			{
				foreach ($spiderdata['spider'] AS $spiderling)
				{
					$identlower = strtolower($spiderling['ident']);
					$spiders['agents'][$identlower]['name'] = $spiderling['name'];
					$spiders['agents'][$identlower]['type'] = $spiderling['type'] ?? '';

					if (!empty($spiderling['addresses']['address']) AND is_array($spiderling['addresses']['address']))
					{
						$addresses = $spiderling['addresses']['address'];
						if (empty($addresses[0]))
						{
							$addresses = [$addresses];
						}

						foreach ($addresses AS $key => $address)
						{
							if (in_array($address['type'], ['range', 'single', 'CIDR']))
							{
								$address['type'] = strtolower($address['type']);

								switch($address['type'])
								{
									case 'single':
										$ip2long = ip2long($address['value']);
										if ($ip2long != -1 AND $ip2long !== false)
										{
											$spiders['agents']["$identlower"]['lookup'][] = array(
												'startip' => $ip2long,
											);
										}
										break;

									case 'range':
										$ips = explode('-', $address['value']);
										$startip = ip2long(trim($ips[0]));
										$endip = ip2long(trim($ips[1]));
										if ($startip != -1 AND $startip !== false AND $endip != -1 AND $endip !== false AND $startip <= $endip)
										{
											$spiders['agents']["$identlower"]['lookup'][] = array(
												'startip' => $startip,
												'endip'   => $endip,
											);
										}
										break;

									case 'cidr':
										$ipsplit = explode('/', $address['value']);
										$startip = ip2long($ipsplit[0]);
										$mask = $ipsplit[1];
										if ($startip != -1 AND $startip !== false AND $mask <= 31 AND $mask >= 0)
										{
											$hostbits = 32 - $mask;
											$hosts = pow(2, $hostbits) - 1; // Number of specified IPs
											$endip = $startip + $hosts;
											$spiders['agents']["$identlower"]['lookup'][] = array(
												'startip' => $startip,
												'endip'   => $endip,
											);
										}
										break;
								}
							}
						}
					}

					$spiders['spiderstring'] .= ($spiders['spiderstring'] ? '|' : '') . preg_quote($spiderling['ident'], '#');
				}
			}

			unset($spiderdata, $xmlobj);
		}

		vB::getDatastore()->build('spiders', serialize($spiders), 1);

		return vB::getDatastore()->getValue('spiders');
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 116044 $
|| #######################################################################
\*=========================================================================*/
