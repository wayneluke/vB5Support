<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * vB_Api_Socialgroup
 *
 * @package vBApi
 */
class vB_Api_SocialGroup extends vB_Api_Blog
{

	protected $sgChannel = false;

	/**
	 * @uses fetch the id of the global Social Group Channel
	 * @return int nodeid of actual Main Social Group Channel
	 */
	public function getSGChannel()
	{
		return vB_Library::instance('node')->getSGChannel();
	}

	public function getMembersCount($nodeid)
	{
		$node = vB_Api::instanceInternal('node')->getNode($nodeid, true, false);
		if (!intval($nodeid) OR !$this->isSGNode($nodeid, $node))
		{
			throw new vB_Exception_Api('invalid_node_id');
		}

		return $this->doMembersCount($nodeid);
	}

	/**
	 * Determines if the given node is a blog-related node (blog entry).
	 *
	 * @param	int	$nodeid
	 * @return	bool
	 */
	public function isSGNode($nodeId, $node = false)
	{
		$nodeId = (int) $nodeId;

		if ($nodeId < 0)
		{
			return false;
		}

		$sgChannelId = (int) $this->getSGChannel();

		if (empty($node))
		{
			$nodeLib = vB_Library::instance('node');
			$node = $nodeLib->getNode($nodeId, true, false);
		}

		if (!empty($node['parents']))
		{
			$parents = $node['parents'];
		}
		else
		{
			$nodeLib = vB_Library::instance('node');
			$parents = $nodeLib->getParents($nodeId);
		}

		if (is_numeric(current($parents)))
		{
			return in_array($sgChannelId, $parents);
		}

		foreach ($parents as $parent)
		{

			if ($parent['nodeid'] == $sgChannelId)
			{
				return true;
			}
		}
		return false;
	}

	/**
	 * Determines if the given node is a Social group channel.
	 *
	 * @param	int	$nodeid
	 * @return	bool
	 */
	public function isSGChannel($nodeid)
	{
		if (!intval($nodeid))
		{
			return false;
		}
		$nodeInfo = vB_Api::instance('node')->getNodeContent($nodeid);
		if ($this->isSGNode($nodeid)
			AND ($nodeInfo[$nodeid]['contenttypeid'] == vB_Types::instance()->getContentTypeId('vBForum_Channel')))
		{
			return true;
		}
		return false;
	}

	/**
	 * gets Get info on every SG Channel
	 *
	 *	@param	array	Array of options to filter the info (used to show all/my groups).
	 *	@param	array	Array of route info of the social group parent channel to be used for building pagination URLs.
 	 * 	@return mixed 	Array containing the social group channel info we need.
	 */
	public function getSGInfo($options = [], $routeInfo = [])
	{
		$db = vB::getDbAssertor();
		$nodeApi = vB_Api::instanceInternal('node');

		$sgParentChannel = $this->getSGChannel();
		if (!empty($options['sgparent']) AND intval($options['sgparent']) AND (intval($options['sgparent'] != $sgParentChannel)))
		{
			$sgParent = intval($options['sgparent']);
			$depth = 1;
		}
		else
		{
			$sgParent = $sgParentChannel;
			$depth = 2;
		}

		// category check
		if (!$this->isSGNode($sgParent))
		{
			throw new vB_Exception_Api('invalid_sg_parent');
		}

		//Get base data
		$channelContentType = vB_Types::instance()->getContentTypeId('vBForum_Channel');
		$params = [
			'starter_only' => 1,
			'view' => 'activity',
			'depth_exact' => 1,
			'nolimit' => 1,
		];
		$queryParams = ['sgParentChannel' => $sgParent, 'depth' => $depth];

		// userid=<userid> will retrieve the users owned channels
		if (!empty($options['userid']))
		{
			$queryParams['userid'] = $params['userid'] = intval($options['userid']);
		}

		// my_channels=<userid> will retrieve the users owned channels
		// all other channels they are a member of
		if (!empty($options['my_channels']))
		{
			// send my_channels: {type: group} to the search engine
			$params['my_channels'] = 'group';
			// send the userid to the totalcount query
			$queryParams['my_channels'] = intval($options['my_channels']);
		}

		// sort
		$sortField = 'title';
		$sortOrder = 'asc';
		if (!empty($options['sort_field']) AND in_array($options['sort_field'], ['title', 'textcount', 'lastcontent', 'created'], true))
		{
			$sortField = (string) $options['sort_field'];
			if (!empty($options['sort_order']) AND in_array($options['sort_order'], ['asc', 'desc'], true))
			{
				$sortOrder = (string) $options['sort_order'];
			}
		}
		$params['sort'] = [$sortField => $sortOrder];

		$page = (!empty($options['page']) AND intval($options['page'])) ? intval($options['page']) : 1;
		$perpage = (!empty($options['perpage']) AND intval($options['perpage'])) ? intval($options['perpage']) : 20;

		//for display purposes, we set totalpages to 1 even if there are no records because we don't want the UI to display Page 1 of 0
		$emptyresult = [
			'results' => [],
			'totalcount' => 0,
			'pageInfo' => [
				'currentpage' => $page,
				'perpage' => $perpage,
				'nexturl' => '',
				'prevurl' => '',
				'totalpages' => 1,
				'totalrecords' => 0,
				'sgparent' => $sgParent,
			]
		];

		$userContext = vB::getUserContext();
 		if (!$userContext->hasPermission('socialgrouppermissions', 'canviewgroups'))
		{
			//this follows the previous behavior of more or less returning a failed result when the user
			//doesn't have permission but the prior logic was complete nonsense so it's not clear that
			//even the general goal of it was correct.  Not making radical changes under "first do no harm"
			//but it might make more sense to throw "no_permission" here.
			return $emptyresult;
		}

		$cacheParams = array_merge($params,
			[
				'page' => $page,
				'perpage' => $perpage,
				'sgparent' => $sgParent,
				'depth' => $depth,
			]
		);

		$fastCache = vB_Cache::instance(vB_Cache::CACHE_FAST);
		$cacheKey = 'sgResults_' . intval($userContext->fetchUserId()) . crc32(serialize($cacheParams));
		if ($result = $fastCache->read($cacheKey))
		{
			//we don't cache the pagination URLs as they may vary for the same content depending on the specified routeInfo (routeId, arguments, queryParameters)
			$pageInfo = $result['pageInfo'];
			$paginationURLs = $this->buildPaginationURLs($pageInfo['currentpage'], $pageInfo['totalpages'], $routeInfo);
			if ($paginationURLs)
			{
				$pageInfo = array_merge($pageInfo, $paginationURLs);
				$result['pageInfo'] = $pageInfo;
			}

			return $result;
		}

		// pull the groups for this page and the total count
		$nodeContent = $nodeApi->listNodeContent($sgParent, $page, $perpage, $depth, $channelContentType, $params);
		$totalCount = $db->getRow('vBForum:getSocialGroupsTotalCount', $queryParams);

		//We need the nodeids to collect some data
		$cacheEvents = ['nodeChg_' . $sgParent];
		$lastids = [];
		$lastNodes = [];
		$channelids = [];
		$categories = [];
		$contributorIds = [];
		$sgCategories = array_keys($this->getCategories());
		$sgParentChannel = $this->getSGChannel();

		foreach ($nodeContent AS $key => $node)
		{
			if ($node['parentid'] == $sgParentChannel)
			{
				$categories[] = $node['nodeid'];
				unset($nodeContent[$node['nodeid']]);
			}
			else
			{
				if ($node['lastcontentid'] > 0)
				{
					$lastids[] = $node['lastcontentid'];
				}
				if (in_array($node['parentid'], $sgCategories))
				{
					$categories[] = $node['parentid'];
				}
				$channelids[] = $node['nodeid'];
				$contributorIds[$node['userid']] = $node['userid'];
				$cacheEvents[] = 'nodeChg_' . $node['nodeid'];
			}
		}
		$categories = array_unique($categories);

		if (empty($channelids))
		{
			$fastCache->write($cacheKey, $emptyresult, 60, array_unique($cacheEvents));
			return $emptyresult;
		}

		$mergedNodes = vB_Library::instance('node')->getNodes(array_unique(array_merge($lastids, $categories)));
		foreach ($lastids AS $lastid)
		{
			if (empty($mergedNodes[$lastid]))
			{
				continue;
			}
			$lastNodes[$lastid] = $mergedNodes[$lastid];

			$contributorIds[$mergedNodes[$lastid]['userid']] = $mergedNodes[$lastid]['userid'];
		}
		foreach ($categories AS $category)
		{
			if (empty($mergedNodes[$category]))
			{
				continue;
			}
			$categoriesInfo[$category] = $mergedNodes[$category];
		}

		// update category info
		foreach ($nodeContent AS $key => $node)
		{
			// add category info
			if (isset($categoriesInfo[$node['parentid']]))
			{
				$nodeContent[$key]['content']['channeltitle'] = $categoriesInfo[$node['parentid']]['title'];
				$nodeContent[$key]['content']['channelroute'] = $categoriesInfo[$node['parentid']]['routeid'];
				$cacheEvents[] = 'nodeChg_' . $node['parentid'];
			}
		}

		$lastTitles = $lastInfo = [];
		$lastIds = [];
		foreach ($lastNodes as $lastnode)
		{
			$lastInfo[$lastnode['nodeid']]['starter'] = $lastnode['starter'];
			if ($lastnode['starter'] == $lastnode['nodeid'])
			{
				$lastInfo[$lastnode['nodeid']]['title'] = $lastnode['title'];
				$lastInfo[$lastnode['nodeid']]['routeid'] = $lastnode['routeid'];

				$contributorIds[$lastnode['userid']] = $lastnode['userid'];
			}
			else
			{
				//We need another query
				$lastIds[$lastnode['starter']] = $lastnode['starter'];
			}
		}

		//Now get any lastcontent starter information we need
		if (!empty($lastIds))
		{
			$nodes = vB_Library::instance('node')->getNodes($lastIds);
			foreach ($nodeContent AS $index => $channel)
			{
				$nodeid = $lastInfo[$channel['lastcontentid']]['starter'];
				if (isset($nodes[$nodeid]))
				{
					$node =& $nodes[$nodeid];
					$lastInfo[$channel['lastcontentid']]['routeid'] = $node['routeid'];
					$lastInfo[$channel['lastcontentid']]['title'] = $node['title'];

					$contributorIds[$node['userid']] = $node['userid'];
				}
			}
		}

		// used for fetching granular contributors & total member counts
		$groups = $db->getColumn('usergroup', 'usergroupid',
			[
				'systemgroupid' => [
					vB_Api_UserGroup::CHANNEL_MODERATOR_SYSGROUPID,
					vB_Api_UserGroup::CHANNEL_MEMBER_SYSGROUPID,
					vB_Api_UserGroup::CHANNEL_OWNER_SYSGROUPID
				]
			],
			false,
			'systemgroupid'
		);
		$groupManagers = [];
		$contributors = [];
		if (!empty($options['contributors']))
		{
			//Get contributors
			$membersQry = $db->assertQuery('vBForum:groupintopic', [
				'nodeid' => $channelids,
				'groupid' => $groups
			]);

			foreach ($membersQry AS $record)
			{
				if ($record['groupid'] == $groups[vB_Api_UserGroup::CHANNEL_MODERATOR_SYSGROUPID])
				{
					$groupManagers[] = $record;
				}
				$contributorIds[$record['userid']] = $record['userid'];
				$cacheEvents[] = 'sgMemberChg_' . $record['userid'];
			}
		}

		// get avatar information for all relevant users
		$userApi = vB_Api::instanceInternal('user');
		$avatarInfo = $userApi->fetchAvatars($contributorIds);

		if (!empty($groupManagers))
		{
			foreach ($groupManagers AS $index => $contributor)
			{
				if (!isset($contributors[$contributor['nodeid']]))
				{
					$contributors[$contributor['nodeid']] = [];
				}
				$userInfo = $userApi->fetchUserinfo($contributor['userid']);
				$contributors[$contributor['nodeid']][$contributor['userid']] = $userInfo;
				$contributors[$contributor['nodeid']][$contributor['userid']]['avatar'] = $avatarInfo[$contributor['userid']];
			}
		}

		// Obtain keys for sg pages
		$pageKeyInfo = [];
		$routes = $db->getRows('routenew', ['class' => 'vB5_Route_Channel', 'contentid' => $channelids], false, 'routeid');
		vB5_Route::preloadRoutes(array_keys($routes));
		foreach ($routes AS $record)
		{
			$route = vB5_Route_Channel::getRoute($record['routeid'], @unserialize($record['arguments']));
			if ($route AND ($pageKey = $route->getPageKey()))
			{
				$pageKeyInfo[$pageKey] = $record['contentid'];
			}
		}

		$viewing = [];
		$viewingQry = $db->select('session',	['pagekey' => array_keys($pageKeyInfo)], false, ['pagekey']);
		foreach ($viewingQry AS $viewingUser)
		{
			$viewingNode = $pageKeyInfo[$viewingUser['pagekey']];
			$viewing[$viewingNode] = ($viewing[$viewingNode] ?? 0) + 1;
		}

		// get the members count
		$membersCount = $db->getRows(
			'vBForum:groupintopicCount',
			[
				'nodeid' => $channelids,
				'groupid' => $groups
			],
			false,
			'nodeid'
		);

		foreach ($nodeContent AS $index => $channel)
		{
			$nodeid = $channel['nodeid'];
			if (!empty($options['contributors']))
			{
				$nodeContent[$index]['contributors'] = $contributors[$nodeid] ?? [];
				$nodeContent[$index]['contributorscount'] = count($contributors[$nodeid] ?? []);
			}
			$nodeContent[$index]['members'] = $membersCount[$nodeid]['members'] ?? 0;
			$nodeContent[$index]['viewing'] = $viewing[$nodeid] ?? 0;
			$nodeContent[$index]['lastposttitle'] = $lastInfo[$channel['lastcontentid']]['title'] ?? '';
			$nodeContent[$index]['lastpostrouteid'] = $lastInfo[$channel['lastcontentid']]['routeid'] ?? 0;

			$nodeContent[$index]['owner_avatar'] = $avatarInfo[$nodeContent[$index]['userid']] ?? [];
			$nodeContent[$index]['lastauthor_avatar'] = $avatarInfo[$nodeContent[$index]['lastauthorid']] ?? [];
		}

		$total = $totalCount['totalcount'];
		if ($total > 0)
		{
			$pages = ceil($total / $perpage);
		}
		else
		{
			$pages = 1; //we don't want the UI to display Page 1 of 0
		}

		$pageInfo = [
			'currentpage' => $page,
			'perpage' => $perpage,
			'prevurl' => '',
			'nexturl' => '',
			'totalpages' => $pages,
			'totalrecords' => $total,
			'sgparent' => $sgParent,
		];

		$result = [
			'results' => $nodeContent,
			'totalcount' => count($nodeContent),
			'pageInfo' => $pageInfo,
		];
		$fastCache->write($cacheKey, $result, 60, array_unique($cacheEvents));

		//we don't cache the pagination URLs as they may vary for the same content depending on the specified routeInfo (routeId, arguments, queryParameters)
		$paginationURLs = $this->buildPaginationURLs($page, $pages, $routeInfo);
		if ($paginationURLs)
		{
			$pageInfo = array_merge($pageInfo, $paginationURLs);
			$result['pageInfo'] = $pageInfo;
		}

		return $result;
	}

	/**
	 * Builds pagination previous and next URLs.
	 *
	 * @param	int		The current page number.
	 * @param	int		The total number of pages.
	 * @param	Array	The route information containing routeId, arguments and queryParameters.
	 * @return	Array	The pagination array containing prevurl and nexturl. Returns false if routeId is not specified or invalid or if there is only one page.
	 */
	protected function buildPaginationURLs($page = 1, $totalpages = 1, $routeInfo = [])
	{
		//if the caller did not pass routeId or there is only one page, then don't build the prev and next URLs
		if (intval($routeInfo['routeId'] ?? 0) > 0 AND ($page < $totalpages OR $page > 1))
		{
			$prevUrl = $nextUrl = '';
			$baseUrl = vB::getDatastore()->getOption('frontendurl');

			$queryParams = $routeInfo['queryParameters'] ?? [];
			if ($page < $totalpages)
			{
				$routeInfo['arguments']['pagenum'] = $page + 1;
				$nextUrl = $baseUrl . vB5_Route::buildUrl($routeInfo['routeId'], $routeInfo['arguments'], $queryParams);
			}

			if ($page > 1)
			{
				$routeInfo['arguments']['pagenum'] = $page - 1;
				$prevUrl = $baseUrl . vB5_Route::buildUrl($routeInfo['routeId'], $routeInfo['arguments'], $queryParams);
			}

			return [
				'prevurl' => $prevUrl,
				'nexturl' => $nextUrl
			];
		}

		return false;
	}

	/**
	 * Get the current user's permissions for own stuff
	 * (eg. Own groups, own discussions, own messages)
	 *
	 *	@param int	the nodeid to check
	 *	@return	array of permissions set to yes
	 */
	public function getSGOwnerPerms($nodeid)
	{
		$userContext = vB::getUserContext();
		$perms = [];

		$node = vB_Api::instanceInternal('node')->getNode($nodeid, true, false);
		if (!intval($nodeid) OR !$this->isSGNode($nodeid, $node))
		{
			return $perms;
		}

		// removed canmanageowngroups VBV-13160. If templates need this, we should be checking for canconfigchannel & canadminforums
		// on the current node like in vB_Library_Content::validate() update check.
		// Also see canmanageownchannels checked by node API for soft deleting posts for moderation.

		// removed caneditowngroups VBV-13160. Use see above note for replacement permissions.

		// keep this in sync with vB_Library_Content::validate() delete check.
		if ($userContext->getChannelPermission('forumpermissions2', 'candeletechannel', $node['nodeid']) OR
			$userContext->hasAdminPermission('canadminforums'))
		{
			$perms['candeletechannel'] = 1;
		}

		// removed canmanagediscussions &  canmanagemessages, VBV-13160

		return $perms;
	}

	/**
	 * returns the category list- direct children of the social group channel
	 *
	 * @return mixed	array of nodeid => title
	 */
	public function getCategories()
	{
		$cache = vB_Cache::instance(vB_Cache::CACHE_FAST);
		$categories = $cache->read('vbSGChannels');
		if (!empty($categories))
		{
			return $categories;
		}
		$sgChannel = $this->getSGChannel();
		$categories = vB::getDbAssertor()->getRows('vBForum:node',
			[
				'parentid' => $sgChannel,
				'contenttypeid' => vB_Types::instance()->getContentTypeID('vBForum_Channel')
			],
			'title',
			'nodeid'
		);

		$return = [];
		$userContext = vB::getUserContext();
		$events = [];
		vB_Library::instance('node')->fetchClosureParent(array_keys($categories));
		foreach ($categories AS $category)
		{
			if ($userContext->getChannelPermission('forumpermissions', 'canview', $category['nodeid'], false, $sgChannel))
			{
				$return[$category['nodeid']] = [
					'title' => $category['title'],
					'htmltitle' => $category['htmltitle'],
					'routeid' => $category['routeid'],
				];
				$events[] = 'routeChg_' . $category['routeid'];
				$events[] = 'nodeChg_' . $category['nodeid'];
			}
			vB_Library_Content::writeToCache([$category], vB_Library_Content::CACHELEVEL_NODE);
		}
		$cache->write('vbSGChannels', $return, 1440, $events);
		return $return;
	}

	/**
	 * Lists channel members
	 *
	 * This is used for groups.
	 *
	 * @param int $nodeid
	 * @param int $pageno       Page number to fetch
	 * @param int $perpage      Number of members to list per page
	 * @param bool $thumb       Whether to return the thumbnail version of the avatar
	 * @param bool $includeOwnersAndMods Whether to include owners and moderators instead of strictly members
	 *
	 * @throws vB_Exception_Api invalid_data
	 * @throws vB_Exception_Api no_permission
	 *
	 * @return array
	 *	int count     -- total count of members
	 *	array members -- list of userid => Array
	 *		int userid
	 *		string username
	 *		string avatarUrl -- deprecated, use avatarpath
	 *		string avatarpath -- the user's avatar url path.  Thumbnail path if requested
	 *		int groupid -- the groupid from the channel member usergroup
	 *	int pagecount -- total number of pages
	 */
	public function fetchMembers($nodeid, $pageno = 1, $perpage = 20, $thumb = false, $includeOwnersAndMods = false)
	{
		// NOTE: This function has a lot of overlap with vB_Api_Blog::fetchSubscribers()

		$nodeid = (int) $nodeid;
		$pageno = (int) $pageno;
		$perpage = (int) $perpage;

		if ($nodeid < 1 OR $pageno < 1 OR $perpage < 1)
		{
			throw new vB_Exception_Api('invalid_data');
		}

		//we don't use this data, but we need to validate that the user can load the node.
	 	$node = vB_Api::instanceInternal('node')->getNodeContent($nodeid);

		$assertor = vB::getDbAssertor();
		$pageno = max($pageno, 1);

		if ($includeOwnersAndMods)
		{
			// Need to return owners and moderators too, since they are also members of the social group.
			$groupids = vB_Api::instanceInternal('usergroup')->getMultipleGroupIds([
				vB_Api_UserGroup::CHANNEL_MEMBER_SYSGROUPID,
				vB_Api_UserGroup::CHANNEL_MODERATOR_SYSGROUPID,
				vB_Api_UserGroup::CHANNEL_OWNER_SYSGROUPID,
			]);
		}
		else
		{
			$groupids = vB_Api::instanceInternal('usergroup')->getMultipleGroupIds([
				vB_Api_UserGroup::CHANNEL_MEMBER_SYSGROUPID,
			]);
		}

		$memberQry = $assertor->assertQuery('vBForum:groupintopicPage', [
			vB_dB_Query::PARAM_LIMIT => $perpage,
			vB_dB_Query::PARAM_LIMITSTART => $perpage * ($pageno - 1),
			'nodeid' => $nodeid,
			'groupid' => $groupids
		]);

		$sortFunc = function($a, $b)
		{
			static $order = null;

			if ($order === null)
			{
				$order = vB_Api::instanceInternal('usergroup')->getMultipleGroupIds([
					vB_Api_UserGroup::CHANNEL_OWNER_SYSGROUPID,
					vB_Api_UserGroup::CHANNEL_MODERATOR_SYSGROUPID,
					vB_Api_UserGroup::CHANNEL_MEMBER_SYSGROUPID,
				]);
			}

			$apos = array_search($a, $order);
			$bpos = array_search($b, $order);

			return $apos < $bpos ? -1 : ($apos > $bpos ? 1 : 0);
		};

		$members = [];
		foreach ($memberQry as $member)
		{
			// Users can have multiple usergroups in 'groupintopic'. Store the
			// "highest" of these in the groupid element (owner > moderator > member)
			$ids = explode(',', $member['groupids']);
			// We could sort in the GROUP_CONCAT in the query, but I don't think we
			// can rely on a particular order of the usergroupids in the database
			// In other words, there might be cases where they aren't 9, 10, and 11.
			// Upgrades from vB4, for example. So let's sort here.
			usort($ids, $sortFunc);

			$members[$member['userid']] = [
				'groupid' => reset($ids),
			];
		}

		if (empty($members))
		{
			return [
				'count' => 0,
				'members' => [],
				'pagecount' => 1,
			];
		}

		$userApi = vB_Api::instanceInternal('user');
		$avatarInfo = $userApi->fetchAvatars(array_keys($members));

		$userQry = $assertor->select('user', ['userid' => array_keys($members)]);
		foreach ($userQry AS $user)
		{
			$userid = $user['userid'];
			$members[$userid]['userid'] = $userid;
			$members[$userid]['username'] = $user['username'];
			$members[$userid]['displayname'] = $user['displayname'];
			$members[$userid]['avatar'] = $avatarInfo[$userid];
		}

		$count = $assertor->getRow('vBForum:groupintopicCount', [
			'groupid' => $groupids,
			'nodeid' => $nodeid,
		]);

		$count = $count['members'];
		$pagecount = ceil($count / $perpage);

		return [
			'count'     => $count,
			'members'   => $members,
			'pagecount' => $pagecount,
		];
	}

	/**
	 * Creates a new social group
	 *
	 * @param array $input array which must include parentid, title. Should also have various options and a description.
	 *     $input = [
	 *         'title'           => (string) Required. Group title. Note that the group title must be unique within its category.
	 *         'description'     => (string) Default ''. Group description.
	 *         'parentid'        => (int) Required. Nodeid of the group category.
	 *         'filedataid'      => (int) Optional. Channel Icon Filedataid. This requires forumpermissions.canuploadchannelicon .
	 *         'group_type'      => (int) 0|1|2, default 0. Group membership rules. 0 = auto-approve memberships, 1 = membership
	 *                               requires approval, 2 = invite only.
	 *         'viewperms'       => (int) 0|1|2, default 2. Who can view this group. 0 = subscribed only, 1 = subscribed &
	 *                               registered users, 2 = everyone.
	 *         'moderate_topics' => (bool) Default false. True = put new topics into moderation, False = auto-approve new topics.
	 *     ]
	 *
	 * @return int nodeid of the created group/channel
	 */
	public function createSocialGroup($input)
	{
		/*
			Note, there are hypothetically more input options, but they set the channel.options column, and 1) I'm not entirely sure
			how they override the (partially?) duplicate "nodeoptions", and 2) the frontend controller code seems to disagree with
			itself on how it should be set. It seems to run both channel::update() and node::setNodeOptions(), just in case, I guess?
			But from mobile devs' reports, the setNodeOptions() seem to be the more consistent/correct way to set these. As such, I'm
			going to leave them out of the main docblock as to discourage using them, but will leave them here for when we have time
			to untangle some of these:
				'options'         => [
					'moderate_comments' => (bool) Default false. True = put new comments into moderation
					'moderate_topics'   => (bool) Default false. Same as above, recommended to use the outer 'moderate_topics' instead.
					'autoparselinks'    => (bool) Default false. True = Automatically parse links in text
					'disablesmilies'    => (bool) Default false. True = disable smilies. I think. Frontend controller seems to be confused
	                                     about which direction this is set from the POST inputs, so I am also confused.
					'allow_post'        => (bool) Default true. True = "Allow replies and comments to be posted"
					'approve_subscription' => (bool) Default false. True = Auto-accept subsriber requests.
				]
		*/

		if (empty($input['parentid']))
		{
			throw new vB_Exception_Api('invalid_sg_parent');
		}

		$sgParent = intval($input['parentid']);
		$catNode = vB_Api::instanceInternal('node')->getNode($sgParent);
		if (empty($catNode) OR $catNode['parentid'] != $this->getSGChannel())
		{
			throw new vB_Exception_Api('invalid_sg_parent');
		}

		// Check for the permissions
		$check = vB_Api::instanceInternal('content_channel')->canAddChannel($this->getSGChannel());
		if (!$check['can'] AND $check['exceeded'])
		{
			throw new vB_Exception_Api('you_can_only_create_x_groups_delete', [$check['exceeded']]);
		}
		// Note that this->createChannel() will also check for create permissions, so leaving the sketchy check
		// above alone as a "limit check" only.

		// social group type, we allow post by default while creating social group
		$input['nodeoptions'] = 2;
		$input['group_type'] = $input['group_type'] ?? 0;
		switch ($input['group_type'])
		{
			case 2:
				$input['nodeoptions'] |= vB_Api_Node::OPTION_NODE_INVITEONLY;
				break;
			case 1:
				break;
			default:
				$input['nodeoptions'] |= vB_Api_Node::OPTION_AUTOAPPROVE_MEMBERSHIP;
				break;
		}

		// This node option can come in from the createcontent controller as part of $input.
		// Because of the way vB_Library_Content::updateNodeOptions(), if we specify 'nodeoptions'
		// like above, we must specify the rest of the node options in the same format because all
		// of the name-specified bitfields (e.g. $input['moderate_topics'], $input['disablesmilies']
		// get ignored in that case
		// Minimal-change version:
		if (!empty($input['moderate_topics']))
		{
			$input['nodeoptions'] |= vB_Api_Node::OPTION_MODERATE_TOPICS;
		}

		return $this->createChannel(
			$input,
			$sgParent,
			vB_Page::getSGConversPageTemplate(),
			vB_Page::getSGChannelPageTemplate(),
			vB_Api_UserGroup::CHANNEL_OWNER_SYSGROUPID
		);
	}

	/**
	 * creates a new category
	 *
	 *	@param int $nodeId
	 *	@param array $input array which must include title and optionally parentid
	 *
	 *	@return int nodeid of the created category
	 */
	public function saveCategory($nodeId, $input)
	{
		$channelApi = vB_Api::instanceInternal('content_channel');

		$nodeId = (int) $nodeId;

		// force social group channel as parent id (categories cannot be nested)
		$input['parentid'] = $this->getSGChannel();
		$input['category'] = 1; // force channel to be a category
		$input['templates']['vB5_Route_Channel'] = vB_Page::getSGCategoryPageTemplate();
		$input['templates']['vB5_Route_Conversation'] = vB_Page::getSGCategoryConversPageTemplate();

		// TODO: this code is similar to vB_Api_Widget::saveChannel, add a library method with it?
		if ($nodeId > 0)
		{
			// this call won't update parentid
			$channelApi->update($nodeId, $input);
		}
		else
		{
			$nodeId = $channelApi->add($input);
		}

		return $nodeId;
	}

	public function changeCategory($groupid, $categoryid)
	{
		if (!$this->isSGChannel($groupid))
		{
			throw new vB_Exception_Api('channel_not_socialgroup', [$groupid]);
		}

		$categories = $this->getCategories();
		if (!isset($categories[$categoryid]))
		{
			throw new vB_Exception_Api('invalid_sg_parent');
		}

		$nodeLib = vB_Library::instance('node');
		$channelLib = vB_Library::instance('content_channel');

		//if someone can update the social group channel, let them change which category it is in.
		if (!$channelLib->validate(['parentid' => $categoryid], vB_Library_Content::ACTION_UPDATE, $groupid))
		{
			throw new vB_Exception_Api('no_permission');
		}

		$node = $nodeLib->getNode($groupid);

		//it isn't really an error if the parent is already the same
		//but we don't want to call moveNodes if it is, nothing to do
		if ($categoryid != $node['parentid'])
		{
			$nodeLib->moveNodes($groupid, $categoryid);
		}

		return ['success' => true];
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 114640 $
|| #######################################################################
\*=========================================================================*/
