<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * @package vBulletin
 */
class vB_Systemevent_Item_Content_RelatedText extends vB_Systemevent_Item
{
	//the serializable fields need to be protected so that the base class can searialize them
	protected array $cronitem = [];
	protected array $serializefields = ['cronitem'];

	public static function create(array $cronitem = []) : self
	{
		$item = new self();
		$item->cronitem = $cronitem;
		return $item;
	}

	public function run() : void
	{
		require_once(DIR . '/includes/functions_cron.php');
		try
		{
			$data = vB_RelatedText_Data::createDefault();
			$data->processAll();

			// this will magically pick up the phrase for the cronscript that queues this
			// if we have the cron item information log the error otherwise let the event queue handle it.
			if ($this->cronitem)
			{
				log_cron_action('', $this->cronitem, 1);
			}
		}
		catch (Throwable $e)
		{
			// if we have the cron item information log the error otherwise let the event queue handle it.
			if (!$this->cronitem)
			{
				log_cron_exception($e, $this->cronitem);
			}
			else
			{
				throw $e;
			}
		}
	}

	public function interrupt() : bool
	{
		// Should probably phrase this, hopefully it doesn't happen enough.  And doing it is kind of a pain.
		if ($this->cronitem)
		{
			log_cron_action('Process timed out.', $this->cronitem, 0);
		}

		// Don't retry on timeout.  It isn't likely to do much good and the user can always run it again.
		return false;
	}
}
