<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

// helper class to transport styleschedule data
class vB_Entity_Styleschedule extends vB_Entity
{
	use vB_Trait_NoSerialize;

	// PHP 8.1:
	// public readonly vB_Entity_Datetime $vbstartdate;
	// public readonly string $startdate;
	// public readonly string $startdate_tzoffset;
	// public readonly vB_Entity_Datetime $vbenddate;
	// public readonly string $enddate;
	// public readonly string $enddate_tzoffset;

	// public function __construct(
	// 	public readonly int $styleid,
	// 	public readonly bool $enabled,
	//  string $startdate,
	//  string $startdate_tzoffset,
	//  string $enddate,
	//  string $enddate_tzoffset,
	// 	public readonly bool $useyear,
	// 	public readonly int $priority,
	// 	public readonly bool $overridechannelcustom,
	// 	public readonly bool $overrideusercustom,
	// 	public readonly string $title,
	// 	public readonly ?int $scheduleid = null
	// )

	protected vB_Entity_Datetime $_vbstartdate;
	public string $startdate;
	public string $startdate_tzoffset;
	protected vB_Entity_Datetime $_vbenddate;
	public string $enddate;
	public string $enddate_tzoffset;

	public function __construct(
		public int $styleid,
		public bool $enabled,
		string $startdate,
		string $startdate_tzoffset,
		string $enddate,
		string $enddate_tzoffset,
		public bool $useyear,
		public int $priority,
		public bool $overridechannelcustom,
		public bool $overrideusercustom,
		public string $title,
		public ?int $scheduleid = null
	)
	{
		// The dates are always assumed to be INCLUSIVE. This means that
		// startdate starts at 00:00:00 (midnight), and enddate ends at 23:59:59 (midnight - 1s)
		// So "start ~ end" of "2023-01-01 ~ 2023-01-01" means "2023 Jan 1st 12AM ~ 2023 Jan 1st 11:59:59PM"

		// The times are probably going to be assumed / hard-coded on the outer methods, but in the future
		// we might want to allow setting them custom. Massage whatever we get into the proper format to
		// ensure we have valid data in mysql and also to allow the library methods work smoother
		try
		{
			$this->_vbstartdate = new vB_Entity_Datetime($startdate, $startdate_tzoffset, '00:00:00');
			$this->startdate = $this->_vbstartdate->datetime_mysql;
			$this->startdate_tzoffset = $this->_vbstartdate->tzoffset_raw;
		}
		catch(Throwable $e)
		{
			// Convert any errors to something specific to this field. This makes it a bit nicer for
			// the API / frontend
			throw new vB_Exception_Api('required_field_x_missing_or_invalid', 'startdate');
		}

		try
		{
			// Splitting up the timezones to start & end isn't *perfect*, because the actual date that daylight savings starts & ends
			// changes each year, but setting each separately provides clarity, and hopefully this gives admins some semblance of
			// control if they have schedules that cross over DST.
			$this->_vbenddate = new vB_Entity_Datetime($enddate, $enddate_tzoffset, '23:59:59');
			$this->enddate = $this->_vbenddate->datetime_mysql;
			$this->enddate_tzoffset = $this->_vbenddate->tzoffset_raw;
		}
		catch(Throwable $e)
		{
			// Convert any errors to something specific to this field. This makes it a bit nicer for
			// the API / frontend
			throw new vB_Exception_Api('required_field_x_missing_or_invalid', 'enddate');
		}


		// If useyear is set, that means this schedule is meant for a very specific, non-recurring event.
		// We won't use "this year" in the library etc if this is set, so we have to make sure the dates are valid.
		if ($this->useyear)
		{
			if ($this->_vbenddate->getUnixTimestamp(false) <= $this->_vbstartdate->getUnixTimestamp(true) )
			{
				throw new vB_Exception_Api('required_field_x_missing_or_invalid', 'enddate');
			}
		}
		else
		{
			// todo: enforce "start within one-year of end" at creation?
			// ATM relying on vB_Library_StyleSchedule::getNearestStartAndEndUnixtimes to do all of the
			// heavy lifting with relative years
			// $startyear = $this->startdate->year;
			// $endyear = $this->enddate->year;
		}
	}

	// Data getter/setter functions

	protected function vbstartdate($value = null)
	{
		// setter
		if (func_num_args() == 1)
		{
			$this->_vbstartdate = $value;
		}
		else
		{
			return $this->_vbstartdate;
		}
	}

	protected function vbenddate($value = null)
	{
		// setter
		if (func_num_args() == 1)
		{
			$this->_vbenddate = $value;
		}
		else
		{
			return $this->_vbenddate;
		}
	}

	// Normally meant for creating from a DB record, but allows for scheduleid to be null (which would not
	// happen for a db record since it's a primary key) so that we can use this function internally
	// for quick copies
	public static function createFromArray(array $dbrecord) : static
	{
		// kind of an invert of convertSingleInstanceToArray()

		// wish there was a better/easier way than manually specifying all of these keys
		return new vB_Entity_Styleschedule(
			$dbrecord['styleid'],
			$dbrecord['enabled'],
			$dbrecord['startdate'],
			$dbrecord['startdate_tzoffset'],
			$dbrecord['enddate'],
			$dbrecord['enddate_tzoffset'],
			$dbrecord['useyear'],
			$dbrecord['priority'],
			$dbrecord['overridechannelcustom'],
			$dbrecord['overrideusercustom'],
			$dbrecord['title'],
			$dbrecord['scheduleid'] ?? null
		);
	}

	/**
	 * Calculate the "active" range nearest to $attimestamp, where the "nearest range" either includes
	 * the $attimestamp, or is in the earliest future range relative to $attimestamp.
	 * Note, this is only useful for schedules using relative dates (i.e. $this->useyear = false)
	 *
	 * @param int $attimestamp   Unixtimestamp that we should calculate relative to. Usually timenow.
	 *
	 * @return array [
	 *      'startunixtime' => int,
	 *      'endunixtime'   => int,
	 * ]
	 */
	public function getNearestStartAndEndUnixtimes(int $attimestamp) : array
	{
		$startVbDatetime = $this->_vbstartdate;
		$endVbDatetime = $this->_vbenddate;
		// If useyear is set, respect the specified exact years
		if ($this->useyear)
		{
			return [
				'startunixtime' => $startVbDatetime->getUnixTimestamp(true),
				'endunixtime' => $endVbDatetime->getUnixTimestamp(false),
			];
		}
		// for "auto", it gets a bit more complicated.

		// We have no idea what the start & end years were originally set to (e.g. schedule was
		// created 2 years ago), nor if they're actually set correctly (within 1 year) since
		// we currently don't enforce anything, because we're relying on THIS method to be robust
		// enough to handle whatever years we through at it.

		// What's important is that
		// * End is always later than Start
		// * End is always within 1 year of Start
		// * Comparetime either falls within the [Start, End] range, or is before the [Start, End] range
		//    with Start within 1 year of comparetime. i.e. we're always providing the CURENTLY ACTIVE
		//    range or NEXT EARLIEST ACTIVE range (edit: 1 year rule does not apply for leap-day-only,
		//    see below)
		// Edit: One more thing to consider is leap days.
		// If Startdate is a leap day, translate that to mean "I want to start after Feb 28th" (so on
		// non leap years, March 1st).
		// If Enddate is a leap day, tarnslate that to mean "I want to end before Mar 1st" (so on non
		// leap years, Feb 28th).
		// And if both startdate & enddate is a leapday, that probably means "I only want leap days",
		// i.e. every 4 years on leap years and skip the other years.
		// PHP Datetime(), from what I can tell, always uses March 1st for Feb 29 on non-leap years,
		// so we can't transparently use ->datetime->getTimestamp(), but must adjust backwards depending
		// on whether we're talking about the start or end.

		// For the "comparetime falls within range" condition, only considering the month/day & ignoring year,
		// we have 6 permutations:
		// 1. compare <= start <= end  - Inactive, next nearest [start this year, end this year]
		// 2. compare <= end <= start  - Active. This actually means [start last year, end this year] (wraparound)
		// 3. end <= compare <= start  - Inactive, next nearest range is [start this year, end next year]
		// 4. start <= compare <= end  - Active. [start this year, end this year]]
		// 5. end <= start <= compare  - Active. This actually means [start this year, end next year] (wraparound)
		// 6. start <= end <= compare - Inactive, next nearest range is [start next year, end next year]


		$compareVbDatetime = new vB_Entity_Datetime('@' . $attimestamp, $this->startdate_tzoffset);
		$compareYear = $compareVbDatetime->year;
		$compareunixtime = $compareVbDatetime->getUnixTimestamp(true);

		$startIsLeap = $startVbDatetime->isLeapDateIgnoreYear();
		$endIsLeap = $endVbDatetime->isLeapDateIgnoreYear();

		$startIsLeap = $startVbDatetime->isLeapDateIgnoreYear();
		$endIsLeap = $endVbDatetime->isLeapDateIgnoreYear();
		// Special case, if both dates are leap days, we should only return leap years.
		if ($startIsLeap AND $endIsLeap)
		{
			if (!vB_Entity_Datetime::isLeapYear($compareYear))
			{
				$nextYear = vB_Entity_Datetime::calculateNextLeapYear($compareYear);
				$range = $this->_getRange($nextYear, $startVbDatetime, $endVbDatetime);
			}
			else
			{
				$range = $this->_getRange($compareYear, $startVbDatetime, $endVbDatetime);
				$compare = $this->_compareRange($compareunixtime, $range);
				if ($compare === 1)
				{
					$nextYear = vB_Entity_Datetime::calculateNextLeapYear($compareYear);
					$range = $this->_getRange($nextYear, $startVbDatetime, $endVbDatetime);
				}
			}

			return [
				'startunixtime' => $range[0],
				'endunixtime' => $range[1],
			];
		}


		$thisRange = $this->_getRange($compareYear, $startVbDatetime, $endVbDatetime);

		$compare = $this->_compareRange($compareunixtime, $thisRange);
		if ($compare === 0)
		{
			// Trivial case, $start <= $compare <= $end ...
			return [
				'startunixtime' => $thisRange[0],
				'endunixtime' => $thisRange[1],
			];
		}
		else if ($compare === -1)
		{
			// initial check is $compare <= $start <= $end, check if
			// $start last year <= $compare <= $end
			$prevRange = $this->_getRange($compareYear - 1, $startVbDatetime, $endVbDatetime);
			if ($this->_compareRange($compareunixtime, $prevRange) === 0)
			{
				return [
					'startunixtime' => $prevRange[0],
					'endunixtime' => $prevRange[1],
				];
			}
			else
			{
				// return future nearest time.
				return [
					'startunixtime' => $thisRange[0],
					'endunixtime' => $thisRange[1],
				];
			}
		}
		else
		{
			// initial check is $start <= $end <= $compare.
			// return future
			$nextRange = $this->_getRange($compareYear + 1, $startVbDatetime, $endVbDatetime);
			return [
				'startunixtime' => $nextRange[0],
				'endunixtime' => $nextRange[1],
			];
		}
	}

	// AFAIK <=> only supports scalar compares
	private function _compareRange($timestamp, $range) : int
	{
		if (count($range) != 2)
		{
			throw new vB_Exception_Api('invalid_data');
		}
		$start = $range[0];
		$end = $range[1];

		if ($timestamp < $start)
		{
			return -1;
		}
		else if ($end < $timestamp)
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}

	private function _getRange($year, $startVbDatetime, $endVbDatetime) : array
	{
		$startunixtime = $startVbDatetime->getUnixTimestampForYear($year, true);
		$endunixtime = $endVbDatetime->getUnixTimestampForYear($year, false);
		if ($endunixtime <= $startunixtime)
		{
			// Note, for cases where the range is 1 day - 1 second (including the special
			// "$startIsLeap AND $endIsLeap" case), this relies on the start TIME being
			// 00:00:00 and end TIME being 23:59:59 to avoid accidentally turning into a
			// full year. Once we unlock the timestamps, this will probably require a lot
			// more checks and dummy proofing.
			$endunixtime = $endVbDatetime->getUnixTimestampForYear($year + 1, false);
		}

		return [
			$startunixtime,
			$endunixtime,
		];
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 113078 $
|| #######################################################################
\*=========================================================================*/
