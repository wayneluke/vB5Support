<?php
/*========================================================================*\
|| ###################################################################### ||
|| # vBulletin 6.1.0 Alpha 4 Week 2 - Licence Number VBCW2VFT7A
|| # ------------------------------------------------------------------ # ||
|| # Copyright 2000-2024 MH Sub I, LLC dba vBulletin. All Rights Reserved.  # ||
|| # This file may not be redistributed in whole or significant part.   # ||
|| # ----------------- VBULLETIN IS NOT FREE SOFTWARE ----------------- # ||
|| # http://www.vbulletin.com | http://www.vbulletin.com/license.html   # ||
|| ###################################################################### ||
\*========================================================================*/

/**
 * DB Cache.
 * Handler that caches and retrieves data from the database.
 * @see vB_Cache
 *
 * @package vBulletin\Cache
 */
class vB_Cache_Db extends vB_Cache
{
	/**
	 * @var vB_dB_Assertor
	 */
	protected $assertor;

	/*
	 * Cache
	 */
	protected $recordsToSave = [];
	protected $newEvents = [];
	protected $pageEvents = [];
	protected $locked = [];
	//If a lock hasn't been released in four seconds, there's a mistake and we should ignore it.
	protected $lockDuration = 5;

	/**
	 * Constructor public to allow for separate automated unit testing. Actual code should use
	 * vB_Cache::instance();
	 * @see vB_Cache::instance()
	 */
	public function __construct($cachetype)
	{
		parent::__construct($cachetype);
		$this->assertor = vB::getDbAssertor();
	}

	/**
	 * Writes the cache data to storage.
	 *
	 * @param array	includes key, data, expires
	 */
	protected function writeCache($cache)
	{
		$data = $cache['data'];

		//We ultimately can't store data as anything other than a string so let's serialize anything that
		//can't be represented as a string.  NULL could be transitioned to the empty string but this preserves
		//the distinction (though we don't intentially cache null anywhere at present).  Passing NULL to the
		//method query will result in an error.
		//
		//Object is a little dubious because we don't allow unserializing most of our objects for security reasons
		//but we might want to use plain objects or objects specifically intended for caching at some point.
		if (is_array($data) OR is_object($data) OR is_null($data))
		{
			$serialized = '1';
			$data = serialize($data);
		}
		else
		{
			$serialized = '0';
		}

		$this->recordsToSave[$cache['key']] = [
			'cacheid' => $cache['key'],
			'expires' => $cache['expires'],
			'created' => $this->timeNow,
			'locktime' => 0,
			'data' => $data,
			'serialized' => $serialized,
			'events' => $cache['events'],
		];

		if (!empty($cache['events']))
		{
			foreach ($cache['events'] AS $event)
			{
				if (isset($this->pageEvents[$event]))
				{
					$this->pageEvents[$event][$cache['key']] = $cache['key'];
				}
				else
				{
					$this->pageEvents[$event] = [$cache['key'] => $cache['key']];
				}
			}
		}
		return true;
	}

	/**
	 * Reads the cache object from storage.
	 *
	 * @param string $key						- Id of the cache entry to read
	 * @return array	includes key, data, expires
	 */
	protected function readCache($key)
	{
		$found = $this->readCacheArray([$key]);
		return $found[$key] ?? false;
	}

	/**
	 * Reads an array of cache objects from storage.
	 *
	 * @param string $keys						- Ids of the cache entry to read
	 * @return array of array	includes key, data, expires
	 */
	protected function readCacheArray($keys, $writeLock = false)
	{
		$found = [];
		$toLock = [];

		if (!$keys)
		{
			return $found;
		}

		$rst = $this->assertor->assertQuery('cache', ['cacheid'	=> $keys]);
		foreach ($rst AS $record)
		{
			try
			{
				if (isset($record['data']))
				{
					if (intval($record['serialized']))
					{
						$record['data'] = @unserialize($record['data']);
					}

					//only return good values
					if (($record['expires'] == 0) OR ($this->timeNow < $record['expires']) )
					{
						$found[$record['cacheid']] = [
							'key' => $record['cacheid'],
							'data' => $record['data'],
							'expires' => intval($record['expires']),
							'locktime' => intval($record['locktime'])
						];

						if ($writeLock AND !empty($toLock))
						{
							$this->lock($record['cacheid']);
						}
					}
				}
			}
			catch (Exception $e)
			{
				//If we got here, something was improperly serialized
				//There's not much we can do, but we don't want to return bad data.
			}
		}

		return $found;
	}

	/**
	 * Removes a cache object from storage and the current page.
	 *
	 * @param int $key							- Key of the cache entry to purge
	 * @return bool								- Whether anything was purged
	 */
	protected function purgeCache($key)
	{
		$this->expireCache($key);
	}

	/**
	 * Sets a cache entry as expired in storage.
	 *
	 * @param string/array $key						- Key of the cache entry to expire
	 *
	 * @return	array of killed items
	 */
	protected function expireCache($key)
	{
		if (empty($key))
		{
			return;
		}

		if (!is_array($key))
		{
			$key = [$key];
		}

		foreach ($key as $one_key)
		{
			//recordsToSave should always be an array.  Unsetting an nonexistant key doesn't cause a warning
			//and checking that the key exists is more expensive than unsetting a key that isn't there.
			unset($this->recordsToSave[$one_key]);
			$this->no_values[$one_key] = $one_key;
		}

		//This was changed from doing a bulk delete to doing it key by key in VBV-11031 (commit 77074).  It was a side fix
		//for a different bug and no details are recorded beyond "improving the cache code"
		//Generally a single query will perform better but could cause problems with a long delete causing
		//locking issues.  Since the bug did not indicate issues with locking I'm inclined to switch back
		//to the bulk deletion, while preserving the cleanup in the loop above that was added at the same time.

		//If we try to delete too many keys the query gets too big- see VBV-14951
		$batches = array_chunk($key, 100, true);
		foreach ($batches AS $batch)
		{
			$this->assertor->delete('cache', ['cacheid' => $batch]);
		}
	}

	/**
	 * Locks a cache entry.
	 *
	 * @param string $keys	 array of string keys
	 */
	public function lock($key)
	{
		$currentTime = time();

		$cacheRecord = $this->readCache($key);

		if (!empty($cacheRecord) AND (($this->timeNow - $cacheRecord['locktime']) > $this->lockDuration))
		{
			// there's an entry, check if it is locked. if so we do nothing.
			$result  = $this->assertor->assertQuery('cache', [
				vB_dB_Query::TYPE_KEY =>vB_dB_Query::QUERY_UPDATE,
				'locktime' => $this->timeNow - 1,
				'cacheid' => $key,
			]);

			if ($result > 0)
			{
				return true;
			}
		}
		return false;
	}


	/*Clean=========================================================================*/

	/**
	 * Cleans cache.
	 *
	 * @param bool $only_expired				- Only clean expired entries
	 */
	public function clean($only_expired = true)
	{
		//clean the whole local cache even if we aren't blowing the whole cache out
		//sorting out what's good and what's not is more expensive than just reloading
		//the stuff we actually need.  Especially since we never actually do *anything*
		//in a page load after calling clean
		$this->cleanNow();

		if ($only_expired)
		{
			$this->assertor->assertQuery('cacheExpireDelete', [
				'timefrom' => 1,
				'timeto' => $this->timeNow,
			]);

			// if the cache table is larger than the size in mB, truncate it.
			$config = vB::getConfig();
			$maxsize = $config['Cache']['maxtablesize'] ?? 0;

			if ($maxsize > 0)
			{
				$size = $this->assertor->getField('getCacheTableSize');
				if ($size > $maxsize * 1024 * 1024)
				{
					$count = $config['Cache']['maxtabledeletecount'] ?? 0;
					if ($count > 0)
					{
						//Find the expires datestamp for the nth cache entry based on the count (the limit start is zero
						//based so adjust for that) and then delete the records up to that timestamp.  Skip items that don't expire.
						//This means that we might delete more than $count items if there are multiple items with the same expiration
						//as the nth item (likely since we calculate cache times based on the request start).  But the count is
						//approximate anyway.
						//
						//We do it this way to handle events.  We use a multi table delete to delete both at once, but that doesn't
						//work with sorts/limits.  We could delete the events using the limit and then delete orphaned events (the
						//original idea) but the orphaned record delete is an ugly join when the tables are large -- which is why
						//we are here in the first place.  So this is the best compromise.
						//
						//it might be better to delete the soonest created instead of the soonest to expire
						//but that would be sorting on a field that isn't indexed and it's not clear we want
						//to add an index to the table just for this.
						$expires = $this->assertor->getField('cache',
							[
								vB_dB_Query::COLUMNS_KEY => ['expires'],
								vB_dB_Query::CONDITIONS_KEY => [['field' => 'expires', 'value' => 0, 'operator' => vB_dB_Query::OPERATOR_GT]],
								vB_dB_Query::PARAM_LIMITSTART => $count - 1,
								vB_dB_Query::PARAM_LIMIT => 1,
							],
							'expires'
						);

						$this->assertor->assertQuery('cacheExpireDelete', [
							'timefrom' => 1,
							'timeto' => $expires,
						]);

					}
					else
					{
						$this->truncateCache();

						// if we automatically trigger the cache clear, fire the hook as if the admin
						// had cleared the cache.
						vB::getHooks()->invoke('hookAdminClearedCache', []);
					}
				}
			}
		}
		else
		{
			$this->truncateCache();
			if (self::$cacheLogging)
			{
				$this->logCacheAction(0, self::CACHE_LOG_CLEAR, $this->cachetype);
			}
		}
	}

	private function truncateCache()
	{
		//if we are cleaning the entire thing, we need to nuke any cache values saved
		//locally but not pushed to the db.
		$this->recordsToSave = [];
		$this->newEvents = [];
		$this->pageEvents = [];
		$this->locked = [];

		$this->assertor->assertQuery('truncateTable', ['table' => 'cacheevent']);
		$this->assertor->assertQuery('truncateTable', ['table' => 'cache']);
	}

	/**
	 * Adds an event record
	 *
	 * @param	string	cacheid
	 * @param	mixed	array of strings	the events
	 */
	public function addEvents($cacheid, $events)
	{
		if (!isset($this->newEvents[$cacheid]))
		{
			$this->newEvents[$cacheid] = [];
		}

		if (!is_array($events))
		{
			$events = [$events];
		}
		foreach ($events AS $event)
		{
			if (!in_array($event, $this->newEvents[$cacheid]))
			{
				$this->newEvents[$cacheid][] = $event;
			}
		}
	}

	/**
	 * Expires cache entries associated with triggered events.
	 * @param array|string $events
	 * @return bool								- Whether any events were triggered
	 */
	public function event($events)
	{
		if (empty($events))
		{
			return false;
		}

		if (!is_array($events))
		{
			$events = [$events];
		}

		// Get affected cache entries
		$results = $this->assertor->getColumn('cacheevent', 'cacheid', ['event' => $events]);
		foreach ($events AS $event)
		{
			if (isset($this->pageEvents[$event]))
			{
				foreach ($this->pageEvents[$event] AS $cacheid)
				{
					$results[] = $cacheid;
					unset($this->values_read[$cacheid]);
					$this->no_values[$cacheid] = $cacheid;
					unset($this->recordsToSave[$cacheid]);
				}
			}
		}
		$this->expire($results);
		$this->assertor->delete('cacheevent', ['event' => $events]);
		return true;
	}

	//This is a delayed function, and does all the delayed writes
	public function shutdown()
	{
		if (!empty($this->locked))
		{
			foreach ($this->locked AS $cacheid)
			{
				unset($this->recordsToSave[$cacheid]);
			}
		}

		if (!empty($this->recordsToSave))
		{
			$this->assertor->assertQuery('saveDbCache', ['cache' => $this->recordsToSave]);
		}

		if (!empty($this->newEvents))
		{
			foreach ($this->newEvents AS $cacheid => $events)
			{
				if (
					!empty($this->recordsToSave[$cacheid]['events']) AND
					is_array($this->recordsToSave[$cacheid]['events']) AND
					is_array($events)
				)
				{
					$this->newEvents[$cacheid] = array_diff($this->newEvents[$cacheid], $this->recordsToSave[$cacheid]['events']);

					//now it's possible they are all overlap
					if (empty($this->newEvents[$cacheid]))
					{
						unset($this->newEvents[$cacheid]);
					}
				}
			}

			if (!empty($this->newEvents))
			{
				$this->assertor->assertQuery('saveDbCacheEvents', ['events' => $this->newEvents]);
			}
		}

		$this->recordsToSave = [];
		$this->newEvents = [];
		$this->no_values = [];
		$this->values_read = [];
	}

	/**
	 * Don't write this cache record to disk
	 *
	 * @param	integer		the key for the cache record
	 */
	protected function cancelWrite($key)
	{
		//If we don't have a write for this then we can ignore.
		unset($this->recordsToSave[$key]);
	}
}

/*=========================================================================*\
|| #######################################################################
|| # Downloaded: 12:50, Tue Dec 24th 2024
|| # CVS: $RCSfile$ - $Revision: 115359 $
|| #######################################################################
\*=========================================================================*/
